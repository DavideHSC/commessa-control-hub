{
  "name": "src",
  "type": "directory",
  "total_token_estimate": 89167,
  "children": [
    {
      "name": "api",
      "type": "directory",
      "children": [
        {
          "name": "causali.ts",
          "type": "file",
          "token_estimate": 354,
          "content": "import { CausaleContabile } from '@/types';\n\nexport const getCausali = async (): Promise<CausaleContabile[]> => {\n  const response = await fetch('/api/causali');\n  if (!response.ok) {\n    throw new Error('Errore nel caricamento delle causali');\n  }\n  return response.json();\n};\n\nexport const createCausale = async (data: { id: string; nome: string; descrizione: string; externalId?: string }): Promise<CausaleContabile> => {\n  const response = await fetch('/api/causali', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  \n  if (!response.ok) {\n    throw new Error('Errore nella creazione della causale');\n  }\n  \n  return response.json();\n};\n\nexport const updateCausale = async (id: string, data: { nome: string; descrizione: string; externalId?: string }): Promise<CausaleContabile> => {\n  const response = await fetch(`/api/causali/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  \n  if (!response.ok) {\n    throw new Error('Errore nell\\'aggiornamento della causale');\n  }\n  \n  return response.json();\n};\n\nexport const deleteCausale = async (id: string): Promise<void> => {\n  const response = await fetch(`/api/causali/${id}`, {\n    method: 'DELETE',\n  });\n  \n  if (!response.ok) {\n    throw new Error('Errore nell\\'eliminazione della causale');\n  }\n}; "
        },
        {
          "name": "clienti.ts",
          "type": "file",
          "token_estimate": 369,
          "content": "import { Cliente } from '@/types';\n\nconst API_URL = '/api/clienti';\n\nexport const getClienti = async (): Promise<Cliente[]> => {\n  const response = await fetch(API_URL);\n  if (!response.ok) {\n    throw new Error('Errore nel caricamento dei clienti');\n  }\n  return response.json();\n};\n\nexport const createCliente = async (cliente: Omit<Cliente, 'id'>): Promise<Cliente> => {\n  const response = await fetch(API_URL, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(cliente),\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || 'Errore nella creazione del cliente');\n  }\n  return response.json();\n};\n\nexport const updateCliente = async (id: string, cliente: Partial<Omit<Cliente, 'id'>>): Promise<Cliente> => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(cliente),\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || 'Errore nell\\'aggiornamento del cliente');\n  }\n  return response.json();\n};\n\nexport const deleteCliente = async (id: string): Promise<void> => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) {\n     const errorData = await response.json();\n    throw new Error(errorData.error || 'Errore nell\\'eliminazione del cliente');\n  }\n}; "
        },
        {
          "name": "codiciIva.ts",
          "type": "file",
          "token_estimate": 374,
          "content": "export interface CodiceIva {\n  id: string;\n  externalId?: string;\n  descrizione: string;\n  aliquota: number;\n}\n\nexport const getCodiciIva = async (): Promise<CodiceIva[]> => {\n  const response = await fetch('/api/codici-iva');\n  if (!response.ok) {\n    throw new Error('Errore nel caricamento dei codici IVA');\n  }\n  return response.json();\n};\n\nexport const createCodiceIva = async (data: { id: string; descrizione: string; aliquota: number; externalId?: string }): Promise<CodiceIva> => {\n  const response = await fetch('/api/codici-iva', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  \n  if (!response.ok) {\n    throw new Error('Errore nella creazione del codice IVA');\n  }\n  \n  return response.json();\n};\n\nexport const updateCodiceIva = async (id: string, data: { descrizione: string; aliquota: number; externalId?: string }): Promise<CodiceIva> => {\n  const response = await fetch(`/api/codici-iva/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  \n  if (!response.ok) {\n    throw new Error('Errore nell\\'aggiornamento del codice IVA');\n  }\n  \n  return response.json();\n};\n\nexport const deleteCodiceIva = async (id: string): Promise<void> => {\n  const response = await fetch(`/api/codici-iva/${id}`, {\n    method: 'DELETE',\n  });\n  \n  if (!response.ok) {\n    throw new Error('Errore nell\\'eliminazione del codice IVA');\n  }\n}; "
        },
        {
          "name": "commesse.ts",
          "type": "file",
          "token_estimate": 355,
          "content": "import { Commessa } from \"@/types\";\n\nconst API_BASE_URL = '/api/commesse';\n\nexport const getCommesse = async (): Promise<Commessa[]> => {\n    const response = await fetch(API_BASE_URL);\n    if (!response.ok) {\n        throw new Error('Errore nel recupero delle commesse');\n    }\n    return response.json();\n};\n\nexport const createCommessa = async (data: Partial<Commessa>): Promise<Commessa> => {\n    const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n        throw new Error('Errore nella creazione della commessa');\n    }\n    return response.json();\n};\n\nexport const updateCommessa = async (id: string, data: Partial<Commessa>): Promise<Commessa> => {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n        throw new Error('Errore nell\\'aggiornamento della commessa');\n    }\n    return response.json();\n};\n\nexport const deleteCommessa = async (id: string): Promise<void> => {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n        method: 'DELETE',\n    });\n    if (!response.ok) {\n        throw new Error('Errore nell\\'eliminazione della commessa');\n    }\n}; "
        },
        {
          "name": "condizioniPagamento.ts",
          "type": "file",
          "token_estimate": 405,
          "content": "export interface CondizionePagamento {\n  id: string;\n  externalId?: string;\n  descrizione: string;\n}\n\nexport const getCondizioniPagamento = async (): Promise<CondizionePagamento[]> => {\n  const response = await fetch('/api/condizioni-pagamento');\n  if (!response.ok) {\n    throw new Error('Errore nel caricamento delle condizioni di pagamento');\n  }\n  return response.json();\n};\n\nexport const createCondizionePagamento = async (data: { id: string; descrizione: string; externalId?: string }): Promise<CondizionePagamento> => {\n  const response = await fetch('/api/condizioni-pagamento', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  \n  if (!response.ok) {\n    throw new Error('Errore nella creazione della condizione di pagamento');\n  }\n  \n  return response.json();\n};\n\nexport const updateCondizionePagamento = async (id: string, data: { descrizione: string; externalId?: string }): Promise<CondizionePagamento> => {\n  const response = await fetch(`/api/condizioni-pagamento/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  \n  if (!response.ok) {\n    throw new Error('Errore nell\\'aggiornamento della condizione di pagamento');\n  }\n  \n  return response.json();\n};\n\nexport const deleteCondizionePagamento = async (id: string): Promise<void> => {\n  const response = await fetch(`/api/condizioni-pagamento/${id}`, {\n    method: 'DELETE',\n  });\n  \n  if (!response.ok) {\n    throw new Error('Errore nell\\'eliminazione della condizione di pagamento');\n  }\n}; "
        },
        {
          "name": "conti.ts",
          "type": "file",
          "token_estimate": 340,
          "content": "import { Conto } from \"@/types\";\n\nconst API_BASE_URL = '/api/conti';\n\nexport const getConti = async (): Promise<Conto[]> => {\n    const response = await fetch(API_BASE_URL);\n    if (!response.ok) {\n        throw new Error('Errore nel recupero dei conti');\n    }\n    return response.json();\n};\n\nexport const createConto = async (data: Conto): Promise<Conto> => {\n    const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n        throw new Error('Errore nella creazione del conto');\n    }\n    return response.json();\n};\n\nexport const updateConto = async (id: string, data: Partial<Conto>): Promise<Conto> => {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n        throw new Error('Errore nell\\'aggiornamento del conto');\n    }\n    return response.json();\n};\n\nexport const deleteConto = async (id: string): Promise<void> => {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n        method: 'DELETE',\n    });\n    if (!response.ok) {\n        throw new Error('Errore nell\\'eliminazione del conto');\n    }\n}; "
        },
        {
          "name": "dashboard.ts",
          "type": "file",
          "token_estimate": 241,
          "content": "import { DashboardData } from '@/types';\n\n/**\n * Recupera e aggrega i dati necessari per la dashboard di controllo di gestione\n * chiamando l'endpoint API del server.\n * @returns Una Promise che risolve con l'oggetto `DashboardData`.\n */\nexport const getDashboardData = async (): Promise<DashboardData> => {\n  console.log('Chiamata API dashboard...');\n\n  try {\n    const response = await fetch('/api/dashboard');\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      try {\n        const errorData = JSON.parse(errorText);\n        throw new Error(errorData.message || `Errore HTTP: ${response.status}`);\n      } catch (e) {\n        throw new Error(`Risposta non JSON dal server: ${errorText}`);\n      }\n    }\n    \n    const data = await response.json();\n    console.log('Dati dashboard ricevuti:', data);\n    \n    return data;\n  } catch (error) {\n    console.error('Errore nel recupero dati dashboard:', error);\n    throw error;\n  }\n}; "
        },
        {
          "name": "database.ts",
          "type": "file",
          "token_estimate": 156,
          "content": "import { toast } from \"sonner\";\n\nexport const clearScrittureContabili = async (): Promise<void> => {\n  try {\n    const response = await fetch('/api/database/scritture', {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Errore durante la cancellazione');\n    }\n\n    toast.success('Tabella Scritture Contabili svuotata con successo!');\n  } catch (error) {\n    console.error('Errore nella chiamata API per svuotare le scritture:', error);\n    toast.error(`Si è verificato un errore: ${error.message}`);\n    throw error;\n  }\n}; "
        },
        {
          "name": "fornitori.ts",
          "type": "file",
          "token_estimate": 378,
          "content": "import { Fornitore } from '@/types';\n\nconst API_URL = '/api/fornitori';\n\nexport const getFornitori = async (): Promise<Fornitore[]> => {\n  const response = await fetch(API_URL);\n  if (!response.ok) {\n    throw new Error('Errore nel caricamento dei fornitori');\n  }\n  return response.json();\n};\n\nexport const createFornitore = async (fornitore: Omit<Fornitore, 'id'>): Promise<Fornitore> => {\n  const response = await fetch(API_URL, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(fornitore),\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || 'Errore nella creazione del fornitore');\n  }\n  return response.json();\n};\n\nexport const updateFornitore = async (id: string, fornitore: Partial<Omit<Fornitore, 'id'>>): Promise<Fornitore> => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(fornitore),\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || 'Errore nell\\'aggiornamento del fornitore');\n  }\n  return response.json();\n};\n\nexport const deleteFornitore = async (id: string): Promise<void> => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) {\n     const errorData = await response.json();\n    throw new Error(errorData.error || 'Errore nell\\'eliminazione del fornitore');\n  }\n}; "
        },
        {
          "name": "importTemplates.ts",
          "type": "file",
          "token_estimate": 387,
          "content": "import { ImportTemplate } from \"@/types\";\n\nexport const getImportTemplates = async (): Promise<ImportTemplate[]> => {\n    const response = await fetch('/api/import-templates');\n    if (!response.ok) {\n        throw new Error('Errore nel recupero dei template di importazione');\n    }\n    return response.json();\n};\n\nexport const createImportTemplate = async (templateData: Omit<ImportTemplate, 'id' | 'fields'> & { fields: Omit<ImportTemplate['fields'][0], 'id'>[] }): Promise<ImportTemplate> => {\n    const response = await fetch('/api/import-templates', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(templateData)\n    });\n    if (!response.ok) {\n        throw new Error('Errore nella creazione del template');\n    }\n    return response.json();\n};\n\n\nexport const updateImportTemplate = async (id: string, templateData: Omit<ImportTemplate, 'id'>): Promise<ImportTemplate> => {\n    const response = await fetch(`/api/import-templates/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(templateData)\n    });\n    if (!response.ok) {\n        throw new Error('Errore nell\\'aggiornamento del template');\n    }\n    return response.json();\n};\n\n\nexport const deleteImportTemplate = async (id: string): Promise<void> => {\n    const response = await fetch(`/api/import-templates/${id}`, {\n        method: 'DELETE'\n    });\n    if (!response.ok) {\n        throw new Error('Errore nell\\'eliminazione del template');\n    }\n}; "
        },
        {
          "name": "index.ts",
          "type": "file",
          "token_estimate": 369,
          "content": "import { \n  commesse, \n  vociAnalitiche, \n  pianoDeiConti, \n  scrittureContabili,\n} from '@/data/mock';\nimport { \n  Commessa, \n  VoceAnalitica, \n  Conto, \n  ScritturaContabile,\n  CausaleContabile\n} from '@/types';\n\nconst API_BASE_URL = '/api';\n\n// Simula un ritardo di rete per un'esperienza più realistica\nconst networkDelay = (ms: number) => new Promise(res => setTimeout(res, ms));\n\n// --- API Functions ---\n\nexport const getCommesse = async (): Promise<Commessa[]> => {\n  await networkDelay(50);\n  return Promise.resolve(commesse);\n};\n\nexport const getVociAnalitiche = async (): Promise<VoceAnalitica[]> => {\n  await networkDelay(50);\n  return Promise.resolve(vociAnalitiche);\n};\n\nexport const getPianoDeiConti = async (): Promise<Conto[]> => {\n  await networkDelay(50);\n  return Promise.resolve(pianoDeiConti);\n};\n\nexport const getCausaliContabili = async (): Promise<CausaleContabile[]> => {\n  const response = await fetch(`${API_BASE_URL}/causali`);\n  if (!response.ok) {\n    throw new Error('Errore nel caricamento delle causali contabili');\n  }\n  return response.json();\n};\n\nexport const getScrittureContabiliMock = async (): Promise<ScritturaContabile[]> => {\n  await networkDelay(150);\n  return Promise.resolve(scrittureContabili);\n};\n\n// In futuro aggiungeremo qui le funzioni per recuperare e salvare le scritture contabili. \n\n// Qui potremmo aggiungere funzioni per creare/aggiornare/eliminare dati,\n// che in un'app reale farebbero chiamate a un backend API. "
        },
        {
          "name": "registrazioni.ts",
          "type": "file",
          "token_estimate": 684,
          "content": "import { ScritturaContabile } from \"@/types\";\n\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n/**\n * Recupera tutte le scritture contabili dal server.\n * @returns Una Promise che si risolve con l'array di tutte le scritture.\n */\nexport const getRegistrazioni = async (): Promise<ScritturaContabile[]> => {\n  const response = await fetch(`${API_BASE_URL}/registrazioni`);\n  if (!response.ok) {\n    throw new Error('Errore nel recupero delle registrazioni');\n  }\n  return response.json();\n};\n\n/**\n * Trova una singola scrittura contabile tramite il suo ID dal server.\n * @param id L'ID della scrittura da trovare.\n * @returns Una Promise che si risolve con la scrittura trovata o `null`.\n */\nexport const getRegistrazioneById = async (id: string): Promise<ScritturaContabile | null> => {\n  const response = await fetch(`${API_BASE_URL}/registrazioni/${id}`);\n  if (!response.ok) {\n    if (response.status === 404) return null;\n    throw new Error('Errore nel recupero della registrazione');\n  }\n  return response.json();\n};\n\n/**\n * Aggiunge una nuova scrittura contabile al server.\n * @param scritturaData I dati della nuova scrittura.\n * @returns Una Promise che si risolve con la scrittura appena creata.\n */\nexport const addRegistrazione = async (scritturaData: Omit<ScritturaContabile, 'id'>): Promise<ScritturaContabile> => {\n  const response = await fetch(`${API_BASE_URL}/registrazioni`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(scritturaData),\n  });\n  if (!response.ok) {\n    throw new Error('Errore nell\\'aggiunta della registrazione');\n  }\n  return response.json();\n};\n\n/**\n * Aggiorna una scrittura contabile esistente sul server.\n * @param registrazione La scrittura contabile da aggiornare.\n * @returns Una Promise che si risolve con la scrittura aggiornata.\n */\nexport const updateRegistrazione = async (registrazione: ScritturaContabile): Promise<ScritturaContabile> => {\n  const response = await fetch(`${API_BASE_URL}/registrazioni/${registrazione.id}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(registrazione),\n  });\n  if (!response.ok) {\n    throw new Error('Errore nell\\'aggiornamento della registrazione');\n  }\n  return response.json();\n};\n\n/**\n * Elimina una scrittura contabile dal server.\n * @param id L'ID della scrittura da eliminare.\n * @returns Una Promise che si risolve quando l'eliminazione ha successo.\n */\nexport const deleteRegistrazione = async (id: string): Promise<void> => {\n  const response = await fetch(`${API_BASE_URL}/registrazioni/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) {\n    throw new Error('Errore durante l\\'eliminazione della registrazione');\n  }\n};"
        },
        {
          "name": "vociAnalitiche.ts",
          "type": "file",
          "token_estimate": 377,
          "content": "import { VoceAnalitica } from \"@/types\";\n\nconst API_BASE_URL = '/api/voci-analitiche';\n\nexport const getVociAnalitiche = async (): Promise<VoceAnalitica[]> => {\n    const response = await fetch(API_BASE_URL);\n    if (!response.ok) {\n        throw new Error('Errore nel recupero delle voci analitiche');\n    }\n    return response.json();\n};\n\nexport const createVoceAnalitica = async (data: VoceAnalitica): Promise<VoceAnalitica> => {\n    const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n        throw new Error('Errore nella creazione della voce analitica');\n    }\n    return response.json();\n};\n\nexport const updateVoceAnalitica = async (id: string, data: Partial<Omit<VoceAnalitica, 'id'>>): Promise<VoceAnalitica> => {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n        throw new Error('Errore nell\\'aggiornamento della voce analitica');\n    }\n    return response.json();\n};\n\nexport const deleteVoceAnalitica = async (id: string): Promise<void> => {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n        method: 'DELETE',\n    });\n    if (!response.ok) {\n        throw new Error('Errore nell\\'eliminazione della voce analitica');\n    }\n}; "
        }
      ]
    },
    {
      "name": "App.css",
      "type": "file",
      "token_estimate": 152,
      "content": "#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n"
    },
    {
      "name": "App.tsx",
      "type": "file",
      "token_estimate": 433,
      "content": "import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Layout from \"./components/Layout\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Commesse from \"./pages/Commesse\";\nimport CommessaDettaglio from \"./pages/CommessaDettaglio\";\nimport PrimaNota from \"./pages/PrimaNota\";\nimport NuovaRegistrazionePrimaNota from \"./pages/NuovaRegistrazionePrimaNota\";\nimport NotFound from \"./pages/NotFound\";\nimport ImportPage from './pages/Import';\nimport Database from './pages/Database';\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <BrowserRouter>\n        <Routes>\n          <Route element={<Layout />}>\n            <Route path=\"/\" element={<Dashboard />} />\n            <Route path=\"/commesse\" element={<Commesse />} />\n            <Route path=\"/commesse/:id\" element={<CommessaDettaglio />} />\n            <Route path=\"/prima-nota\" element={<PrimaNota />} />\n            <Route path=\"/prima-nota/nuova\" element={<NuovaRegistrazionePrimaNota />} />\n            <Route path=\"/prima-nota/modifica/:id\" element={<NuovaRegistrazionePrimaNota />} />\n            <Route path=\"/import\" element={<ImportPage />} />\n            <Route path=\"/database\" element={<Database />} />\n          </Route>\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </BrowserRouter>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n"
    },
    {
      "name": "components",
      "type": "directory",
      "children": [
        {
          "name": "admin",
          "type": "directory",
          "children": [
            {
              "name": "import-templates-columns.tsx",
              "type": "file",
              "token_estimate": 550,
              "content": "\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { ImportTemplate } from \"@/types\"\nimport { Button } from \"@/components/ui/button\"\nimport { ArrowUpDown, MoreHorizontal, Edit, Trash2 } from \"lucide-react\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nexport const getColumns = (\n    onEdit: (template: ImportTemplate) => void,\n    onDelete: (template: ImportTemplate) => void\n): ColumnDef<ImportTemplate>[] => [\n  {\n    accessorKey: \"nome\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        >\n          Nome Template\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )\n    },\n  },\n  {\n    accessorKey: \"fields\",\n    header: \"Numero Campi\",\n    cell: ({ row }) => {\n        const fields = row.getValue(\"fields\") as any[];\n        return <div className=\"text-center\">{fields.length}</div>;\n    }\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => {\n      const template = row.original\n\n      return (\n        <div className=\"text-right\">\n            <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                <span className=\"sr-only\">Apri menu</span>\n                <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n                <DropdownMenuLabel>Azioni</DropdownMenuLabel>\n                <DropdownMenuItem onClick={() => onEdit(template)}>\n                    <Edit className=\"mr-2 h-4 w-4\" />\n                    Modifica\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={() => onDelete(template)} className=\"text-red-600\">\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    Elimina\n                </DropdownMenuItem>\n            </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n      )\n    },\n  },\n] "
            },
            {
              "name": "ImportTemplatesAdmin.tsx",
              "type": "file",
              "token_estimate": 1084,
              "content": "\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { ImportTemplate } from '@/types';\nimport { getImportTemplates, deleteImportTemplate } from '@/api/importTemplates';\nimport { getColumns } from './import-templates-columns';\nimport { DataTable } from '@/components/ui/data-table'; // Assuming a generic DataTable component exists\nimport { Button } from '@/components/ui/button';\nimport { PlusCircle } from 'lucide-react';\nimport { toast } from 'sonner';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n// We will create this component next\nimport { TemplateFormDialog } from './TemplateFormDialog'; \n\nconst ImportTemplatesAdmin: React.FC = () => {\n    const [templates, setTemplates] = useState<ImportTemplate[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [isFormOpen, setIsFormOpen] = useState(false);\n    const [editingTemplate, setEditingTemplate] = useState<ImportTemplate | null>(null);\n    const [deletingTemplate, setDeletingTemplate] = useState<ImportTemplate | null>(null);\n\n    const fetchTemplates = async () => {\n        try {\n            setLoading(true);\n            const data = await getImportTemplates();\n            setTemplates(data);\n            setError(null);\n        } catch (err) {\n            setError('Impossibile caricare i template.');\n            toast.error((err as Error).message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchTemplates();\n    }, []);\n\n    const handleEdit = (template: ImportTemplate) => {\n        setEditingTemplate(template);\n        setIsFormOpen(true);\n    };\n\n    const handleDelete = async () => {\n        if (!deletingTemplate) return;\n        try {\n            await deleteImportTemplate(deletingTemplate.id);\n            toast.success(`Template \"${deletingTemplate.nome}\" eliminato con successo.`);\n            fetchTemplates(); // Refresh data\n        } catch (error) {\n            toast.error((error as Error).message);\n        } finally {\n            setDeletingTemplate(null);\n        }\n    };\n    \n    const handleFormClose = (refresh: boolean) => {\n        setIsFormOpen(false);\n        setEditingTemplate(null);\n        if (refresh) {\n            fetchTemplates();\n        }\n    }\n\n    const columns = getColumns(handleEdit, (template) => setDeletingTemplate(template));\n\n    if (loading) {\n        return <div>Caricamento in corso...</div>;\n    }\n\n    if (error) {\n        return <div className=\"text-red-500\">{error}</div>;\n    }\n\n    return (\n        <div>\n            <div className=\"flex justify-end mb-4\">\n                <Button onClick={() => { setEditingTemplate(null); setIsFormOpen(true); }}>\n                    <PlusCircle className=\"mr-2 h-4 w-4\" />\n                    Aggiungi Template\n                </Button>\n            </div>\n            \n            <DataTable columns={columns} data={templates} />\n\n            {/* Placeholder for the Form Dialog */}\n            \n            <TemplateFormDialog\n                isOpen={isFormOpen}\n                onClose={handleFormClose}\n                template={editingTemplate}\n            /> \n            \n            <AlertDialog open={!!deletingTemplate} onOpenChange={() => setDeletingTemplate(null)}>\n                <AlertDialogContent>\n                    <AlertDialogHeader>\n                        <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n                        <AlertDialogDescription>\n                            Vuoi davvero eliminare il template \"<b>{deletingTemplate?.nome}</b>\"? \n                            Questa azione non può essere annullata.\n                        </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                        <AlertDialogCancel>Annulla</AlertDialogCancel>\n                        <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n                    </AlertDialogFooter>\n                </AlertDialogContent>\n            </AlertDialog>\n        </div>\n    );\n};\n\nexport default ImportTemplatesAdmin; "
            },
            {
              "name": "TemplateFormDialog.tsx",
              "type": "file",
              "token_estimate": 2058,
              "content": "\"use client\";\n\nimport React, { useEffect } from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { ImportTemplate, FieldDefinition } from '@/types';\nimport { createImportTemplate, updateImportTemplate } from '@/api/importTemplates';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { toast } from 'sonner';\nimport { Trash2, PlusCircle } from 'lucide-react';\n\ninterface TemplateFormDialogProps {\n  isOpen: boolean;\n  onClose: (refresh: boolean) => void;\n  template: ImportTemplate | null;\n}\n\nconst fieldSchema = z.object({\n  id: z.string().optional(),\n  nomeCampo: z.string().min(1, \"Il nome del campo è obbligatorio.\"),\n  start: z.coerce.number().min(0, \"L'inizio deve essere non negativo.\"),\n  length: z.coerce.number().min(1, \"La lunghezza deve essere almeno 1.\"),\n  type: z.enum(['string', 'number', 'date']),\n  fileIdentifier: z.string().optional().nullable(),\n});\n\nconst templateSchema = z.object({\n  nome: z.string().min(2, \"Il nome del template è obbligatorio.\"),\n  fields: z.array(fieldSchema).min(1, \"Deve esserci almeno un campo.\"),\n});\n\n\nexport const TemplateFormDialog: React.FC<TemplateFormDialogProps> = ({ isOpen, onClose, template }) => {\n  const form = useForm<z.infer<typeof templateSchema>>({\n    resolver: zodResolver(templateSchema),\n    defaultValues: {\n      nome: '',\n      fields: [],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"fields\"\n  });\n\n  useEffect(() => {\n    if (template) {\n      form.reset({\n        nome: template.nome,\n        fields: template.fields.map(f => ({...f, id: f.id || undefined }))\n      });\n    } else {\n      form.reset({\n        nome: '',\n        fields: [{ nomeCampo: '', start: 0, length: 1, type: 'string', fileIdentifier: '' }],\n      });\n    }\n  }, [template, form]);\n\n  const onSubmit = async (values: z.infer<typeof templateSchema>) => {\n    try {\n        if (template) {\n            await updateImportTemplate(template.id, values as Omit<ImportTemplate, 'id'>);\n            toast.success(\"Template aggiornato con successo.\");\n        } else {\n            await createImportTemplate(values as any); // any to match the API signature\n            toast.success(\"Template creato con successo.\");\n        }\n        onClose(true);\n    } catch (error) {\n        toast.error((error as Error).message);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose(false)}>\n      <DialogContent className=\"max-w-4xl\">\n        <DialogHeader>\n          <DialogTitle>{template ? 'Modifica Template' : 'Nuovo Template'}</DialogTitle>\n          <DialogDescription>\n            Definisci il nome del template e i campi a larghezza fissa.\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"space-y-4 max-h-[60vh] overflow-y-auto pr-4\">\n                <FormField\n                    control={form.control}\n                    name=\"nome\"\n                    render={({ field }) => (\n                        <FormItem>\n                        <FormLabel>Nome Template</FormLabel>\n                        <FormControl>\n                            <Input placeholder=\"Es. clienti_fornitori\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                        </FormItem>\n                    )}\n                />\n\n                <div>\n                    <Label>Campi del Template</Label>\n                    <div className=\"space-y-4 mt-2\">\n                        {fields.map((field, index) => (\n                        <div key={field.id} className=\"flex items-end space-x-2 p-3 border rounded-md\">\n                            <FormField\n                                control={form.control}\n                                name={`fields.${index}.nomeCampo`}\n                                render={({ field }) => (\n                                    <FormItem><FormLabel>Nome Campo</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>\n                                )}\n                            />\n                            <FormField\n                                control={form.control}\n                                name={`fields.${index}.start`}\n                                render={({ field }) => (\n                                    <FormItem><FormLabel>Inizio</FormLabel><FormControl><Input type=\"number\" {...field} /></FormControl><FormMessage /></FormItem>\n                                )}\n                            />\n                            <FormField\n                                control={form.control}\n                                name={`fields.${index}.length`}\n                                render={({ field }) => (\n                                    <FormItem><FormLabel>Lunghezza</FormLabel><FormControl><Input type=\"number\" {...field} /></FormControl><FormMessage /></FormItem>\n                                )}\n                            />\n                             <FormField\n                                control={form.control}\n                                name={`fields.${index}.type`}\n                                render={({ field }) => (\n                                    <FormItem><FormLabel>Tipo</FormLabel>\n                                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                        <FormControl><SelectTrigger><SelectValue /></SelectTrigger></FormControl>\n                                        <SelectContent>\n                                            <SelectItem value=\"string\">Testo</SelectItem>\n                                            <SelectItem value=\"number\">Numero</SelectItem>\n                                            <SelectItem value=\"date\">Data</SelectItem>\n                                        </SelectContent>\n                                    </Select>\n                                    <FormMessage /></FormItem>\n                                )}\n                            />\n                             <FormField\n                                control={form.control}\n                                name={`fields.${index}.fileIdentifier`}\n                                render={({ field }) => (\n                                    <FormItem><FormLabel>ID File (Opz.)</FormLabel><FormControl><Input {...field} value={field.value || ''} /></FormControl><FormMessage /></FormItem>\n                                )}\n                            />\n                            <Button type=\"button\" variant=\"destructive\" size=\"icon\" onClick={() => remove(index)}>\n                                <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                        </div>\n                        ))}\n                    </div>\n                    <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"mt-4\"\n                        onClick={() => append({ nomeCampo: '', start: 0, length: 1, type: 'string', fileIdentifier: '' })}>\n                        <PlusCircle className=\"mr-2 h-4 w-4\" />\n                        Aggiungi Campo\n                    </Button>\n                </div>\n            </div>\n            <DialogFooter>\n              <Button type=\"button\" variant=\"ghost\" onClick={() => onClose(false)}>Annulla</Button>\n              <Button type=\"submit\">Salva Template</Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}; "
            }
          ]
        },
        {
          "name": "Layout.tsx",
          "type": "file",
          "token_estimate": 203,
          "content": "import React, { useState } from 'react';\nimport { Sidebar } from './Sidebar';\nimport { SidebarProvider, SidebarTrigger } from '@/components/ui/sidebar';\nimport { Outlet } from \"react-router-dom\";\nimport { Toaster } from \"@/components/ui/sonner\"\n\nconst Layout: React.FC = () => {\n  return (\n    <SidebarProvider>\n      <div className=\"min-h-screen flex w-full bg-slate-50\">\n        <Sidebar />\n        <main className=\"flex-1 flex flex-col\">\n          <div className=\"flex items-center gap-4 p-4 bg-white border-b border-slate-200\">\n            <SidebarTrigger className=\"text-slate-600 hover:text-slate-900\" />\n          </div>\n          <div className=\"flex-1 p-6\">\n            <Outlet />\n          </div>\n        </main>\n        <Toaster />\n      </div>\n    </SidebarProvider>\n  );\n};\n\nexport default Layout;\n"
        },
        {
          "name": "Sidebar.tsx",
          "type": "file",
          "token_estimate": 1155,
          "content": "import React from 'react';\nimport { Home, FileText, BarChart3, Settings, Building2, Upload, Database } from 'lucide-react';\nimport {\n  Sidebar as SidebarPrimitive,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from '@/components/ui/sidebar';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Commesse\",\n    url: \"/commesse\",\n    icon: Building2,\n  },\n  {\n    title: \"Prima Nota\",\n    url: \"/prima-nota\",\n    icon: FileText,\n  },\n  {\n    title: \"Report\",\n    url: \"/report\",\n    icon: BarChart3,\n  },\n];\n\nconst serviziItems = [\n  {\n    title: \"Importa Dati\",\n    url: \"/import\",\n    icon: Upload,\n  },\n  {\n    title: \"Database\",\n    url: \"/database\",\n    icon: Database,\n  },\n  {\n    title: \"Impostazioni\",\n    url: \"/impostazioni\",\n    icon: Settings,\n  },\n];\n\nexport function Sidebar() {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <SidebarPrimitive className=\"border-r border-slate-200 bg-white\">\n      <SidebarHeader className=\"p-6 border-b border-slate-200\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-indigo-600 rounded-lg flex items-center justify-center\">\n            <Building2 className=\"w-5 h-5 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"font-semibold text-slate-900 text-lg\">CommessaHub</h2>\n            <p className=\"text-xs text-slate-500\">Gestione Contabilità</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent className=\"px-4 py-6\">\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-xs font-medium text-slate-500 uppercase tracking-wider mb-4\">\n            Navigazione\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu className=\"space-y-1\">\n              {menuItems.map((item) => {\n                const isActive = location.pathname === item.url;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild \n                      className={`hover:bg-slate-100 rounded-lg transition-colors duration-200 ${\n                        isActive ? 'bg-indigo-50 text-indigo-700 border-indigo-200' : ''\n                      }`}\n                    >\n                      <button\n                        onClick={() => navigate(item.url)}\n                        className=\"w-full flex items-center gap-3 px-3 py-2 text-left\"\n                      >\n                        <item.icon className={`w-5 h-5 ${isActive ? 'text-indigo-600' : 'text-slate-600'}`} />\n                        <span className={`font-medium ${isActive ? 'text-indigo-700' : 'text-slate-700'}`}>{item.title}</span>\n                      </button>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-xs font-medium text-slate-500 uppercase tracking-wider mb-4 pt-4\">\n            Servizi\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu className=\"space-y-1\">\n              {serviziItems.map((item) => {\n                const isActive = location.pathname === item.url;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild \n                      className={`hover:bg-slate-100 rounded-lg transition-colors duration-200 ${\n                        isActive ? 'bg-indigo-50 text-indigo-700 border-indigo-200' : ''\n                      }`}\n                    >\n                      <button\n                        onClick={() => navigate(item.url)}\n                        className=\"w-full flex items-center gap-3 px-3 py-2 text-left\"\n                      >\n                        <item.icon className={`w-5 h-5 ${isActive ? 'text-indigo-600' : 'text-slate-600'}`} />\n                        <span className={`font-medium ${isActive ? 'text-indigo-700' : 'text-slate-700'}`}>{item.title}</span>\n                      </button>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n      </SidebarContent>\n    </SidebarPrimitive>\n  );\n}\n"
        },
        {
          "name": "ui",
          "type": "directory",
          "children": [
            {
              "name": "accordion.tsx",
              "type": "file",
              "token_estimate": 495,
              "content": "import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"
            },
            {
              "name": "alert-dialog.tsx",
              "type": "file",
              "token_estimate": 1105,
              "content": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
            },
            {
              "name": "alert.tsx",
              "type": "file",
              "token_estimate": 396,
              "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"
            },
            {
              "name": "aspect-ratio.tsx",
              "type": "file",
              "token_estimate": 35,
              "content": "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n"
            },
            {
              "name": "avatar.tsx",
              "type": "file",
              "token_estimate": 352,
              "content": "import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"
            },
            {
              "name": "badge.tsx",
              "type": "file",
              "token_estimate": 282,
              "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"
            },
            {
              "name": "breadcrumb.tsx",
              "type": "file",
              "token_estimate": 676,
              "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n"
            },
            {
              "name": "button.tsx",
              "type": "file",
              "token_estimate": 476,
              "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
            },
            {
              "name": "calendar.tsx",
              "type": "file",
              "token_estimate": 655,
              "content": "import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n"
            },
            {
              "name": "card.tsx",
              "type": "file",
              "token_estimate": 455,
              "content": "\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
            },
            {
              "name": "carousel.tsx",
              "type": "file",
              "token_estimate": 1553,
              "content": "import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n"
            },
            {
              "name": "chart.tsx",
              "type": "file",
              "token_estimate": 2617,
              "content": "import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"
            },
            {
              "name": "checkbox.tsx",
              "type": "file",
              "token_estimate": 264,
              "content": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"
            },
            {
              "name": "collapsible.tsx",
              "type": "file",
              "token_estimate": 79,
              "content": "import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n"
            },
            {
              "name": "combobox.tsx",
              "type": "file",
              "token_estimate": 703,
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nexport interface ComboboxOption {\n  value: string;\n  label: string;\n  description?: string;\n}\n\ninterface ComboboxProps {\n  options: ComboboxOption[];\n  value?: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  emptyPlaceholder?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport function Combobox({ \n  options, \n  value, \n  onChange, \n  placeholder = \"Select option...\", \n  searchPlaceholder = \"Search...\",\n  emptyPlaceholder = \"No options found.\",\n  className,\n  disabled = false\n}: ComboboxProps) {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\"w-full justify-between\", className)}\n          disabled={disabled}\n        >\n          {value\n            ? options.find((option) => option.value === value)?.label\n            : placeholder}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n        <Command>\n          <CommandInput placeholder={searchPlaceholder} />\n          <CommandList>\n            <CommandEmpty>{emptyPlaceholder}</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  value={option.label}\n                  onSelect={() => {\n                    onChange(option.value)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === option.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  <div className=\"flex flex-col\">\n                    <span>{option.label}</span>\n                    {option.description && (\n                      <span className=\"text-xs text-slate-500\">\n                        {option.description}\n                      </span>\n                    )}\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n} "
            },
            {
              "name": "command.tsx",
              "type": "file",
              "token_estimate": 1259,
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-white text-slate-950 dark:bg-slate-950 dark:text-slate-50\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-slate-500 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-list]]:max-h-[300px] [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-slate-500 disabled:cursor-not-allowed disabled:opacity-50 dark:placeholder:text-slate-400\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-slate-950 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-slate-500 dark:text-slate-50 dark:[&_[cmdk-group-heading]]:text-slate-400\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-slate-200 dark:bg-slate-800\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-slate-100 aria-selected:text-slate-900 data-[disabled='true']:pointer-events-none data-[disabled='true']:opacity-50 dark:aria-selected:bg-slate-800 dark:aria-selected:text-slate-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-slate-500 dark:text-slate-400\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandSeparator,\n  CommandShortcut,\n}\n"
            },
            {
              "name": "context-menu.tsx",
              "type": "file",
              "token_estimate": 1812,
              "content": "import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n"
            },
            {
              "name": "data-table.tsx",
              "type": "file",
              "token_estimate": 777,
              "content": "\"use client\"\n\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n  getPaginationRowModel,\n  getSortedRowModel,\n  SortingState,\n} from \"@tanstack/react-table\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\nimport { Button } from \"@/components/ui/button\"\nimport React from \"react\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n    const [sorting, setSorting] = React.useState<SortingState>([])\n\n    const table = useReactTable({\n        data,\n        columns,\n        getCoreRowModel: getCoreRowModel(),\n        getPaginationRowModel: getPaginationRowModel(),\n        onSortingChange: setSorting,\n        getSortedRowModel: getSortedRowModel(),\n        state: {\n            sorting,\n        },\n    })\n\n  return (\n    <div>\n        <div className=\"rounded-md border\">\n        <Table>\n            <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                    return (\n                    <TableHead key={header.id}>\n                        {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                            )}\n                    </TableHead>\n                    )\n                })}\n                </TableRow>\n            ))}\n            </TableHeader>\n            <TableBody>\n            {table.getRowModel().rows?.length ? (\n                table.getRowModel().rows.map((row) => (\n                <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && \"selected\"}\n                >\n                    {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                    ))}\n                </TableRow>\n                ))\n            ) : (\n                <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                    Nessun risultato.\n                </TableCell>\n                </TableRow>\n            )}\n            </TableBody>\n        </Table>\n        </div>\n        <div className=\"flex items-center justify-end space-x-2 py-4\">\n            <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n            >\n            Precedente\n            </Button>\n            <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n            >\n            Successivo\n            </Button>\n        </div>\n    </div>\n  )\n} "
            },
            {
              "name": "dialog.tsx",
              "type": "file",
              "token_estimate": 959,
              "content": "import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"
            },
            {
              "name": "drawer.tsx",
              "type": "file",
              "token_estimate": 752,
              "content": "import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n"
            },
            {
              "name": "dropdown-menu.tsx",
              "type": "file",
              "token_estimate": 1824,
              "content": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"
            },
            {
              "name": "form.tsx",
              "type": "file",
              "token_estimate": 1022,
              "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"
            },
            {
              "name": "hover-card.tsx",
              "type": "file",
              "token_estimate": 296,
              "content": "import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n"
            },
            {
              "name": "input-otp.tsx",
              "type": "file",
              "token_estimate": 539,
              "content": "import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n"
            },
            {
              "name": "input.tsx",
              "type": "file",
              "token_estimate": 198,
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
            },
            {
              "name": "label.tsx",
              "type": "file",
              "token_estimate": 178,
              "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
            },
            {
              "name": "menubar.tsx",
              "type": "file",
              "token_estimate": 1994,
              "content": "import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n"
            },
            {
              "name": "navigation-menu.tsx",
              "type": "file",
              "token_estimate": 1262,
              "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n"
            },
            {
              "name": "pagination.tsx",
              "type": "file",
              "token_estimate": 688,
              "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n"
            },
            {
              "name": "popover.tsx",
              "type": "file",
              "token_estimate": 308,
              "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"
            },
            {
              "name": "progress.tsx",
              "type": "file",
              "token_estimate": 195,
              "content": "import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"
            },
            {
              "name": "radio-group.tsx",
              "type": "file",
              "token_estimate": 367,
              "content": "import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"
            },
            {
              "name": "resizable.tsx",
              "type": "file",
              "token_estimate": 428,
              "content": "import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n"
            },
            {
              "name": "scroll-area.tsx",
              "type": "file",
              "token_estimate": 411,
              "content": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"
            },
            {
              "name": "select.tsx",
              "type": "file",
              "token_estimate": 1404,
              "content": "import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
            },
            {
              "name": "separator.tsx",
              "type": "file",
              "token_estimate": 189,
              "content": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"
            },
            {
              "name": "sheet.tsx",
              "type": "file",
              "token_estimate": 1063,
              "content": "import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n"
            },
            {
              "name": "sidebar.tsx",
              "type": "file",
              "token_estimate": 5842,
              "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n"
            },
            {
              "name": "skeleton.tsx",
              "type": "file",
              "token_estimate": 66,
              "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"
            },
            {
              "name": "slider.tsx",
              "type": "file",
              "token_estimate": 270,
              "content": "import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"
            },
            {
              "name": "sonner.tsx",
              "type": "file",
              "token_estimate": 224,
              "content": "import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n"
            },
            {
              "name": "switch.tsx",
              "type": "file",
              "token_estimate": 285,
              "content": "import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
            },
            {
              "name": "table.tsx",
              "type": "file",
              "token_estimate": 692,
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"
            },
            {
              "name": "tabs.tsx",
              "type": "file",
              "token_estimate": 471,
              "content": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"
            },
            {
              "name": "textarea.tsx",
              "type": "file",
              "token_estimate": 173,
              "content": "\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"
            },
            {
              "name": "toast.tsx",
              "type": "file",
              "token_estimate": 1212,
              "content": "import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n"
            },
            {
              "name": "toaster.tsx",
              "type": "file",
              "token_estimate": 193,
              "content": "import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n"
            },
            {
              "name": "toggle-group.tsx",
              "type": "file",
              "token_estimate": 435,
              "content": "import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n"
            },
            {
              "name": "toggle.tsx",
              "type": "file",
              "token_estimate": 359,
              "content": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n"
            },
            {
              "name": "tooltip.tsx",
              "type": "file",
              "token_estimate": 287,
              "content": "import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"
            },
            {
              "name": "use-toast.ts",
              "type": "file",
              "token_estimate": 21,
              "content": "import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n"
            }
          ]
        }
      ]
    },
    {
      "name": "data",
      "type": "directory",
      "children": [
        {
          "name": "mock.ts",
          "type": "file",
          "token_estimate": 3043,
          "content": "// Questo file conterrà tutti i dati mock per la nostra demo.\n// Simula un database a cui l'applicazione accederà tramite un layer API fittizio.\n\nimport { VoceAnalitica, Conto, Commessa, CausaleContabile, ScritturaContabile } from '../types';\n\n// ====================================================================\n// 1. VOCI ANALITICHE (ex Centri di Costo)\n// Basate sulle colonne del file Excel del cliente e del file di testo.\n// ====================================================================\nexport const vociAnalitiche: VoceAnalitica[] = [\n  { id: '1', nome: 'Personale', descrizione: 'Costi relativi al personale dipendente' },\n  { id: '2', nome: 'Gestione Automezzi', descrizione: 'Costi per la manutenzione e gestione della flotta' },\n  { id: '3', nome: 'Gestione Attrezzature' },\n  { id: '4', nome: 'Sacchi e Bidoni' },\n  { id: '5', nome: 'Servizi Esternalizzati' },\n  { id: '6', nome: 'Pulizia Strade e Diserbo' },\n  { id: '7', nome: 'Gestione Aree Operative' },\n  { id: '8', nome: 'Amm. Automezzi' },\n  { id: '9', nome: 'Amm. Attrezzature' },\n  { id: '10', nome: 'Locazione Sedi e Aree' },\n  { id: '11', nome: 'Trasporti Esternalizzati' },\n  { id: '12', nome: 'Spese Generali e Amministrative' },\n  { id: '13', nome: 'Selezione e Trattamento Rifiuti' },\n  { id: '14', nome: 'Conferimento Organico e Sfalci' },\n  { id: '15', nome: 'Fioriture e Verde Pubblico' },\n  { id: '10', nome: 'Servizi Generali', descrizione: 'Costi per servizi non direttamente attribuibili' },\n];\n\n// ====================================================================\n// 2. PIANO DEI CONTI (un estratto significativo)\n// Arricchito con 'tipo' e 'centroDiCostoSuggeritoId' per i nostri automatismi.\n// I dati sono presi come spunto dallo screenshot e dal file del cliente.\n// ====================================================================\nexport const pianoDeiConti: Conto[] = [\n  // --- COSTI ---\n  // Acquisti\n  { id: '60100001', codice: '60100001', nome: 'MERCE C/ACQUISTI', tipo: 'Costo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '12', vociAnaliticheAbilitateIds: ['12'] },\n  { id: '6005000150', codice: '6005000150', nome: 'ACQUISTI MATERIALE DI CONSUMO', tipo: 'Costo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '12', vociAnaliticheAbilitateIds: ['4', '7', '12'] },\n  { id: '60100002', codice: '60100002', nome: 'ACQUISTI PRESTAZIONI DI SERVIZI', tipo: 'Costo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '5', vociAnaliticheAbilitateIds: ['5', '6', '11', '13', '14'] },\n  { id: '6005000350', codice: '6005000350', nome: 'ACQUISTO FIORI E PIANTE', tipo: 'Costo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '15', vociAnaliticheAbilitateIds: ['15'] },\n\n  // Costi del personale\n  { id: '6310000500', codice: '6310000500', nome: 'SALARI E STIPENDI', tipo: 'Costo', voceAnaliticaSuggeritaId: '1', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['1'] },\n  { id: '6340000650', codice: '6340000650', nome: 'BUONI PASTO', tipo: 'Costo', voceAnaliticaSuggeritaId: '1', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['1'] },\n\n  // Costi per servizi\n  { id: '6005000850', codice: '6005000850', nome: 'CARBURANTI E LUBRIFICANTI', tipo: 'Costo', voceAnaliticaSuggeritaId: '2', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['2', '8'], contropartiteSuggeriteIds: ['FOR001', '45.01.001'] },\n  { id: '6015000800', codice: '6015000800', nome: 'MANUTENZIONI E RIPARAZIONI AUTOMEZZI', tipo: 'Costo', voceAnaliticaSuggeritaId: '2', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['2', '8'], contropartiteSuggeriteIds: ['FOR999', '45.01.001'] },\n  { id: '6015001800', codice: '6015001800', nome: 'ASSICURAZIONI OBBLIGATORIE AUTOMEZZI', tipo: 'Costo', voceAnaliticaSuggeritaId: '2', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['2', '8'], contropartiteSuggeriteIds: ['FOR002', '45.01.001'] },\n  { id: '6015000750', codice: '6015000750', nome: 'MANUTENZIONI E RIPARAZIONI ATTREZZATURE', tipo: 'Costo', voceAnaliticaSuggeritaId: '3', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['3', '9'] },\n  { id: '6008001114', codice: '6008001114', nome: 'SACCHI E BIDONI', tipo: 'Costo', voceAnaliticaSuggeritaId: '4', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['4'] },\n  { id: '6015010103', codice: '6015010103', nome: 'SELEZIONE/TRATTAMENTO RIF.INGOMBRANTI', tipo: 'Costo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '13', vociAnaliticheAbilitateIds: ['13'] },\n  { id: '6015010104', codice: '6015010104', nome: 'CONFERIMENTO RIFIUTI ORGANICI', tipo: 'Costo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '14', vociAnaliticheAbilitateIds: ['14'] },\n  \n  // Costi diversi\n  { id: '60100013', codice: '60100013', nome: 'ANTIVIRUS E SOFTWARE', tipo: 'Costo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '12', vociAnaliticheAbilitateIds: ['12'] },\n  { id: '6020000250', codice: '6020000250', nome: 'AFFITTI UFFICI', tipo: 'Costo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '10', vociAnaliticheAbilitateIds: ['10'] },\n  { id: '7820000880', codice: '7820000880', nome: 'TARI (TASSA RIFIUTI)', tipo: 'Costo', richiedeVoceAnalitica: false },\n  \n  // --- RICAVI ---\n  { id: '5510001122', codice: '5510001122', nome: 'RICAVI DA CONVENZIONE', tipo: 'Ricavo', richiedeVoceAnalitica: false, contropartiteSuggeriteIds: ['CLI001', 'CLI002', 'CLI003', '45.02.001'] },\n  { id: '5510001121', codice: '5510001121', nome: 'RICAVI DA RACCOLTA DIFFERENZIATA', tipo: 'Ricavo', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['13', '14'] },\n  { id: '50100002', codice: '50100002', nome: 'RICAVI PRESTAZIONI DI SERVIZI', tipo: 'Ricavo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '5', vociAnaliticheAbilitateIds: ['5', '6', '11'] },\n  { id: '5510001132', codice: '5510001132', nome: 'RICAVI DA MANUT. VERDE PUBBLICO', tipo: 'Ricavo', richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '15', vociAnaliticheAbilitateIds: ['15'] },\n  { id: '5560000950', codice: '5560000950', nome: 'RISARCIMENTI ASSICURATIVI', tipo: 'Ricavo', richiedeVoceAnalitica: false },\n  \n  // --- CONTI PATRIMONIALI E FINANZIARI ---\n  { id: '45.01.001', codice: '45.01.001', nome: 'IVA NS/CREDITO', tipo: 'Patrimoniale' },\n  { id: '45.02.001', codice: '45.02.001', nome: 'IVA NS/DEBITO', tipo: 'Patrimoniale' },\n  { id: '10.01.001', codice: '10.01.001', nome: 'BANCA INTESA SANPAOLO', tipo: 'Patrimoniale' },\n  { id: '1010001', codice: '1010001', nome: 'CASSA CONTANTI', tipo: 'Patrimoniale' },\n\n  // Clienti\n  { id: 'CLI001', codice: 'CLI001', nome: 'COMUNE DI SORRENTO', tipo: 'Cliente' },\n  { id: 'CLI002', codice: 'CLI002', nome: 'COMUNE DI VICO EQUENSE', tipo: 'Cliente' },\n  { id: 'CLI003', codice: 'CLI003', nome: 'COMUNE DI PIANO DI SORRENTO', tipo: 'Cliente' },\n  { id: 'CLI999', codice: 'CLI999', nome: 'CLIENTE GENERICO SPA', tipo: 'Cliente' },\n\n  // Fornitori\n  { id: 'FOR001', codice: '4010001', nome: 'ROSSI CARBURANTI SRL', tipo: 'Fornitore' },\n  { id: 'FOR002', codice: '4010002', nome: 'ASSICURAZIONI GENERALI SPA', tipo: 'Fornitore' },\n  { id: 'FOR003', codice: '4010003', nome: 'SOFTWARE SICURO SRL', tipo: 'Fornitore' },\n  { id: 'FOR999', codice: '4019999', nome: 'FORNITORE GENERICO SPA', tipo: 'Fornitore' },\n  { id: '10.01.001', codice: '10.01.001', nome: 'BANCA INTESA SANPAOLO', tipo: 'Patrimoniale' },\n  { id: '4010000001', codice: '4010000001', nome: 'Fornitore ENI', tipo: 'Fornitore' },\n  { id: '4010000002', codice: '4010000002', nome: 'Cliente ACME S.p.A.', tipo: 'Cliente' },\n  { id: '45.01.001', codice: '45.01.001', nome: 'IVA SU ACQUISTI', tipo: 'Patrimoniale' },\n  { id: '45.02.001', codice: '45.02.001', nome: 'IVA SU VENDITE', tipo: 'Patrimoniale' },\n  { id: '6005000850', codice: '6005000850', nome: 'CARBURANTI E LUBRIFICANTI', tipo: 'Costo', voceAnaliticaSuggeritaId: '2', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['2', '8'] },\n  { id: '60100002', codice: '60100002', nome: 'ACQUISTI PRESTAZIONI DI SERVIZI', tipo: 'Costo', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['5', '6', '11', '13', '14'] },\n  { id: '7001000001', codice: '7001000001', nome: 'RICAVI PER SERVIZI', tipo: 'Ricavo', richiedeVoceAnalitica: true, vociAnaliticheAbilitateIds: ['5', '6', '11'] },\n];\n\n\n// ====================================================================\n// 3. COMMESSE (con budget mockato dal foglio \"Sorrento\")\n// ====================================================================\nexport const commesse: Commessa[] = [\n    {\n        id: 'SORRENTO_2025',\n        nome: 'Comune di Sorrento (2025)',\n        clienteId: 'CLI001',\n        cliente: { id: 'CLI001', nome: 'COMUNE DI SORRENTO' },\n        budget: [\n            { voceAnaliticaId: '1', importo: 2274867 },\n            { voceAnaliticaId: '2', importo: 358625 },\n            { voceAnaliticaId: '3', importo: 17000 },\n            { voceAnaliticaId: '4', importo: 90000 },\n            { voceAnaliticaId: '5', importo: 32880 },\n            { voceAnaliticaId: '6', importo: 184875 },\n            { voceAnaliticaId: '7', importo: 80000 },\n            { voceAnaliticaId: '8', importo: 222552 },\n            { voceAnaliticaId: '9', importo: 71855 },\n            { voceAnaliticaId: '10', importo: 83759 },\n            { voceAnaliticaId: '11', importo: 220244 },\n            { voceAnaliticaId: '12', importo: 307000 + 276056 + 30000 - 218370 },\n            { voceAnaliticaId: '13', importo: 279900 },\n            { voceAnaliticaId: '15', importo: 50000 },\n        ]\n    },\n    {\n        id: 'PIANO_SORR_2025',\n        nome: 'Comune di Piano di Sorrento (2025)',\n        clienteId: 'CLI003',\n        cliente: { id: 'CLI003', nome: 'COMUNE DI PIANO DI SORRENTO' },\n        budget: [\n            { voceAnaliticaId: '1', importo: 1000000 },\n            { voceAnaliticaId: '2', importo: 150000 },\n            { voceAnaliticaId: '4', importo: 50000 },\n        ]\n    },\n    {\n        id: 'MASSA_LUB_2025',\n        nome: 'Comune di Massa Lubrense (2025)',\n        clienteId: 'CLI999',\n        cliente: { id: 'CLI999', nome: 'CLIENTE GENERICO SPA' },\n        budget: [\n            { voceAnaliticaId: '1', importo: 1800000 },\n            { voceAnaliticaId: '2', importo: 250000 },\n            { voceAnaliticaId: '8', importo: 100000 },\n        ]\n    },\n    { id: 'SORRENTO', nome: 'Comune di Sorrento', clienteId: 'CLI001', cliente: { id: 'CLI001', nome: 'COMUNE DI SORRENTO' }, budget: [ { voceAnaliticaId: '1', importo: 10000 }, { voceAnaliticaId: '2', importo: 5000 } ] },\n    { id: 'NAPOLI', nome: 'Comune di Napoli', clienteId: 'CLI002', cliente: { id: 'CLI002', nome: 'COMUNE DI VICO EQUENSE' }, budget: [ { voceAnaliticaId: '1', importo: 20000 }, { voceAnaliticaId: '10', importo: 8000 } ] },\n];\n\n// ====================================================================\n// 4. CAUSALI CONTABILI (con i loro template)\n// RIMOSSO - Ora gestito direttamente in prisma/seed.ts per maggiore robustezza\n// ====================================================================\n\n\n// =================================================================================\n// 5. REGISTRAZIONI CONTABILI (PRIMA NOTA)\n// =================================================================================\nexport const scrittureContabili: ScritturaContabile[] = [\n  {\n    id: 'reg-1716135384238',\n    data: '2024-05-19',\n    causaleId: 'FATT_VEND_PRODOTTI',\n    descrizione: 'Fattura n.1 del 19/05/2024',\n    righe: [\n      {\n        id: 'riga-1716135384238',\n        contoId: 'CLI001',\n        descrizione: 'COMUNE DI SORRENTO',\n        dare: 3000,\n        avere: 0,\n        allocazioni: []\n      },\n      {\n        id: 'riga-1716135394238',\n        contoId: '45.02.001',\n        descrizione: 'IVA NS/DEBITO',\n        dare: 0,\n        avere: 660,\n        allocazioni: []\n      },\n      {\n        id: 'riga-1716135404238',\n        contoId: '5510001122',\n        descrizione: 'RICAVI DA CONVENZIONE',\n        dare: 0,\n        avere: 2340,\n        allocazioni: []\n      }\n    ],\n    datiAggiuntivi: {\n      clienteId: 'CLI001',\n      totaleFattura: 3000,\n      aliquotaIva: 22\n    }\n  }\n];\n\n// Altri dati mock (Causali, Scritture) verranno aggiunti in seguito.\n\nexport {}; "
        }
      ]
    },
    {
      "name": "hooks",
      "type": "directory",
      "children": [
        {
          "name": "use-mobile.tsx",
          "type": "file",
          "token_estimate": 142,
          "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n"
        },
        {
          "name": "use-toast.ts",
          "type": "file",
          "token_estimate": 974,
          "content": "import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
        }
      ]
    },
    {
      "name": "index.css",
      "type": "file",
      "token_estimate": 583,
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. */\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n\n    --sidebar-background: 0 0% 98%;\n\n    --sidebar-foreground: 240 5.3% 26.1%;\n\n    --sidebar-primary: 240 5.9% 10%;\n\n    --sidebar-primary-foreground: 0 0% 98%;\n\n    --sidebar-accent: 240 4.8% 95.9%;\n\n    --sidebar-accent-foreground: 240 5.9% 10%;\n\n    --sidebar-border: 220 13% 91%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
    },
    {
      "name": "lib",
      "type": "directory",
      "children": [
        {
          "name": "utils.ts",
          "type": "file",
          "token_estimate": 42,
          "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
        }
      ]
    },
    {
      "name": "main.tsx",
      "type": "file",
      "token_estimate": 40,
      "content": "import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n"
    },
    {
      "name": "pages",
      "type": "directory",
      "children": [
        {
          "name": "CommessaDettaglio.tsx",
          "type": "file",
          "token_estimate": 1902,
          "content": "import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { ArrowLeft, Edit, Trash2, FileText, Landmark, DollarSign, Calculator } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Commessa, VoceAnalitica, ScritturaContabile } from '@/types';\nimport { getCommesse, getVociAnalitiche } from '@/api';\nimport { getRegistrazioni } from '@/api/registrazioni';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\n\nconst CommessaDettaglio = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  \n  const [commessa, setCommessa] = useState<Commessa | null>(null);\n  const [vociAnalitiche, setVociAnalitiche] = useState<VoceAnalitica[]>([]);\n  const [registrazioni, setRegistrazioni] = useState<ScritturaContabile[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async () => {\n      if (!id) return;\n      try {\n        setIsLoading(true);\n        const [commesseData, vociAnaliticheData, registrazioniData] = await Promise.all([\n          getCommesse(),\n          getVociAnalitiche(),\n          getRegistrazioni()\n        ]);\n        const currentCommessa = commesseData.find(c => c.id === id);\n        setCommessa(currentCommessa || null);\n        setVociAnalitiche(vociAnaliticheData);\n        setRegistrazioni(registrazioniData);\n      } catch (error) {\n        console.error(\"Errore nel caricamento dei dati di dettaglio:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadData();\n  }, [id]);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('it-IT', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(value);\n  };\n  \n  const getNomeVoceAnalitica = (id: string) => {\n    return vociAnalitiche.find(c => c.id === id)?.nome || 'N/D';\n  }\n\n  if (isLoading) {\n    return <div className=\"flex justify-center items-center h-64\"><p>Caricamento dettagli commessa...</p></div>;\n  }\n\n  if (!commessa) {\n    return <div className=\"text-center py-12\"><p>Commessa non trovata.</p></div>;\n  }\n\n  const totalBudget = Object.values(commessa.budget).reduce((sum, value) => sum + value, 0);\n  \n  const movimentiAllocati = registrazioni\n    .flatMap(r => \n      r.righe.map(riga => ({ ...riga, dataRegistrazione: r.data, descrizioneRegistrazione: r.descrizione, idRegistrazione: r.id }))\n    )\n    .filter(riga => \n      riga.allocazioni && riga.allocazioni.some(a => a.commessaId === commessa.id)\n    );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={() => navigate('/commesse')}\n            className=\"border-slate-200\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Torna alle Commesse\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900\">{commessa.nome}</h1>\n            <p className=\"text-slate-600 mt-1\">Commessa #{commessa.id}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Info Card */}\n      <div className=\"bg-white rounded-xl border border-slate-200 p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div>\n            <h3 className=\"text-sm font-medium text-slate-600 mb-2\">Descrizione</h3>\n            <p className=\"text-slate-700 text-sm\">{commessa.descrizione || 'Nessuna descrizione.'}</p>\n          </div>\n          <div>\n            <h3 className=\"text-sm font-medium text-slate-600 mb-2\">Budget Totale</h3>\n            <p className=\"text-2xl font-bold text-slate-900\">{formatCurrency(totalBudget)}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Dettaglio Budget */}\n      <div className=\"bg-white rounded-xl border border-slate-200\">\n        <div className=\"p-6 border-b border-slate-200\">\n          <h3 className=\"text-lg font-semibold text-slate-900\">Dettaglio Budget per Voce Analitica</h3>\n          <p className=\"text-sm text-slate-500 mt-1\">\n            Suddivisione del budget allocato alle diverse voci analitiche per questa commessa.\n          </p>\n        </div>\n        <div className=\"divide-y divide-slate-200\">\n          {Object.entries(commessa.budget).map(([voceAnaliticaId, importo]) => (\n            <div key={voceAnaliticaId} className=\"flex items-center justify-between p-4 hover:bg-slate-50\">\n              <div className=\"flex items-center gap-3\">\n                <Landmark className=\"w-5 h-5 text-slate-400\" />\n                <span className=\"font-medium text-slate-800\">{getNomeVoceAnalitica(voceAnaliticaId)}</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                 <DollarSign className=\"w-5 h-5 text-green-500\" />\n                <span className=\"font-semibold text-slate-900 text-lg\">{formatCurrency(importo)}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Movimenti Allocati */}\n      <div className=\"bg-white rounded-xl border border-slate-200 mt-6\">\n        <div className=\"p-6 border-b border-slate-200\">\n          <h3 className=\"text-lg font-semibold text-slate-900\">Movimenti Allocati</h3>\n          <p className=\"text-sm text-slate-500 mt-1\">\n            Dettaglio dei costi e ricavi imputati a questa commessa.\n          </p>\n        </div>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Data</TableHead>\n              <TableHead>Conto</TableHead>\n              <TableHead>Descrizione Registrazione</TableHead>\n              <TableHead className=\"text-right\">Importo Allocato</TableHead>\n              <TableHead className=\"text-center\">Rif. Registrazione</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {movimentiAllocati.length > 0 ? (\n              movimentiAllocati.map(riga => {\n                const importoAllocato = (riga.dare || 0) > 0 ? riga.dare : riga.avere;\n                // Trova il conto corretto dal piano dei conti\n                const contoAssociato = vociAnalitiche.find(c => c.id === riga.contoId);\n\n                return (\n                  <TableRow key={riga.id}>\n                    <TableCell>{new Date(riga.dataRegistrazione).toLocaleDateString()}</TableCell>\n                    <TableCell>\n                      {contoAssociato ? <Badge variant=\"outline\">{contoAssociato.nome}</Badge> : 'N/D'}\n                    </TableCell>\n                    <TableCell>{riga.descrizioneRegistrazione}</TableCell>\n                    <TableCell className=\"text-right font-medium\">{formatCurrency(importoAllocato || 0)}</TableCell>\n                    <TableCell className=\"text-center\">\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate(`/prima-nota/registrazione/${riga.idRegistrazione}`)}>\n                        #{riga.idRegistrazione}\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })\n            ) : (\n              <TableRow>\n                <TableCell colSpan={5} className=\"text-center text-slate-500 py-8\">\n                  Nessun movimento allocato a questa commessa.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n};\n\nexport default CommessaDettaglio;\n"
        },
        {
          "name": "Commesse.tsx",
          "type": "file",
          "token_estimate": 893,
          "content": "import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Eye } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Commessa } from '@/types';\nimport { getCommesse } from '@/api';\n\nconst Commesse: React.FC = () => {\n  const [commesse, setCommesse] = useState<Commessa[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loadCommesse = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getCommesse();\n        setCommesse(data);\n      } catch (error) {\n        console.error(\"Errore nel caricamento delle commesse:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadCommesse();\n  }, []);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('it-IT', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount);\n  };\n\n  const calculateTotalBudget = (budget: { [key: string]: number }) => {\n    return Object.values(budget).reduce((sum, value) => sum + value, 0);\n  };\n\n  const handleViewDetails = (id: string) => {\n    navigate(`/commesse/${id}`);\n  };\n\n  if (isLoading) {\n    return (\n        <div className=\"flex justify-center items-center h-64\">\n            <p>Caricamento dati commesse...</p>\n        </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900\">Elenco Commesse</h1>\n          <p className=\"text-slate-600 mt-1\">Visualizza le commesse attive e il loro budget.</p>\n        </div>\n      </div>\n\n      {/* Tabella Commesse */}\n      <div className=\"bg-white rounded-lg border border-slate-200 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-slate-50 border-b border-slate-200\">\n              <tr>\n                <th className=\"text-left py-4 px-6 font-medium text-slate-700 text-sm\">Nome Commessa</th>\n                <th className=\"text-right py-4 px-6 font-medium text-slate-700 text-sm\">Budget Totale</th>\n                <th className=\"text-center py-4 px-6 font-medium text-slate-700 text-sm\">Azioni</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-slate-200\">\n              {commesse.map((commessa) => (\n                <tr key={commessa.id} className=\"hover:bg-slate-50 transition-colors\">\n                  <td className=\"py-4 px-6\">\n                    <div className=\"font-medium text-slate-900\">{commessa.nome}</div>\n                    <div className=\"text-sm text-slate-500\">{commessa.id}</div>\n                  </td>\n                  <td className=\"py-4 px-6 text-right\">\n                    <div className=\"font-medium text-slate-900\">\n                      {formatCurrency(calculateTotalBudget(commessa.budget))}\n                    </div>\n                  </td>\n                  <td className=\"py-4 px-6 text-center\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleViewDetails(commessa.id)}\n                    >\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Dettagli\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Commesse;\n"
        },
        {
          "name": "Dashboard.tsx",
          "type": "file",
          "token_estimate": 1732,
          "content": "import React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { getDashboardData } from '@/api/dashboard';\nimport { CommessaDashboard, DashboardData } from '@/types';\nimport { DollarSign, TrendingUp, TrendingDown, Layers, AlertCircle } from 'lucide-react';\n\nconst formatCurrency = (value: number) => {\n  return new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(value);\n};\n\nconst formatPercent = (value: number) => {\n  return new Intl.NumberFormat('it-IT', { style: 'percent', minimumFractionDigits: 2 }).format(value);\n};\n\nconst Dashboard: React.FC = () => {\n  const [data, setData] = useState<DashboardData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const dashboardData = await getDashboardData();\n        setData(dashboardData);\n      } catch (err: any) {\n        console.error(\"Errore nel caricamento dei dati della dashboard:\", err);\n        setError(err.message || 'Si è verificato un errore imprevisto.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <DashboardSkeleton />;\n  }\n\n  if (error) {\n    return <ErrorDisplay message={error} />;\n  }\n\n  if (!data) {\n    return <div className=\"text-center text-slate-500\">Nessun dato da visualizzare.</div>;\n  }\n\n  const { kpi, commesse } = data;\n\n  return (\n    <div className=\"space-y-6\">\n      <Header />\n      <KpiSummary \n        commesseAttive={kpi.commesseAttive}\n        ricaviTotali={kpi.ricaviTotali}\n        costiTotali={kpi.costiTotali}\n        margineLordoMedio={kpi.margineLordoMedio}\n      />\n      <CommesseTable commesse={commesse} />\n    </div>\n  );\n};\n\nconst ErrorDisplay = ({ message }: { message: string }) => (\n    <div className=\"flex flex-col items-center justify-center h-64 bg-red-50 border border-red-200 rounded-lg\">\n        <AlertCircle className=\"w-12 h-12 text-red-500\" />\n        <h2 className=\"mt-4 text-xl font-semibold text-red-700\">Errore di Caricamento</h2>\n        <p className=\"mt-2 text-slate-600\">Impossibile caricare i dati della dashboard.</p>\n        <p className=\"mt-1 text-sm text-slate-500\">Dettagli: {message}</p>\n    </div>\n);\n\nconst Header = () => (\n  <div>\n    <h1 className=\"text-3xl font-bold text-slate-900\">Dashboard Commesse</h1>\n    <p className=\"text-slate-600 mt-1\">\n      Panoramica operativa e analisi di redditività delle commesse.\n    </p>\n  </div>\n);\n\nconst KpiSummary = ({ commesseAttive, ricaviTotali, costiTotali, margineLordoMedio }: DashboardData['kpi']) => (\n  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Commesse Attive</CardTitle>\n        <Layers className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{commesseAttive}</div>\n        <p className=\"text-xs text-muted-foreground\">Numero di commesse in gestione.</p>\n      </CardContent>\n    </Card>\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Ricavi Totali</CardTitle>\n        <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{formatCurrency(ricaviTotali)}</div>\n        <p className=\"text-xs text-muted-foreground\">Ricavi totali generati.</p>\n      </CardContent>\n    </Card>\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Costi Totali</CardTitle>\n        <TrendingDown className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{formatCurrency(costiTotali)}</div>\n        <p className=\"text-xs text-muted-foreground\">Costi totali sostenuti.</p>\n      </CardContent>\n    </Card>\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Margine Lordo Medio</CardTitle>\n        <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{formatPercent(margineLordoMedio / 100)}</div>\n        <p className=\"text-xs text-muted-foreground\">Margine medio di profitto.</p>\n      </CardContent>\n    </Card>\n  </div>\n);\n\nconst CommesseTable = ({ commesse }: { commesse: CommessaDashboard[] }) => (\n  <Card>\n    <CardHeader>\n      <CardTitle>Elenco Commesse</CardTitle>\n    </CardHeader>\n    <CardContent>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Commessa</TableHead>\n            <TableHead>Cliente</TableHead>\n            <TableHead>Stato</TableHead>\n            <TableHead className=\"text-right\">Ricavi</TableHead>\n            <TableHead className=\"text-right\">Costi</TableHead>\n            <TableHead className=\"text-right\">Margine</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {commesse.map(commessa => (\n            <TableRow key={commessa.id}>\n              <TableCell className=\"font-medium\">{commessa.nome}</TableCell>\n              <TableCell>{commessa.cliente.nome}</TableCell>\n              <TableCell>{commessa.stato}</TableCell>\n              <TableCell className=\"text-right\">{formatCurrency(commessa.ricavi)}</TableCell>\n              <TableCell className=\"text-right\">{formatCurrency(commessa.costi)}</TableCell>\n              <TableCell className=\"text-right font-medium\">{formatPercent(commessa.margine)}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </CardContent>\n  </Card>\n);\n\nconst DashboardSkeleton = () => (\n  <div className=\"space-y-6\">\n    <div>\n      <Skeleton className=\"h-9 w-3/4\" />\n      <Skeleton className=\"h-5 w-1/2 mt-2\" />\n    </div>\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <Skeleton className=\"h-28\" />\n      <Skeleton className=\"h-28\" />\n      <Skeleton className=\"h-28\" />\n      <Skeleton className=\"h-28\" />\n    </div>\n    <Card>\n      <CardHeader><Skeleton className=\"h-6 w-1/3\" /></CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Skeleton className=\"h-10 w-full\" />\n        <Skeleton className=\"h-10 w-full\" />\n        <Skeleton className=\"h-10 w-full\" />\n      </CardContent>\n    </Card>\n  </div>\n);\n\nexport default Dashboard;\n"
        },
        {
          "name": "Database.tsx",
          "type": "file",
          "token_estimate": 16862,
          "content": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Database as DatabaseIcon, RefreshCw, Edit, Trash2, Users, Building, FileText, Landmark, Library } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { toast } from \"sonner\";\nimport { deleteRegistrazione } from '@/api/registrazioni';\nimport { useNavigate } from 'react-router-dom';\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from \"@/components/ui/resizable\";\nimport { ScritturaContabile, Commessa, Cliente, Fornitore, Conto, VoceAnalitica, RigaScrittura, CausaleContabile } from '@/types';\nimport { CodiceIva } from '@/api/codiciIva';\nimport { CondizionePagamento } from '@/api/condizioniPagamento';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { createCliente, updateCliente, deleteCliente } from '@/api/clienti';\nimport { createFornitore, updateFornitore, deleteFornitore } from '@/api/fornitori';\nimport { createVoceAnalitica, deleteVoceAnalitica, updateVoceAnalitica } from '@/api/vociAnalitiche';\nimport { createConto, deleteConto, updateConto } from '@/api/conti';\nimport { createCommessa, deleteCommessa, updateCommessa } from '@/api/commesse';\nimport { createCausale, deleteCausale, updateCausale } from '@/api/causali';\nimport { createCodiceIva, deleteCodiceIva, updateCodiceIva } from '@/api/codiciIva';\nimport { createCondizionePagamento, deleteCondizionePagamento, updateCondizionePagamento } from '@/api/condizioniPagamento';\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { TipoConto } from '@prisma/client';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport ImportTemplatesAdmin from '@/components/admin/ImportTemplatesAdmin';\nimport { clearScrittureContabili } from '@/api/database';\n\n// Definiamo un'interfaccia aggregata per i dati del database\ninterface DatabaseData {\n  scritture: ScritturaContabile[];\n  commesse: Commessa[];\n  clienti: Cliente[];\n  fornitori: Fornitore[];\n  conti: Conto[];\n  vociAnalitiche: VoceAnalitica[];\n  causali: CausaleContabile[];\n  codiciIva: CodiceIva[];\n  condizioniPagamento: CondizionePagamento[];\n  stats: {\n    totaleScrittureContabili: number;\n    totaleCommesse: number;\n    totaleClienti: number;\n    totaleFornitori: number;\n    totaleConti: number;\n    totaleVociAnalitiche: number;\n    totaleCausali: number;\n    totaleCodiciIva: number;\n    totaleCondizioniPagamento: number;\n  };\n}\n\ntype TableKey = 'scritture' | 'commesse' | 'clienti' | 'fornitori' | 'conti' | 'vociAnalitiche' | 'causali' | 'codiciIva' | 'condizioniPagamento';\n\nconst tableConfig: { key: TableKey; label: string; icon: React.ElementType }[] = [\n    { key: 'scritture', label: 'Scritture', icon: FileText },\n    { key: 'commesse', label: 'Commesse', icon: Building },\n    { key: 'clienti', label: 'Clienti', icon: Users },\n    { key: 'fornitori', label: 'Fornitori', icon: Landmark },\n    { key: 'conti', label: 'Piano dei Conti', icon: Library },\n    { key: 'vociAnalitiche', label: 'Voci Analitiche', icon: Landmark },\n    { key: 'causali', label: 'Causali', icon: FileText },\n    { key: 'codiciIva', label: 'Codici IVA', icon: Library },\n    { key: 'condizioniPagamento', label: 'Condizioni Pagamento', icon: Library },\n];\n\nconst PlaceholderTable = ({ title }: { title: string }) => (\n    <Card>\n        <CardHeader>\n            <CardTitle>{title}</CardTitle>\n        </CardHeader>\n        <CardContent>\n            <p>Gestione CRUD per questa tabella in fase di implementazione.</p>\n        </CardContent>\n    </Card>\n);\n\nconst baseSchema = z.object({\n  nome: z.string().min(2, { message: \"Il nome deve essere di almeno 2 caratteri.\" }),\n  externalId: z.string().optional(),\n});\n\nconst ClientiTable = ({ data, onDataChange }: { data: Cliente[], onDataChange: () => void }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCliente, setEditingCliente] = useState<Cliente | null>(null);\n  const [deletingCliente, setDeletingCliente] = useState<Cliente | null>(null);\n\n  const form = useForm<z.infer<typeof baseSchema>>({\n    resolver: zodResolver(baseSchema),\n    defaultValues: { nome: \"\", externalId: \"\" },\n  });\n\n  const handleOpenDialog = (cliente: Cliente | null = null) => {\n    setEditingCliente(cliente);\n    if (cliente) {\n      form.reset({ nome: cliente.nome, externalId: cliente.externalId || \"\" });\n    } else {\n      form.reset({ nome: \"\", externalId: \"\" });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = async (values: z.infer<typeof baseSchema>) => {\n    try {\n      if (editingCliente) {\n        await updateCliente(editingCliente.id, values);\n        toast.success(\"Cliente aggiornato con successo.\");\n      } else {\n        await createCliente(values as { nome: string; externalId?: string });\n        toast.success(\"Cliente creato con successo.\");\n      }\n      onDataChange();\n      setIsDialogOpen(false);\n    } catch (error) {\n      toast.error((error as Error).message);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deletingCliente) return;\n    try {\n        await deleteCliente(deletingCliente.id);\n        toast.success(\"Cliente eliminato con successo.\");\n        onDataChange();\n    } catch(error) {\n        toast.error((error as Error).message);\n    } finally {\n        setDeletingCliente(null);\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Clienti</CardTitle>\n          <Button onClick={() => handleOpenDialog()}>Aggiungi Cliente</Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Nome</TableHead>\n                <TableHead>ID Esterno</TableHead>\n                <TableHead className=\"text-right\">Azioni</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((cliente) => (\n                <TableRow key={cliente.id}>\n                  <TableCell>{cliente.nome}</TableCell>\n                  <TableCell>{cliente.externalId || 'N/A'}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => handleOpenDialog(cliente)}><Edit className=\"h-4 w-4\" /></Button>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-red-500 hover:text-red-600\" onClick={() => setDeletingCliente(cliente)}><Trash2 className=\"h-4 w-4\" /></Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent>\n              <DialogHeader>\n                  <DialogTitle>{editingCliente ? 'Modifica Cliente' : 'Nuovo Cliente'}</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                          control={form.control}\n                          name=\"nome\"\n                          render={({ field }) => (\n                              <FormItem>\n                                  <FormLabel>Nome</FormLabel>\n                                  <FormControl>\n                                      <Input placeholder=\"Nome Cliente\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                              </FormItem>\n                          )}\n                      />\n                      <FormField\n                          control={form.control}\n                          name=\"externalId\"\n                          render={({ field }) => (\n                              <FormItem>\n                                  <FormLabel>ID Esterno (opzionale)</FormLabel>\n                                  <FormControl>\n                                      <Input placeholder=\"ID del sistema esterno\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                              </FormItem>\n                          )}\n                      />\n                      <DialogFooter>\n                          <Button type=\"submit\">Salva</Button>\n                      </DialogFooter>\n                  </form>\n              </Form>\n          </DialogContent>\n      </Dialog>\n      \n      <AlertDialog open={!!deletingCliente} onOpenChange={() => setDeletingCliente(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Vuoi davvero eliminare il cliente \"{deletingCliente?.nome}\"? Questa azione non può essere annullata.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n\nconst FornitoriTable = ({ data, onDataChange }: { data: Fornitore[], onDataChange: () => void }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingFornitore, setEditingFornitore] = useState<Fornitore | null>(null);\n  const [deletingFornitore, setDeletingFornitore] = useState<Fornitore | null>(null);\n\n  const form = useForm<z.infer<typeof baseSchema>>({\n    resolver: zodResolver(baseSchema),\n    defaultValues: { nome: \"\", externalId: \"\" },\n  });\n\n  const handleOpenDialog = (fornitore: Fornitore | null = null) => {\n    setEditingFornitore(fornitore);\n    if (fornitore) {\n      form.reset({ nome: fornitore.nome, externalId: fornitore.externalId || \"\" });\n    } else {\n      form.reset({ nome: \"\", externalId: \"\" });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = async (values: z.infer<typeof baseSchema>) => {\n    try {\n      if (editingFornitore) {\n        await updateFornitore(editingFornitore.id, values);\n        toast.success(\"Fornitore aggiornato con successo.\");\n      } else {\n        await createFornitore(values as { nome: string; externalId?: string });\n        toast.success(\"Fornitore creato con successo.\");\n      }\n      onDataChange();\n      setIsDialogOpen(false);\n    } catch (error) {\n      toast.error((error as Error).message);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deletingFornitore) return;\n    try {\n        await deleteFornitore(deletingFornitore.id);\n        toast.success(\"Fornitore eliminato con successo.\");\n        onDataChange();\n    } catch(error) {\n        toast.error((error as Error).message);\n    } finally {\n        setDeletingFornitore(null);\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Fornitori</CardTitle>\n          <Button onClick={() => handleOpenDialog()}>Aggiungi Fornitore</Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Nome</TableHead>\n                <TableHead>ID Esterno</TableHead>\n                <TableHead className=\"text-right\">Azioni</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((fornitore) => (\n                <TableRow key={fornitore.id}>\n                  <TableCell>{fornitore.nome}</TableCell>\n                  <TableCell>{fornitore.externalId || 'N/A'}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => handleOpenDialog(fornitore)}><Edit className=\"h-4 w-4\" /></Button>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-red-500 hover:text-red-600\" onClick={() => setDeletingFornitore(fornitore)}><Trash2 className=\"h-4 w-4\" /></Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent>\n              <DialogHeader>\n                  <DialogTitle>{editingFornitore ? 'Modifica Fornitore' : 'Nuovo Fornitore'}</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                          control={form.control}\n                          name=\"nome\"\n                          render={({ field }) => (\n                              <FormItem>\n                                  <FormLabel>Nome</FormLabel>\n                                  <FormControl>\n                                      <Input placeholder=\"Nome Fornitore\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                              </FormItem>\n                          )}\n                      />\n                      <FormField\n                          control={form.control}\n                          name=\"externalId\"\n                          render={({ field }) => (\n                              <FormItem>\n                                  <FormLabel>ID Esterno (opzionale)</FormLabel>\n                                  <FormControl>\n                                      <Input placeholder=\"ID del sistema esterno\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                              </FormItem>\n                          )}\n                      />\n                      <DialogFooter>\n                          <Button type=\"submit\">Salva</Button>\n                      </DialogFooter>\n                  </form>\n              </Form>\n          </DialogContent>\n      </Dialog>\n      \n      <AlertDialog open={!!deletingFornitore} onOpenChange={() => setDeletingFornitore(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Vuoi davvero eliminare il fornitore \"{deletingFornitore?.nome}\"? Questa azione non può essere annullata.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n\nconst VociAnaliticheTable = ({ data, onDataChange }: { data: VoceAnalitica[], onDataChange: () => void }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingVoce, setEditingVoce] = useState<VoceAnalitica | null>(null);\n  const [deletingVoce, setDeletingVoce] = useState<VoceAnalitica | null>(null);\n\n  const voceSchema = z.object({\n    id: z.string().min(1, { message: \"L'ID è obbligatorio.\" }),\n    nome: z.string().min(2, { message: \"Il nome deve essere di almeno 2 caratteri.\" }),\n    descrizione: z.string().optional(),\n    externalId: z.string().optional(),\n  });\n\n  const form = useForm<z.infer<typeof voceSchema>>({\n    resolver: zodResolver(voceSchema),\n    defaultValues: { id: \"\", nome: \"\", descrizione: \"\", externalId: \"\" },\n  });\n\n  const handleOpenDialog = (voce: VoceAnalitica | null = null) => {\n    setEditingVoce(voce);\n    if (voce) {\n      form.reset(voce);\n    } else {\n      form.reset({ id: \"\", nome: \"\", descrizione: \"\", externalId: \"\" });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = async (values: z.infer<typeof voceSchema>) => {\n    try {\n      if (editingVoce) {\n        await updateVoceAnalitica(editingVoce.id, values);\n        toast.success(\"Voce analitica aggiornata con successo.\");\n      } else {\n        await createVoceAnalitica(values as VoceAnalitica);\n        toast.success(\"Voce analitica creata con successo.\");\n      }\n      onDataChange();\n      setIsDialogOpen(false);\n    } catch (error) {\n      toast.error((error as Error).message);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deletingVoce) return;\n    try {\n        await deleteVoceAnalitica(deletingVoce.id);\n        toast.success(\"Voce analitica eliminata con successo.\");\n        onDataChange();\n    } catch(error) {\n        toast.error(\"Impossibile eliminare: la voce potrebbe essere in uso.\");\n    } finally {\n        setDeletingVoce(null);\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Voci Analitiche</CardTitle>\n          <Button onClick={() => handleOpenDialog()}>Aggiungi Voce</Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>ID</TableHead>\n                <TableHead>Nome</TableHead>\n                <TableHead>Descrizione</TableHead>\n                <TableHead className=\"text-right\">Azioni</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((voce) => (\n                <TableRow key={voce.id}>\n                  <TableCell>\n                    <Badge variant=\"outline\">{voce.id}</Badge>\n                  </TableCell>\n                  <TableCell>{voce.nome}</TableCell>\n                  <TableCell>{voce.descrizione || 'N/A'}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => handleOpenDialog(voce)}><Edit className=\"h-4 w-4\" /></Button>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-red-500 hover:text-red-600\" onClick={() => setDeletingVoce(voce)}><Trash2 className=\"h-4 w-4\" /></Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent>\n              <DialogHeader>\n                  <DialogTitle>{editingVoce ? 'Modifica Voce Analitica' : 'Nuova Voce Analitica'}</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                          control={form.control}\n                          name=\"id\"\n                          render={({ field }) => (\n                              <FormItem>\n                                  <FormLabel>ID</FormLabel>\n                                  <FormControl>\n                                      <Input placeholder=\"ID Voce (es. COSTI_SOFTWARE)\" {...field} disabled={!!editingVoce} />\n                                  </FormControl>\n                                  <FormMessage />\n                              </FormItem>\n                          )}\n                      />\n                      <FormField\n                          control={form.control}\n                          name=\"nome\"\n                          render={({ field }) => (\n                              <FormItem>\n                                  <FormLabel>Nome</FormLabel>\n                                  <FormControl>\n                                      <Input placeholder=\"Nome descrittivo\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                              </FormItem>\n                          )}\n                      />\n                      <FormField\n                          control={form.control}\n                          name=\"descrizione\"\n                          render={({ field }) => (\n                              <FormItem>\n                                  <FormLabel>Descrizione (opzionale)</FormLabel>\n                                  <FormControl>\n                                      <Input placeholder=\"Descrizione dettagliata\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                              </FormItem>\n                          )}\n                      />\n                      <DialogFooter>\n                          <Button type=\"submit\">Salva</Button>\n                      </DialogFooter>\n                  </form>\n              </Form>\n          </DialogContent>\n      </Dialog>\n      \n      <AlertDialog open={!!deletingVoce} onOpenChange={() => setDeletingVoce(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Vuoi davvero eliminare la voce \"{deletingVoce?.nome}\"? L'operazione fallirà se la voce è già stata utilizzata.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n\nconst ContiTable = ({ data, onDataChange, vociAnalitiche }: { data: Conto[], onDataChange: () => void, vociAnalitiche: VoceAnalitica[] }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingConto, setEditingConto] = useState<Conto | null>(null);\n  const [deletingConto, setDeletingConto] = useState<Conto | null>(null);\n\n  const contoSchema = z.object({\n    id: z.string().min(1, \"L'ID è obbligatorio.\"),\n    codice: z.string().min(1, \"Il codice è obbligatorio.\"),\n    nome: z.string().min(2, \"Il nome è obbligatorio.\"),\n    tipo: z.nativeEnum(TipoConto),\n    richiedeVoceAnalitica: z.boolean().default(false),\n    voceAnaliticaSuggeritaId: z.string().optional().nullable(),\n    // Campi array non gestiti nel form per semplicità\n  });\n\n  const form = useForm<z.infer<typeof contoSchema>>({\n    resolver: zodResolver(contoSchema),\n    defaultValues: {\n      id: \"\",\n      codice: \"\",\n      nome: \"\",\n      tipo: TipoConto.Costo,\n      richiedeVoceAnalitica: false,\n      voceAnaliticaSuggeritaId: null,\n    },\n  });\n\n  const handleOpenDialog = (conto: Conto | null = null) => {\n    setEditingConto(conto);\n    if (conto) {\n      form.reset({\n        ...conto,\n        voceAnaliticaSuggeritaId: conto.voceAnaliticaSuggeritaId || null,\n      });\n    } else {\n      form.reset({\n        id: \"\",\n        codice: \"\",\n        nome: \"\",\n        tipo: TipoConto.Costo,\n        richiedeVoceAnalitica: false,\n        voceAnaliticaSuggeritaId: null,\n      });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = async (values: z.infer<typeof contoSchema>) => {\n    try {\n      if (editingConto) {\n        await updateConto(editingConto.id, values);\n        toast.success(\"Conto aggiornato con successo.\");\n      } else {\n        await createConto(values as Conto);\n        toast.success(\"Conto creato con successo.\");\n      }\n      onDataChange();\n      setIsDialogOpen(false);\n    } catch (error) {\n      toast.error((error as Error).message);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deletingConto) return;\n    try {\n      await deleteConto(deletingConto.id);\n      toast.success(\"Conto eliminato con successo.\");\n      onDataChange();\n    } catch (error) {\n      toast.error(\"Impossibile eliminare: il conto potrebbe essere in uso.\");\n    } finally {\n      setDeletingConto(null);\n    }\n  };\n  \n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Piano dei Conti</CardTitle>\n          <Button onClick={() => handleOpenDialog()}>Aggiungi Conto</Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Codice</TableHead>\n                <TableHead>Nome</TableHead>\n                <TableHead>Tipo</TableHead>\n                <TableHead>Richiede Voce Analitica</TableHead>\n                <TableHead className=\"text-right\">Azioni</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((conto) => (\n                <TableRow key={conto.id}>\n                  <TableCell><Badge variant=\"secondary\">{conto.codice}</Badge></TableCell>\n                  <TableCell>{conto.nome}</TableCell>\n                  <TableCell>{conto.tipo}</TableCell>\n                  <TableCell>{conto.richiedeVoceAnalitica ? 'Sì' : 'No'}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => handleOpenDialog(conto)}><Edit className=\"h-4 w-4\" /></Button>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-red-500 hover:text-red-600\" onClick={() => setDeletingConto(conto)}><Trash2 className=\"h-4 w-4\" /></Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                  <DialogTitle>{editingConto ? 'Modifica Conto' : 'Nuovo Conto'}</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField control={form.control} name=\"id\" render={({ field }) => (\n                          <FormItem><FormLabel>ID</FormLabel><FormControl><Input {...field} disabled={!!editingConto} /></FormControl><FormMessage /></FormItem>\n                      )}/>\n                      <FormField control={form.control} name=\"codice\" render={({ field }) => (\n                          <FormItem><FormLabel>Codice</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>\n                      )}/>\n                    </div>\n                    <FormField control={form.control} name=\"nome\" render={({ field }) => (\n                        <FormItem><FormLabel>Nome</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>\n                    )}/>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField control={form.control} name=\"tipo\" render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Tipo Conto</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl><SelectTrigger><SelectValue /></SelectTrigger></FormControl>\n                            <SelectContent>\n                              {Object.values(TipoConto).map(type => <SelectItem key={type} value={type}>{type}</SelectItem>)}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}/>\n                      <FormField control={form.control} name=\"voceAnaliticaSuggeritaId\" render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Voce Analitica Suggerita</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || ''}>\n                            <FormControl><SelectTrigger><SelectValue placeholder=\"Nessuna\" /></SelectTrigger></FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"\">Nessuna</SelectItem>\n                              {vociAnalitiche.map(voce => <SelectItem key={voce.id} value={voce.id}>{voce.nome}</SelectItem>)}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}/>\n                    </div>\n                    <FormField control={form.control} name=\"richiedeVoceAnalitica\" render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel>Richiede Voce Analitica</FormLabel>\n                          </div>\n                          <FormControl><Switch checked={field.value} onCheckedChange={field.onChange} /></FormControl>\n                      </FormItem>\n                    )}/>\n                    <DialogFooter>\n                      <Button type=\"submit\">Salva</Button>\n                    </DialogFooter>\n                  </form>\n              </Form>\n          </DialogContent>\n      </Dialog>\n      \n      <AlertDialog open={!!deletingConto} onOpenChange={() => setDeletingConto(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>Vuoi davvero eliminare il conto \"{deletingConto?.nome}\"?</AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  )\n};\n\nconst CommesseTable = ({ data, onDataChange, clienti }: { data: Commessa[], onDataChange: () => void, clienti: Cliente[] }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCommessa, setEditingCommessa] = useState<Commessa | null>(null);\n  const [deletingCommessa, setDeletingCommessa] = useState<Commessa | null>(null);\n\n  const commessaSchema = z.object({\n    id: z.string().min(1, \"L'ID è obbligatorio.\"),\n    nome: z.string().min(2, \"Il nome è obbligatorio.\"),\n    descrizione: z.string().optional(),\n    clienteId: z.string().min(1, \"È obbligatorio selezionare un cliente.\"),\n  });\n\n  const form = useForm<z.infer<typeof commessaSchema>>({\n    resolver: zodResolver(commessaSchema),\n    defaultValues: { id: \"\", nome: \"\", descrizione: \"\", clienteId: \"\" },\n  });\n\n  const handleOpenDialog = (commessa: Commessa | null = null) => {\n    setEditingCommessa(commessa);\n    if (commessa) {\n      form.reset(commessa);\n    } else {\n      form.reset({ id: \"\", nome: \"\", descrizione: \"\", clienteId: \"\" });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = async (values: z.infer<typeof commessaSchema>) => {\n    try {\n      if (editingCommessa) {\n        await updateCommessa(editingCommessa.id, values);\n        toast.success(\"Commessa aggiornata con successo.\");\n      } else {\n        await createCommessa({...values, budget: []});\n        toast.success(\"Commessa creata con successo.\");\n      }\n      onDataChange();\n      setIsDialogOpen(false);\n    } catch (error) {\n      toast.error((error as Error).message);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deletingCommessa) return;\n    try {\n      await deleteCommessa(deletingCommessa.id);\n      toast.success(\"Commessa eliminata con successo.\");\n      onDataChange();\n    } catch (error) {\n      toast.error(\"Impossibile eliminare: la commessa potrebbe avere registrazioni associate.\");\n    } finally {\n      setDeletingCommessa(null);\n    }\n  };\n\n  return (\n    <>\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle>Commesse</CardTitle>\n        <Button onClick={() => handleOpenDialog()}>Aggiungi Commessa</Button>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Nome</TableHead>\n              <TableHead>Cliente</TableHead>\n              <TableHead>Budget Totale</TableHead>\n              <TableHead className=\"text-right\">Azioni</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {data.map((commessa) => (\n              <TableRow key={commessa.id}>\n                <TableCell>{commessa.nome}</TableCell>\n                <TableCell>{commessa.cliente?.nome || 'N/A'}</TableCell>\n                <TableCell>\n                  {new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(\n                    commessa.budget?.reduce((sum, voce) => sum + voce.importo, 0) || 0\n                  )}\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  <Button variant=\"ghost\" size=\"icon\" onClick={() => handleOpenDialog(commessa)}><Edit className=\"h-4 w-4\" /></Button>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"text-red-500 hover:text-red-600\" onClick={() => setDeletingCommessa(commessa)}><Trash2 className=\"h-4 w-4\" /></Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n\n    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>{editingCommessa ? 'Modifica Commessa' : 'Nuova Commessa'}</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField control={form.control} name=\"id\" render={({ field }) => (\n                <FormItem><FormLabel>ID</FormLabel><FormControl><Input {...field} disabled={!!editingCommessa} /></FormControl><FormMessage /></FormItem>\n            )}/>\n            <FormField control={form.control} name=\"nome\" render={({ field }) => (\n                <FormItem><FormLabel>Nome</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>\n            )}/>\n            <FormField control={form.control} name=\"descrizione\" render={({ field }) => (\n                <FormItem><FormLabel>Descrizione</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>\n            )}/>\n            <FormField control={form.control} name=\"clienteId\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Cliente</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl><SelectTrigger><SelectValue placeholder=\"Seleziona un cliente...\" /></SelectTrigger></FormControl>\n                  <SelectContent>\n                    {clienti.map(cliente => <SelectItem key={cliente.id} value={cliente.id}>{cliente.nome}</SelectItem>)}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}/>\n            <DialogFooter>\n              <Button type=\"submit\">Salva</Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n    \n    <AlertDialog open={!!deletingCommessa} onOpenChange={() => setDeletingCommessa(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>Vuoi davvero eliminare la commessa \"{deletingCommessa?.nome}\"?</AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  )\n}\n\nconst ScrittureTable = ({ data, onDataChange }: { data: ScritturaContabile[], onDataChange: () => void }) => {\n  const [deletingRegistrazione, setDeletingRegistrazione] = useState<ScritturaContabile | null>(null);\n  const [isClearing, setIsClearing] = useState(false);\n  const navigate = useNavigate();\n\n  const handleDelete = async () => {\n    if (!deletingRegistrazione) return;\n    try {\n      await deleteRegistrazione(deletingRegistrazione.id);\n      toast.success(\"Registrazione eliminata con successo.\");\n      onDataChange();\n    } catch (error) {\n      toast.error((error as Error).message);\n    } finally {\n      setDeletingRegistrazione(null);\n    }\n  };\n\n  const handleClearTable = async () => {\n    try {\n      await clearScrittureContabili();\n      onDataChange();\n    } finally {\n      setIsClearing(false);\n    }\n  };\n\n  const handleEdit = (registrazione: ScritturaContabile) => {\n    navigate(`/app/prima-nota/registrazioni/${registrazione.id}/modifica`);\n  };\n\n  const calculateTotal = (righe: RigaScrittura[] = []) => {\n    return righe.reduce((acc, riga) => acc + (riga.dare || 0), 0);\n  };\n  \n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Scritture Contabili</CardTitle>\n            <Button variant=\"destructive\" onClick={() => setIsClearing(true)}>\n                <Trash2 className=\"mr-2 h-4 w-4\" />\n                Svuota Scritture\n            </Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Data</TableHead>\n                <TableHead>Descrizione</TableHead>\n                <TableHead>Causale</TableHead>\n                <TableHead>Totale</TableHead>\n                <TableHead className=\"text-right\">Azioni</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((scrittura) => (\n                <TableRow key={scrittura.id}>\n                  <TableCell>{new Date(scrittura.data).toLocaleDateString()}</TableCell>\n                  <TableCell>{scrittura.descrizione}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">{scrittura.causaleId}</Badge>\n                  </TableCell>\n                  <TableCell>\n                    {new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(calculateTotal(scrittura.righe))}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEdit(scrittura)}>\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"text-red-500 hover:text-red-600\"\n                      onClick={() => setDeletingRegistrazione(scrittura)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <AlertDialog open={!!deletingRegistrazione} onOpenChange={() => setDeletingRegistrazione(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Questa azione eliminerà la registrazione contabile e tutte le sue righe e allocazioni. Questa azione non può essere annullata.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <AlertDialog open={isClearing} onOpenChange={setIsClearing}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei assolutamente sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Questa azione è irreversibile e cancellerà TUTTE le scritture contabili, \n              incluse le righe e le allocazioni analitiche. Sei sicuro di voler procedere?\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleClearTable} \n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Sì, svuota tutto\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n\nconst CausaliTable = ({ data, onDataChange }: { data: CausaleContabile[], onDataChange: () => void }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCausale, setEditingCausale] = useState<CausaleContabile | null>(null);\n  const [deletingCausale, setDeletingCausale] = useState<CausaleContabile | null>(null);\n\n  const causaleSchema = z.object({\n    id: z.string().min(1, { message: \"L'ID è obbligatorio.\" }),\n    nome: z.string().min(2, { message: \"Il nome deve essere di almeno 2 caratteri.\" }),\n    descrizione: z.string().min(2, { message: \"La descrizione deve essere di almeno 2 caratteri.\" }),\n    externalId: z.string().optional(),\n  });\n\n  const form = useForm<z.infer<typeof causaleSchema>>({\n    resolver: zodResolver(causaleSchema),\n    defaultValues: { id: \"\", nome: \"\", descrizione: \"\", externalId: \"\" },\n  });\n\n  const handleOpenDialog = (causale: CausaleContabile | null = null) => {\n    setEditingCausale(causale);\n    if (causale) {\n      form.reset({ \n        id: causale.id, \n        nome: causale.nome, \n        descrizione: causale.descrizione, \n        externalId: causale.externalId || \"\" \n      });\n    } else {\n      form.reset({ id: \"\", nome: \"\", descrizione: \"\", externalId: \"\" });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = async (values: z.infer<typeof causaleSchema>) => {\n    try {\n      if (editingCausale) {\n        await updateCausale(editingCausale.id, { \n          nome: values.nome!, \n          descrizione: values.descrizione!, \n          externalId: values.externalId \n        });\n        toast.success(\"Causale aggiornata con successo.\");\n      } else {\n        await createCausale({ \n          id: values.id!, \n          nome: values.nome!, \n          descrizione: values.descrizione!, \n          externalId: values.externalId \n        });\n        toast.success(\"Causale creata con successo.\");\n      }\n      onDataChange();\n      setIsDialogOpen(false);\n    } catch (error) {\n      toast.error((error as Error).message);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deletingCausale) return;\n    try {\n      await deleteCausale(deletingCausale.id);\n      toast.success(\"Causale eliminata con successo.\");\n      onDataChange();\n    } catch (error) {\n      toast.error((error as Error).message);\n    } finally {\n      setDeletingCausale(null);\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Causali Contabili</CardTitle>\n          <Button onClick={() => handleOpenDialog()}>Aggiungi Causale</Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>ID</TableHead>\n                <TableHead>Nome</TableHead>\n                <TableHead>Descrizione</TableHead>\n                <TableHead>ID Esterno</TableHead>\n                <TableHead className=\"text-right\">Azioni</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((causale) => (\n                <TableRow key={causale.id}>\n                  <TableCell><Badge variant=\"outline\">{causale.id}</Badge></TableCell>\n                  <TableCell>{causale.nome}</TableCell>\n                  <TableCell>{causale.descrizione}</TableCell>\n                  <TableCell>{causale.externalId || 'N/A'}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => handleOpenDialog(causale)}><Edit className=\"h-4 w-4\" /></Button>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-red-500 hover:text-red-600\" onClick={() => setDeletingCausale(causale)}><Trash2 className=\"h-4 w-4\" /></Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editingCausale ? 'Modifica Causale' : 'Nuova Causale'}</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ID</FormLabel>\n                    <FormControl>\n                      <Input {...field} disabled={!!editingCausale} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"nome\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"descrizione\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Descrizione</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"externalId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ID Esterno</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"submit\">{editingCausale ? 'Aggiorna' : 'Crea'}</Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={!!deletingCausale} onOpenChange={() => setDeletingCausale(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Questa azione eliminerà la causale contabile. Questa azione non può essere annullata.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n\nconst CodiciIvaTable = ({ data, onDataChange }: { data: CodiceIva[], onDataChange: () => void }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCodice, setEditingCodice] = useState<CodiceIva | null>(null);\n  const [deletingCodice, setDeletingCodice] = useState<CodiceIva | null>(null);\n\n  const codiceIvaSchema = z.object({\n    id: z.string().min(1, { message: \"L'ID è obbligatorio.\" }),\n    descrizione: z.string().min(2, { message: \"La descrizione deve essere di almeno 2 caratteri.\" }),\n    aliquota: z.number().min(0).max(100, { message: \"L'aliquota deve essere tra 0 e 100.\" }),\n    externalId: z.string().optional(),\n  });\n\n  const form = useForm<z.infer<typeof codiceIvaSchema>>({\n    resolver: zodResolver(codiceIvaSchema),\n    defaultValues: { id: \"\", descrizione: \"\", aliquota: 22, externalId: \"\" },\n  });\n\n  const handleOpenDialog = (codice: CodiceIva | null = null) => {\n    setEditingCodice(codice);\n    if (codice) {\n      form.reset({ \n        id: codice.id, \n        descrizione: codice.descrizione, \n        aliquota: codice.aliquota,\n        externalId: codice.externalId || \"\" \n      });\n    } else {\n      form.reset({ id: \"\", descrizione: \"\", aliquota: 22, externalId: \"\" });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = async (values: z.infer<typeof codiceIvaSchema>) => {\n    try {\n      if (editingCodice) {\n        await updateCodiceIva(editingCodice.id, { \n          descrizione: values.descrizione!, \n          aliquota: values.aliquota!, \n          externalId: values.externalId \n        });\n        toast.success(\"Codice IVA aggiornato con successo.\");\n      } else {\n        await createCodiceIva({ \n          id: values.id!, \n          descrizione: values.descrizione!, \n          aliquota: values.aliquota!, \n          externalId: values.externalId \n        });\n        toast.success(\"Codice IVA creato con successo.\");\n      }\n      onDataChange();\n      setIsDialogOpen(false);\n    } catch (error) {\n      toast.error((error as Error).message);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deletingCodice) return;\n    try {\n      await deleteCodiceIva(deletingCodice.id);\n      toast.success(\"Codice IVA eliminato con successo.\");\n      onDataChange();\n    } catch (error) {\n      toast.error((error as Error).message);\n    } finally {\n      setDeletingCodice(null);\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Codici IVA</CardTitle>\n          <Button onClick={() => handleOpenDialog()}>Aggiungi Codice IVA</Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>ID</TableHead>\n                <TableHead>Descrizione</TableHead>\n                <TableHead>Aliquota</TableHead>\n                <TableHead>ID Esterno</TableHead>\n                <TableHead className=\"text-right\">Azioni</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((codice) => (\n                <TableRow key={codice.id}>\n                  <TableCell><Badge variant=\"outline\">{codice.id}</Badge></TableCell>\n                  <TableCell>{codice.descrizione}</TableCell>\n                  <TableCell>{codice.aliquota}%</TableCell>\n                  <TableCell>{codice.externalId || 'N/A'}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => handleOpenDialog(codice)}><Edit className=\"h-4 w-4\" /></Button>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-red-500 hover:text-red-600\" onClick={() => setDeletingCodice(codice)}><Trash2 className=\"h-4 w-4\" /></Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editingCodice ? 'Modifica Codice IVA' : 'Nuovo Codice IVA'}</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ID</FormLabel>\n                    <FormControl>\n                      <Input {...field} disabled={!!editingCodice} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"descrizione\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Descrizione</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"aliquota\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Aliquota (%)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\"\n                        {...field} \n                        onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"externalId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ID Esterno</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"submit\">{editingCodice ? 'Aggiorna' : 'Crea'}</Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={!!deletingCodice} onOpenChange={() => setDeletingCodice(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Questa azione eliminerà il codice IVA. Questa azione non può essere annullata.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n\nconst CondizioniPagamentoTable = ({ data, onDataChange }: { data: CondizionePagamento[], onDataChange: () => void }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCondizione, setEditingCondizione] = useState<CondizionePagamento | null>(null);\n  const [deletingCondizione, setDeletingCondizione] = useState<CondizionePagamento | null>(null);\n\n  const condizioneSchema = z.object({\n    id: z.string().min(1, { message: \"L'ID è obbligatorio.\" }),\n    descrizione: z.string().min(2, { message: \"La descrizione deve essere di almeno 2 caratteri.\" }),\n    externalId: z.string().optional(),\n  });\n\n  const form = useForm<z.infer<typeof condizioneSchema>>({\n    resolver: zodResolver(condizioneSchema),\n    defaultValues: { id: \"\", descrizione: \"\", externalId: \"\" },\n  });\n\n  const handleOpenDialog = (condizione: CondizionePagamento | null = null) => {\n    setEditingCondizione(condizione);\n    if (condizione) {\n      form.reset({ \n        id: condizione.id, \n        descrizione: condizione.descrizione, \n        externalId: condizione.externalId || \"\" \n      });\n    } else {\n      form.reset({ id: \"\", descrizione: \"\", externalId: \"\" });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = async (values: z.infer<typeof condizioneSchema>) => {\n    try {\n      if (editingCondizione) {\n        await updateCondizionePagamento(editingCondizione.id, { \n          descrizione: values.descrizione!, \n          externalId: values.externalId \n        });\n        toast.success(\"Condizione di pagamento aggiornata con successo.\");\n      } else {\n        await createCondizionePagamento({ \n          id: values.id!, \n          descrizione: values.descrizione!, \n          externalId: values.externalId \n        });\n        toast.success(\"Condizione di pagamento creata con successo.\");\n      }\n      onDataChange();\n      setIsDialogOpen(false);\n    } catch (error) {\n      toast.error((error as Error).message);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!deletingCondizione) return;\n    try {\n      await deleteCondizionePagamento(deletingCondizione.id);\n      toast.success(\"Condizione di pagamento eliminata con successo.\");\n      onDataChange();\n    } catch (error) {\n      toast.error((error as Error).message);\n    } finally {\n      setDeletingCondizione(null);\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Condizioni di Pagamento</CardTitle>\n          <Button onClick={() => handleOpenDialog()}>Aggiungi Condizione</Button>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>ID</TableHead>\n                <TableHead>Descrizione</TableHead>\n                <TableHead>ID Esterno</TableHead>\n                <TableHead className=\"text-right\">Azioni</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((condizione) => (\n                <TableRow key={condizione.id}>\n                  <TableCell><Badge variant=\"outline\">{condizione.id}</Badge></TableCell>\n                  <TableCell>{condizione.descrizione}</TableCell>\n                  <TableCell>{condizione.externalId || 'N/A'}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => handleOpenDialog(condizione)}><Edit className=\"h-4 w-4\" /></Button>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-red-500 hover:text-red-600\" onClick={() => setDeletingCondizione(condizione)}><Trash2 className=\"h-4 w-4\" /></Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editingCondizione ? 'Modifica Condizione' : 'Nuova Condizione'}</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ID</FormLabel>\n                    <FormControl>\n                      <Input {...field} disabled={!!editingCondizione} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"descrizione\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Descrizione</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"externalId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ID Esterno</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"submit\">{editingCondizione ? 'Aggiorna' : 'Crea'}</Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={!!deletingCondizione} onOpenChange={() => setDeletingCondizione(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Questa azione eliminerà la condizione di pagamento. Questa azione non può essere annullata.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">Elimina</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n\nconst Database: React.FC = () => {\n  const [data, setData] = useState<DatabaseData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedTable, setSelectedTable] = useState<TableKey>('scritture');\n\n  useEffect(() => {\n    fetchDatabaseData();\n  }, []);\n\n  const fetchDatabaseData = async (showLoading = true) => {\n    if (showLoading) {\n      setLoading(true);\n    }\n    try {\n      const response = await fetch('/api/database');\n      const result = await response.json();\n      setData(result);\n    } catch (error) {\n      console.error(\"Errore nel recupero dei dati del database:\", error);\n      toast.error(\"Impossibile caricare i dati dal database.\");\n    } finally {\n      if (showLoading) {\n        setLoading(false);\n      }\n    }\n  };\n\n  const handleDataChange = () => {\n    fetchDatabaseData(false); // Ricarica i dati senza mostrare l'indicatore di caricamento principale\n  };\n\n  const renderSelectedTable = () => {\n    if (!data) return <p>Dati non disponibili.</p>;\n\n    switch (selectedTable) {\n        case 'clienti':\n            return <ClientiTable data={data.clienti} onDataChange={handleDataChange} />;\n        case 'fornitori':\n            return <FornitoriTable data={data.fornitori} onDataChange={handleDataChange} />;\n        case 'vociAnalitiche':\n            return <VociAnaliticheTable data={data.vociAnalitiche} onDataChange={handleDataChange} />;\n        case 'conti':\n            return <ContiTable data={data.conti} onDataChange={handleDataChange} vociAnalitiche={data.vociAnalitiche} />;\n        case 'commesse':\n            return <CommesseTable data={data.commesse} onDataChange={handleDataChange} clienti={data.clienti}/>;\n        case 'scritture':\n             return <ScrittureTable data={data.scritture} onDataChange={handleDataChange} />;\n        case 'causali':\n            return <CausaliTable data={data.causali} onDataChange={handleDataChange} />;\n        case 'codiciIva':\n            return <CodiciIvaTable data={data.codiciIva} onDataChange={handleDataChange} />;\n        case 'condizioniPagamento':\n            return <CondizioniPagamentoTable data={data.condizioniPagamento} onDataChange={handleDataChange} />;\n        default:\n            return <p>Seleziona una tabella da visualizzare.</p>;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <header className=\"flex items-center justify-between p-4 border-b\">\n        <div className='flex items-center'>\n          <DatabaseIcon className=\"h-6 w-6 mr-2\" />\n          <h1 className=\"text-2xl font-bold\">Amministrazione Database</h1>\n        </div>\n        <Button onClick={() => fetchDatabaseData()} disabled={loading}>\n          <RefreshCw className={`mr-2 h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\n          Aggiorna Dati\n        </Button>\n      </header>\n      <main className=\"flex-grow p-4\">\n        <Tabs defaultValue=\"data-management\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"data-management\">Gestione Dati</TabsTrigger>\n            <TabsTrigger value=\"template-management\">Gestione Template Import</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"data-management\">\n            {loading ? (\n              <div className=\"space-y-4\">\n                <Skeleton className=\"h-12 w-1/4\" />\n                <Skeleton className=\"h-64 w-full\" />\n              </div>\n            ) : (\n              <ResizablePanelGroup direction=\"horizontal\" className=\"rounded-lg border\">\n                <ResizablePanel defaultSize={20}>\n                  <div className=\"flex h-full flex-col p-4 space-y-2\">\n                    <h2 className=\"text-lg font-semibold\">Tabelle</h2>\n                    {tableConfig.map((table) => (\n                      <Button\n                        key={table.key}\n                        variant={selectedTable === table.key ? 'secondary' : 'ghost'}\n                        onClick={() => setSelectedTable(table.key)}\n                        className=\"w-full justify-start\"\n                      >\n                        <table.icon className=\"mr-2 h-4 w-4\" />\n                        {table.label}\n                        <Badge variant=\"outline\" className=\"ml-auto\">\n                          {data?.stats[`totale${table.label.replace(/\\s/g, '')}` as keyof typeof data.stats] ?? 0}\n                        </Badge>\n                      </Button>\n                    ))}\n                  </div>\n                </ResizablePanel>\n                <ResizableHandle withHandle />\n                <ResizablePanel defaultSize={80}>\n                  <div className=\"p-4\">\n                    {renderSelectedTable()}\n                  </div>\n                </ResizablePanel>\n              </ResizablePanelGroup>\n            )}\n          </TabsContent>\n          <TabsContent value=\"template-management\">\n            <ImportTemplatesAdmin />\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n};\n\nexport default Database;\n"
        },
        {
          "name": "Import.tsx",
          "type": "file",
          "token_estimate": 2144,
          "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/components/ui/use-toast';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { FileText, Users, FileBarChart2 } from 'lucide-react';\n\nconst ANAGRAFICA_TEMPLATES = [\n    { value: 'causali', label: 'Anagrafica Causali Contabili' },\n    { value: 'codici_iva', label: 'Anagrafica Codici IVA' },\n    { value: 'condizioni_pagamento', label: 'Anagrafica Condizioni di Pagamento' },\n    { value: 'clienti_fornitori', label: 'Anagrafica Clienti e Fornitori' },\n    { value: 'anagrafica_clifor', label: 'Anagrafica Clienti/Fornitori (A_CLIFOR.TXT)' },  // ← AGGIUNTO!\n    { value: 'piano_dei_conti', label: 'Anagrafica Piano dei Conti' },\n];\n\nconst ImportPage: React.FC = () => {\n    // State per l'importazione delle anagrafiche\n    const [anagraficaFiles, setAnagraficaFiles] = useState<FileList | null>(null);\n    const [selectedAnagraficaTemplate, setSelectedAnagraficaTemplate] = useState<string>('');\n    const [isAnagraficaProcessing, setIsAnagraficaProcessing] = useState(false);\n\n    // State per l'importazione delle scritture\n    const [scrittureFiles, setScrittureFiles] = useState<FileList | null>(null);\n    const [isScrittureProcessing, setIsScrittureProcessing] = useState(false);\n    \n    const { toast } = useToast();\n\n    const handleAnagraficaImport = async () => {\n        if (!anagraficaFiles || anagraficaFiles.length === 0 || !selectedAnagraficaTemplate) return;\n\n        setIsAnagraficaProcessing(true);\n        const formData = new FormData();\n        formData.append('file', anagraficaFiles[0]);\n\n        try {\n            const response = await fetch(`/api/import/anagrafica/${selectedAnagraficaTemplate}`, {\n                method: 'POST',\n                body: formData,\n            });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error || 'Errore durante l\\'importazione.');\n            toast({ title: 'Successo!', description: `Importazione anagrafica '${selectedAnagraficaTemplate}' completata.` });\n        } catch (error) {\n            toast({ variant: 'destructive', title: 'Errore', description: (error as Error).message });\n        } finally {\n            setIsAnagraficaProcessing(false);\n            setAnagraficaFiles(null);\n            const fileInput = document.getElementById('anagrafica-file-upload') as HTMLInputElement;\n            if(fileInput) fileInput.value = \"\";\n        }\n    };\n\n    const handleScrittureImport = async () => {\n        if (!scrittureFiles || scrittureFiles.length === 0) return;\n        \n        setIsScrittureProcessing(true);\n        const formData = new FormData();\n        for (let i = 0; i < scrittureFiles.length; i++) {\n            formData.append('files', scrittureFiles[i]);\n        }\n        \n        try {\n            const response = await fetch('/api/import/scritture', {\n                method: 'POST',\n                body: formData,\n            });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error || 'Errore durante l\\'importazione.');\n            toast({ title: 'Successo!', description: 'Importazione scritture completata.' });\n        } catch (error) {\n            toast({ variant: 'destructive', title: 'Errore', description: (error as Error).message });\n        } finally {\n            setIsScrittureProcessing(false);\n            setScrittureFiles(null);\n            const fileInput = document.getElementById('scritture-file-upload') as HTMLInputElement;\n            if(fileInput) fileInput.value = \"\";\n        }\n    };\n\n\n    return (\n        <div className=\"space-y-8\">\n            <div>\n                <h1 className=\"text-3xl font-bold text-slate-900\">Importazione Dati Guidata</h1>\n                <p className=\"text-slate-600 mt-1\">\n                    Segui i passaggi per importare correttamente i dati dal tuo gestionale.\n                </p>\n            </div>\n\n            <Alert>\n                <FileText className=\"h-4 w-4\" />\n                <AlertTitle>Importante</AlertTitle>\n                <AlertDescription>\n                    Esegui sempre il **Passo 1** per importare o aggiornare le anagrafiche prima di procedere con le scritture contabili per evitare errori di dati mancanti.\n                </AlertDescription>\n            </Alert>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                        <Users className=\"h-6 w-6 text-slate-500\" />\n                        Passo 1: Importa Anagrafiche\n                    </CardTitle>\n                    <CardDescription>\n                        Importa le anagrafiche di base come clienti, fornitori, piano dei conti, etc.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                        <label className=\"font-medium\">1. Seleziona il tipo di anagrafica</label>\n                        <Select onValueChange={setSelectedAnagraficaTemplate} value={selectedAnagraficaTemplate}>\n                            <SelectTrigger>\n                                <SelectValue placeholder=\"Scegli un tipo di anagrafica...\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                {ANAGRAFICA_TEMPLATES.map(template => (\n                                    <SelectItem key={template.value} value={template.value}>\n                                        {template.label}\n                                    </SelectItem>\n                                ))}\n                            </SelectContent>\n                        </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                        <label className=\"font-medium\">2. Carica il file</label>\n                        <Input\n                            id=\"anagrafica-file-upload\"\n                            type=\"file\"\n                            accept=\".txt\"\n                            onChange={(e) => setAnagraficaFiles(e.target.files)}\n                            disabled={isAnagraficaProcessing || !selectedAnagraficaTemplate}\n                        />\n                    </div>\n                    <Button onClick={handleAnagraficaImport} disabled={isAnagraficaProcessing || !anagraficaFiles}>\n                        {isAnagraficaProcessing ? 'Importazione...' : 'Importa Anagrafica'}\n                    </Button>\n                </CardContent>\n            </Card>\n\n            <Card>\n                <CardHeader>\n                     <CardTitle className=\"flex items-center gap-2\">\n                        <FileBarChart2 className=\"h-6 w-6 text-slate-500\" />\n                        Passo 2: Importa Scritture Contabili\n                    </CardTitle>\n                    <CardDescription>\n                        Una volta caricate le anagrafiche, importa le scritture contabili. Questa operazione correla dati da più file.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                     <div className=\"space-y-2\">\n                        <label className=\"font-medium\">Carica i file delle scritture</label>\n                        <Input\n                            id=\"scritture-file-upload\"\n                            type=\"file\"\n                            accept=\".txt\"\n                            onChange={(e) => setScrittureFiles(e.target.files)}\n                            disabled={isScrittureProcessing}\n                            multiple\n                        />\n                         <p className=\"text-sm text-slate-500\">\n                            Seleziona tutti i file necessari in una volta (es. PNTESTA.TXT, PNRIGCON.TXT...).\n                        </p>\n                    </div>\n                     <Button onClick={handleScrittureImport} disabled={isScrittureProcessing || !scrittureFiles}>\n                        {isScrittureProcessing ? 'Importazione...' : 'Importa Scritture'}\n                    </Button>\n                </CardContent>\n            </Card>\n        </div>\n    );\n};\n\nexport default ImportPage; "
        },
        {
          "name": "Index.tsx",
          "type": "file",
          "token_estimate": 35,
          "content": "\nimport React from 'react';\nimport Dashboard from './Dashboard';\n\nconst Index = () => {\n  return <Dashboard />;\n};\n\nexport default Index;\n"
        },
        {
          "name": "NotFound.tsx",
          "type": "file",
          "token_estimate": 185,
          "content": "import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n"
        },
        {
          "name": "NuovaRegistrazionePrimaNota.tsx",
          "type": "file",
          "token_estimate": 7772,
          "content": "import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { ArrowLeft, Save, Plus, Trash2, Play, CheckCircle2, Split } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport { Commessa, Conto, CausaleContabile, ScritturaContabile, RigaScrittura, Allocazione, VoceAnalitica } from '@/types';\nimport { getCommesse, getPianoDeiConti, getCausaliContabili, getVociAnalitiche } from '@/api';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\";\nimport { toast } from \"sonner\";\nimport { getRegistrazioni, getRegistrazioneById, addRegistrazione, updateRegistrazione } from '@/api/registrazioni';\nimport { Combobox } from '@/components/ui/combobox';\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst NuovaRegistrazionePrimaNota: React.FC = () => {\n  const navigate = useNavigate();\n  const { id: registrazioneId } = useParams<{ id: string }>();\n  const isEditMode = !!registrazioneId;\n\n  // Stati per i dati caricati dall'API\n  const [commesse, setCommesse] = useState<Commessa[]>([]);\n  const [conti, setConti] = useState<Conto[]>([]);\n  const [causali, setCausali] = useState<CausaleContabile[]>([]);\n  const [vociAnalitiche, setVociAnalitiche] = useState<VoceAnalitica[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [showAllocazioneWarning, setShowAllocazioneWarning] = useState(false);\n  const [rigaDaAllocareId, setRigaDaAllocareId] = useState<string | null>(null);\n\n  // Stato per la registrazione corrente\n  const [registrazione, setRegistrazione] = useState<ScritturaContabile>({\n    id: `reg-${Date.now()}`,\n    data: new Date().toISOString().split('T')[0],\n    descrizione: '',\n    causaleId: '',\n    righe: [{\n      id: `riga-${Date.now()}`,\n      contoId: '',\n      descrizione: '',\n      dare: 0,\n      avere: 0,\n      allocazioni: [],\n    }]\n  });\n\n  // Dati primari per l'automatismo\n  const [datiPrimari, setDatiPrimari] = useState<{ [key: string]: string | number }>({\n    totaleDocumento: 0,\n    aliquotaIva: 22,\n  });\n  \n  const [causaleSelezionata, setCausaleSelezionata] = useState<CausaleContabile | null>(null);\n  const [displayValues, setDisplayValues] = useState<{ [key: string]: string }>({});\n  const [allocazioneRigaId, setAllocazioneRigaId] = useState<string | null>(null);\n  const [allocazioniTemporanee, setAllocazioniTemporanee] = useState<Allocazione[]>([]);\n  const [isCostoInAllocazione, setIsCostoInAllocazione] = useState<boolean>(false);\n  const [fornitoreSelezionato, setFornitoreSelezionato] = useState<string | null>(null);\n\n  // Caricamento dati iniziali e della registrazione in modalità modifica\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setIsLoading(true);\n        const [commesseData, contiData, causaliData, vociAnaliticheData] = await Promise.all([\n          getCommesse(),\n          getPianoDeiConti(),\n          getCausaliContabili(),\n          getVociAnalitiche(),\n        ]);\n        setCommesse(commesseData);\n        setConti(contiData);\n        setCausali(causaliData);\n        setVociAnalitiche(vociAnaliticheData);\n\n        if (isEditMode && registrazioneId) {\n          const regDaModificare = await getRegistrazioneById(registrazioneId);\n          if (regDaModificare) {\n            setRegistrazione({\n              ...regDaModificare,\n              data: new Date(regDaModificare.data).toISOString().split('T')[0],\n            });\n            const causale = causaliData.find(c => c.id === regDaModificare.causaleId);\n            setCausaleSelezionata(causale || null);\n\n            if (regDaModificare.datiAggiuntivi) {\n              setDatiPrimari({\n                totaleDocumento: regDaModificare.datiAggiuntivi.totaleFattura || 0,\n                aliquotaIva: regDaModificare.datiAggiuntivi.aliquotaIva || 22,\n              });\n              setFornitoreSelezionato(regDaModificare.datiAggiuntivi.fornitoreId || null);\n            }\n          } else {\n            toast.error(\"Registrazione non trovata.\");\n            navigate('/prima-nota');\n          }\n        }\n      } catch (error) {\n        toast.error(\"Errore nel caricamento dei dati.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadData();\n  }, [registrazioneId, isEditMode, navigate]);\n\n  useEffect(() => {\n    if (allocazioneRigaId) {\n      const riga = registrazione.righe.find(r => r.id === allocazioneRigaId);\n      const conto = conti.find(c => c.id === riga?.contoId);\n      setIsCostoInAllocazione(conto?.tipo === 'Costo');\n      const existingAllocations = riga?.allocazioni || [];\n      if (existingAllocations.length > 0) {\n        setAllocazioniTemporanee(existingAllocations);\n      } else {\n        setAllocazioniTemporanee([{\n          id: `alloc-${Date.now()}`,\n          commessaId: '',\n          voceAnaliticaId: conto?.voceAnaliticaSuggeritaId || '',\n          importo: riga?.dare || riga?.avere || 0,\n          descrizione: '',\n        }]);\n      }\n    }\n  }, [allocazioneRigaId, registrazione.righe, conti]);\n\n  useEffect(() => {\n    const newDisplayValues: { [key: string]: string } = {};\n    Object.keys(datiPrimari).forEach(key => {\n      newDisplayValues[key] = formatNumber(datiPrimari[key] as number);\n    });\n    registrazione.righe.forEach(riga => {\n      newDisplayValues[`${riga.id}-dare`] = formatNumber(riga.dare);\n      newDisplayValues[`${riga.id}-avere`] = formatNumber(riga.avere);\n    });\n    allocazioniTemporanee.forEach((alloc, idx) => {\n      newDisplayValues[`alloc-${idx}`] = formatNumber(alloc.importo);\n    });\n    setDisplayValues(newDisplayValues);\n  }, [datiPrimari, registrazione.righe, allocazioniTemporanee]);\n\n  const addRigaContabile = () => {\n    setRegistrazione(prev => ({\n      ...prev,\n      righe: [...prev.righe, {\n        id: `riga-${Date.now()}`,\n        contoId: '', descrizione: '', dare: 0, avere: 0, allocazioni: [],\n      }]\n    }));\n  };\n\n  const updateRigaContabile = (id: string, field: keyof RigaScrittura, value: string | number) => {\n    setRegistrazione(prev => ({\n      ...prev,\n      righe: prev.righe.map(riga => {\n        if (riga.id === id) {\n          const updatedRiga = { ...riga };\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (updatedRiga as any)[field] = value;\n          if (field === 'contoId' && typeof value === 'string') {\n            const conto = conti.find(c => c.id === value);\n            updatedRiga.descrizione = conto?.nome || '';\n          }\n          return updatedRiga;\n        }\n        return riga;\n      })\n    }));\n    setAllocazioneRigaId(null);\n    toast.success(\"Allocazioni salvate.\");\n  };\n\n  const removeRigaContabile = (id: string) => {\n    if (registrazione.righe.length <= 1) return;\n    setRegistrazione(prev => ({\n      ...prev,\n      righe: prev.righe.filter(riga => riga.id !== id)\n    }));\n    setAllocazioneRigaId(null);\n    toast.success(\"Allocazioni salvate.\");\n  };\n\n  const getTotaleDare = () => registrazione.righe.reduce((sum, r) => sum + (r.dare || 0), 0);\n  const getTotaleAvere = () => registrazione.righe.reduce((sum, r) => sum + (r.avere || 0), 0);\n  const getSbilancio = () => Math.abs(getTotaleDare() - getTotaleAvere());\n\n  const isDareEnabled = (contoId: string) => {\n    const conto = conti.find(c => c.id === contoId);\n    return !conto || ['Costo', 'Patrimoniale', 'Fornitore', 'Cliente'].includes(conto.tipo);\n  };\n\n  const isAvereEnabled = (contoId: string) => {\n    const conto = conti.find(c => c.id === contoId);\n    return !conto || ['Ricavo', 'Patrimoniale', 'Fornitore', 'Cliente'].includes(conto.tipo);\n  };\n\n  const isAllocazioneEnabled = (contoId: string) => {\n    const conto = conti.find(c => c.id === contoId);\n    return conto ? ['Costo', 'Ricavo'].includes(conto.tipo) : false;\n  };\n\n  const proceedWithSave = async () => {\n    setIsSaving(true);\n    try {\n      const dataToSave: ScritturaContabile = {\n        ...registrazione,\n        datiAggiuntivi: {\n          totaleFattura: datiPrimari.totaleDocumento as number,\n          aliquotaIva: datiPrimari.aliquotaIva as number,\n          fornitoreId: fornitoreSelezionato,\n          clienteId: null, // Per ora gestiamo solo fornitori\n        }\n      };\n\n      if (isEditMode && registrazioneId) {\n        await updateRegistrazione(dataToSave);\n        toast.success(\"Registrazione aggiornata con successo!\");\n      } else {\n        await addRegistrazione(dataToSave);\n        toast.success(\"Registrazione creata con successo!\");\n      }\n      navigate('/prima-nota');\n    } catch (error) {\n      toast.error(\"Si è verificato un errore durante il salvataggio.\");\n      console.error(error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleSave = async () => {\n    // Validazione #1: controlla che tutte le righe abbiano un conto selezionato.\n    for (const [index, riga] of registrazione.righe.entries()) {\n      if (!riga.contoId) {\n        toast.error(\"Riga incompleta\", {\n          description: `La riga #${index + 1} non ha un conto selezionato. Rimuovila o completala prima di salvare.`\n        });\n        return; // Blocca il salvataggio\n      }\n    }\n\n    // Validazione #2: controlla se una riga di costo/ricavo non è stata allocata.\n    const rigaNonAllocata = registrazione.righe.find(riga => isAllocazioneEnabled(riga.contoId) && riga.allocazioni.length === 0);\n\n    if (rigaNonAllocata) {\n      setRigaDaAllocareId(rigaNonAllocata.id);\n      setShowAllocazioneWarning(true);\n    } else {\n      await proceedWithSave();\n    }\n  };\n\n  const formatCurrency = (amount: number) => new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(amount);\n  const formatNumber = (amount: number | undefined) => (amount === undefined || isNaN(amount)) ? '' : new Intl.NumberFormat('it-IT', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(amount);\n  const parseFormattedNumber = (value: string) => parseFloat(value.replace(/\\./g, '').replace(',', '.')) || 0;\n\n  const handleGeneraScrittura = () => {\n    if (!causaleSelezionata) return;\n    const { totaleDocumento, aliquotaIva } = datiPrimari;\n    const totale = typeof totaleDocumento === 'number' ? totaleDocumento : 0;\n    const ivaPerc = (typeof aliquotaIva === 'number' ? aliquotaIva : 22) / 100;\n\n    const iva = parseFloat((totale / (1 + ivaPerc) * ivaPerc).toFixed(2));\n    const imponibile = totale - iva;\n\n    const valori = { totale, iva, imponibile };\n\n    const nuoveRighe = causaleSelezionata.templateScrittura.map(template => {\n      const importo = valori[template.formulaImporto as keyof typeof valori] || 0;\n      const conto = conti.find(c => c.id === template.contoId);\n      return {\n        id: `riga-${Date.now()}-${Math.random()}`,\n        contoId: template.contoId,\n        descrizione: conto?.nome || '',\n        dare: template.sezione === 'Dare' ? importo : 0,\n        avere: template.sezione === 'Avere' ? importo : 0,\n        allocazioni: [],\n      };\n    });\n    setRegistrazione(prev => ({ ...prev, righe: nuoveRighe }));\n  };\n  \n  const handleCausaleChange = (causaleId: string) => {\n    const selected = causali.find(c => c.id === causaleId) || null;\n    setCausaleSelezionata(selected);\n    setRegistrazione(prev => ({ ...prev, causaleId: causaleId, descrizione: selected?.nome || '' }));\n    setDatiPrimari({ totaleDocumento: 0, aliquotaIva: 22 });\n  };\n\n  const handleDatiPrimariChange = (id: string, value: string | number) => {\n    setDatiPrimari(prev => ({ ...prev, [id]: value }));\n  };\n\n  const handleSalvaAllocazioni = () => {\n    if (!allocazioneRigaId) return;\n\n    // Ignora le righe di allocazione vuote e valida quelle compilate\n    const filledAllocations = allocazioniTemporanee.filter(\n      alloc => alloc.commessaId || alloc.importo !== 0\n    );\n\n    const invalidRow = filledAllocations.find(alloc => !alloc.commessaId);\n    if (invalidRow) {\n      toast.error(\"Allocazione incompleta\", {\n        description: `Una riga di allocazione ha un importo ma non ha una commessa selezionata.`,\n      });\n      return;\n    }\n\n    const riga = registrazione.righe.find(r => r.id === allocazioneRigaId);\n    const totaleRiga = riga?.dare || riga?.avere || 0;\n    const totaleAllocato = filledAllocations.reduce((sum, alloc) => sum + alloc.importo, 0);\n\n    if (Math.abs(totaleAllocato - totaleRiga) > 0.01) {\n      toast.warning(\"La somma delle allocazioni non corrisponde all'importo della riga.\");\n      return;\n    }\n\n    setRegistrazione(prev => ({\n      ...prev,\n      righe: prev.righe.map(r =>\n        r.id === allocazioneRigaId ? { ...r, allocazioni: filledAllocations } : r\n      )\n    }));\n\n    setAllocazioneRigaId(null);\n    if (filledAllocations.length > 0) {\n      toast.success(\"Allocazioni salvate con successo.\");\n    }\n  };\n\n  const handleUpdateAllocazioneTemp = (index: number, field: keyof Allocazione, value: string | number) => {\n    const updatedAllocations = [...allocazioniTemporanee];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (updatedAllocations[index] as any)[field] = value;\n    setAllocazioniTemporanee(updatedAllocations);\n  };\n  \n  const handleAddAllocazioneTemp = () => {\n    const riga = registrazione.righe.find(r => r.id === allocazioneRigaId);\n    const totaleRiga = riga?.dare || riga?.avere || 0;\n    const totaleAllocato = allocazioniTemporanee.reduce((sum, alloc) => sum + alloc.importo, 0);\n    const importoResiduo = totaleRiga - totaleAllocato;\n    const ultima = allocazioniTemporanee[allocazioniTemporanee.length - 1];\n\n    setAllocazioniTemporanee(prev => [...prev, {\n      id: `alloc-${Date.now()}`,\n      commessaId: ultima?.commessaId || '',\n      voceAnaliticaId: ultima?.voceAnaliticaId || '',\n      importo: importoResiduo,\n      descrizione: '',\n    }]);\n  };\n\n  const handleRemoveAllocazioneTemp = (index: number) => {\n    if (allocazioniTemporanee.length <= 1) {\n      const newAllocations = [...allocazioniTemporanee];\n      newAllocations[index] = { ...newAllocations[index], importo: 0, descrizione: '' };\n      setAllocazioniTemporanee(newAllocations);\n    } else {\n      setAllocazioniTemporanee(prev => prev.filter((_, i) => i !== index));\n    }\n  };\n\n  const handleDisplayValueChange = (key: string, value: string) => {\n    setDisplayValues(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleDisplayValueBlur = (key: string, type: 'totale' | 'riga' | 'allocazione', rigaId?: string, field?: 'dare' | 'avere', allocIndex?: number) => {\n    const numericValue = parseFormattedNumber(displayValues[key]);\n    if (type === 'totale') {\n      handleDatiPrimariChange(key, numericValue);\n    } else if (type === 'riga' && rigaId && field) {\n      updateRigaContabile(rigaId, field, numericValue);\n    } else if (type === 'allocazione' && allocIndex !== undefined) {\n      handleUpdateAllocazioneTemp(allocIndex, 'importo', numericValue);\n    }\n  };\n\n  const renderDatiPrimari = () => (\n    <Card>\n      <CardHeader><CardTitle>Dati Principali</CardTitle></CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"causale\">Causale Contabile</Label>\n          <Select onValueChange={handleCausaleChange} value={causaleSelezionata?.id || ''} disabled={isEditMode}>\n            <SelectTrigger id=\"causale\">\n              <SelectValue placeholder=\"Seleziona una causale...\" />\n            </SelectTrigger>\n            <SelectContent>\n              {causali.map(c => <SelectItem key={c.id} value={c.id}>{c.nome}</SelectItem>)}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {causaleSelezionata?.datiPrimari.map(dp => {\n          const campoId = dp.id;\n          \n          if (dp.riferimentoConto === 'Fornitore') {\n            const fornitori = conti.filter(c => c.tipo === 'Fornitore');\n            return (\n              <div key={dp.id}>\n                <Label>{dp.label}</Label>\n                <Combobox\n                  options={fornitori.map(f => ({ value: f.id, label: f.nome }))}\n                  value={fornitoreSelezionato}\n                  onChange={setFornitoreSelezionato}\n                  placeholder=\"Seleziona fornitore...\"\n                  searchPlaceholder=\"Cerca fornitore...\"\n                  emptyPlaceholder=\"Nessun fornitore trovato.\"\n                />\n              </div>\n            );\n          }\n\n          if (dp.riferimentoConto === 'Cliente') {\n            const clienti = conti.filter(c => c.tipo === 'Cliente');\n            return (\n              <div key={dp.id}>\n                <Label>{dp.label}</Label>\n                <Combobox\n                  options={clienti.map(c => ({ value: c.id, label: c.nome }))}\n                  value={null} // Non gestiamo ancora i clienti\n                  onChange={() => {}} // Non gestiamo ancora i clienti\n                  placeholder=\"Seleziona cliente...\"\n                  searchPlaceholder=\"Cerca cliente...\"\n                  emptyPlaceholder=\"Nessun cliente trovato.\"\n                />\n              </div>\n            );\n          }\n\n          return (\n            <div key={dp.id}>\n              <Label htmlFor={dp.id}>{dp.label}</Label>\n              <Input\n                id={dp.id}\n                type=\"text\"\n                value={displayValues[campoId] || ''}\n                onChange={(e) => handleDisplayValueChange(campoId, e.target.value)}\n                onBlur={() => handleDisplayValueBlur(campoId, 'totale')}\n                className=\"text-right\"\n              />\n            </div>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n\n  const renderAllocazioneModal = () => {\n    const riga = registrazione.righe.find(r => r.id === allocazioneRigaId);\n    const totaleDaAllocare = riga?.dare || riga?.avere || 0;\n    const totaleAllocato = allocazioniTemporanee.reduce((sum, alloc) => sum + alloc.importo, 0);\n    const residuo = totaleDaAllocare - totaleAllocato;\n\n    const vociAnaliticheFiltrate = isCostoInAllocazione\n      ? vociAnalitiche.filter(v => {\n          const conto = conti.find(c => c.id === riga?.contoId);\n          return conto?.vociAnaliticheAbilitateIds?.includes(v.id);\n        })\n      : [];\n      \n    return (\n      <Dialog open={!!allocazioneRigaId} onOpenChange={(open) => !open && setAllocazioneRigaId(null)}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Allocazione Analitica per \"{riga?.descrizione}\"</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"grid grid-cols-12 gap-4 font-semibold px-1\">\n              <span className=\"col-span-5\">{isCostoInAllocazione ? 'Commessa' : 'Dettaglio Ricavo'}</span>\n              <span className=\"col-span-4\">Voce Analitica</span>\n              <span className=\"col-span-2 text-right\">Importo</span>\n              <span className=\"col-span-1\"></span>\n            </div>\n            {allocazioniTemporanee.map((alloc, index) => (\n              <div key={alloc.id} className=\"grid grid-cols-12 gap-4 items-center\">\n                <div className=\"col-span-5\">\n                  <Combobox\n                    options={commesse.map(c => ({ value: c.id, label: c.nome }))}\n                    value={alloc.commessaId}\n                    onChange={(value) => handleUpdateAllocazioneTemp(index, 'commessaId', value)}\n                    placeholder=\"Seleziona commessa...\"\n                  />\n                </div>\n                <div className=\"col-span-4\">\n                  <Combobox\n                    options={vociAnaliticheFiltrate.map(v => ({ value: v.id, label: v.nome }))}\n                    value={alloc.voceAnaliticaId}\n                    onChange={(value) => handleUpdateAllocazioneTemp(index, 'voceAnaliticaId', value)}\n                    placeholder=\"Seleziona voce...\"\n                    disabled={!isCostoInAllocazione || vociAnaliticheFiltrate.length === 0}\n                  />\n                </div>\n                <div className=\"col-span-2\">\n                  <Input\n                    type=\"text\"\n                    className=\"text-right\"\n                    value={displayValues[`alloc-${index}`] || ''}\n                    onChange={(e) => handleDisplayValueChange(`alloc-${index}`, e.target.value)}\n                    onBlur={() => handleDisplayValueBlur(`alloc-${index}`, 'allocazione', undefined, undefined, index)}\n                  />\n                </div>\n                <div className=\"col-span-1 flex justify-end space-x-1\">\n                  <Button variant=\"ghost\" size=\"icon\" onClick={() => handleRemoveAllocazioneTemp(index)}><Trash2 className=\"h-4 w-4\" /></Button>\n                  {index === allocazioniTemporanee.length - 1 && (\n                    <Button variant=\"ghost\" size=\"icon\" onClick={handleAddAllocazioneTemp}><Plus className=\"h-4 w-4\" /></Button>\n                  )}\n                </div>\n              </div>\n            ))}\n            <div className=\"flex justify-end items-center mt-4\">\n              <div className=\"text-right\">\n                <div>Totale Allocato: <span className=\"font-bold\">{formatCurrency(totaleAllocato)}</span></div>\n                <div>Residuo da Allocare: <span className={`font-bold ${Math.abs(residuo) > 0.01 ? 'text-red-600' : 'text-green-600'}`}>{formatCurrency(residuo)}</span></div>\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <DialogClose asChild><Button variant=\"outline\">Annulla</Button></DialogClose>\n            <Button onClick={handleSalvaAllocazioni}>Salva Allocazioni</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    );\n  };\n  \n  if (isLoading) return <div className=\"p-8\">Caricamento...</div>;\n\n  return (\n    <div className=\"space-y-6\">\n      {renderAllocazioneModal()}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(-1)}><ArrowLeft className=\"h-4 w-4\" /></Button>\n          <div>\n            <h1 className=\"text-2xl font-bold\">{isEditMode ? 'Modifica Registrazione' : 'Nuova Registrazione'}</h1>\n            <p className=\"text-slate-600\">{isEditMode ? `ID: ${registrazione.id}` : 'Crea una nuova scrittura contabile.'}</p>\n          </div>\n        </div>\n        <Button onClick={handleSave} disabled={isSaving || getSbilancio() > 0.01}>\n          <Save className=\"w-4 h-4 mr-2\" />\n          {isSaving ? 'Salvataggio...' : (isEditMode ? 'Salva Modifiche' : 'Crea Registrazione')}\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-1 space-y-6\">\n          {renderDatiPrimari()}\n\n          {!isEditMode && causaleSelezionata?.templateScrittura.length > 0 && (\n            <Card>\n              <CardHeader><CardTitle>Generazione Automatica</CardTitle></CardHeader>\n              <CardContent>\n                <Button onClick={handleGeneraScrittura} className=\"w-full\">\n                  <Play className=\"mr-2 h-4 w-4\" /> Genera Scrittura\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader><CardTitle>Righe Scrittura Contabile</CardTitle></CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"grid grid-cols-12 gap-2 font-semibold text-sm\">\n                  <div className=\"col-span-4\">Conto</div>\n                  <div className=\"col-span-3\">Descrizione</div>\n                  <div className=\"col-span-2 text-right\">Dare</div>\n                  <div className=\"col-span-2 text-right\">Avere</div>\n                  <div className=\"col-span-1\"></div>\n                </div>\n                <TooltipProvider>\n                  {registrazione.righe.map((riga, index) => (\n                    <div key={riga.id} className=\"grid grid-cols-12 gap-2 items-center\">\n                      <div className=\"col-span-4\">\n                        <Combobox\n                          options={conti.map(c => ({ value: c.id, label: c.codice, description: c.nome }))}\n                          value={riga.contoId}\n                          onChange={(value) => updateRigaContabile(riga.id, 'contoId', value)}\n                          placeholder=\"Seleziona conto...\"\n                        />\n                      </div>\n                      <div className=\"col-span-3\">\n                        <Input\n                          value={riga.descrizione}\n                          onChange={(e) => updateRigaContabile(riga.id, 'descrizione', e.target.value)}\n                        />\n                      </div>\n                      <div className=\"col-span-2\">\n                        <Input\n                          type=\"text\"\n                          className=\"text-right\"\n                          value={displayValues[`${riga.id}-dare`]}\n                          onChange={(e) => handleDisplayValueChange(`${riga.id}-dare`, e.target.value)}\n                          onBlur={() => handleDisplayValueBlur(`${riga.id}-dare`, 'riga', riga.id, 'dare')}\n                          disabled={!isDareEnabled(riga.contoId)}\n                        />\n                      </div>\n                      <div className=\"col-span-2\">\n                        <Input\n                          type=\"text\"\n                          className=\"text-right\"\n                          value={displayValues[`${riga.id}-avere`]}\n                          onChange={(e) => handleDisplayValueChange(`${riga.id}-avere`, e.target.value)}\n                          onBlur={() => handleDisplayValueBlur(`${riga.id}-avere`, 'riga', riga.id, 'avere')}\n                          disabled={!isAvereEnabled(riga.contoId)}\n                        />\n                      </div>\n                      <div className=\"col-span-1 flex items-center justify-end space-x-1\">\n                        {isAllocazioneEnabled(riga.contoId) && (\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button variant=\"outline\" size=\"icon\" className={`h-8 w-8 ${riga.allocazioni.length > 0 ? 'border-green-500 text-green-600 hover:text-green-700 hover:bg-green-50' : ''}`} onClick={() => setAllocazioneRigaId(riga.id)}>\n                                {riga.allocazioni.length > 0 ? <CheckCircle2 className=\"h-4 w-4\" /> : <Split className=\"h-4 w-4\" />}\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                              <p>Gestisci Allocazioni</p>\n                            </TooltipContent>\n                          </Tooltip>\n                        )}\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => removeRigaContabile(riga.id)}>\n                              <Trash2 className=\"h-4 w-4 text-slate-500\" />\n                            </Button>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>Elimina riga</p>\n                          </TooltipContent>\n                        </Tooltip>\n                        {index === registrazione.righe.length - 1 && (\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={addRigaContabile}>\n                                <Plus className=\"h-4 w-4 text-slate-500\" />\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                              <p>Aggiungi riga</p>\n                            </TooltipContent>\n                          </Tooltip>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </TooltipProvider>\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex justify-between items-center bg-slate-50 p-4 rounded-b-lg\">\n              <div>\n                <Badge variant={getSbilancio() > 0.01 ? \"destructive\" : \"default\"} className={getSbilancio() <= 0.01 ? \"bg-green-600 hover:bg-green-700\" : \"\"}>\n                  {getSbilancio() > 0.01 ? \"Sbilanciata\" : \"Quadrata\"}\n                </Badge>\n              </div>\n              <div className=\"text-right font-semibold\">\n                <div className=\"text-sm text-slate-600\">Totale Dare: <span className=\"text-slate-900\">{formatCurrency(getTotaleDare())}</span></div>\n                <div className=\"text-sm text-slate-600\">Totale Avere: <span className=\"text-slate-900\">{formatCurrency(getTotaleAvere())}</span></div>\n                <div className={`text-sm ${getSbilancio() > 0.01 ? 'text-red-600' : 'text-slate-600'}`}>Sbilancio: <span className={getSbilancio() > 0.01 ? 'text-red-600 font-bold' : 'text-slate-900'}>{formatCurrency(getSbilancio())}</span></div>\n              </div>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n\n      <AlertDialog open={showAllocazioneWarning} onOpenChange={setShowAllocazioneWarning}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Allocazione Mancante</AlertDialogTitle>\n            <AlertDialogDescription>\n              Una o più righe di costo/ricavo non sono state allocate a una commessa. Questo è necessario per il controllo di gestione. Vuoi procedere con l'allocazione ora?\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <Button variant=\"outline\" onClick={() => {\n              setShowAllocazioneWarning(false);\n              proceedWithSave();\n            }}>\n              Salva Comunque\n            </Button>\n            <AlertDialogAction onClick={() => {\n              setShowAllocazioneWarning(false);\n              setAllocazioneRigaId(rigaDaAllocareId);\n            }}>\n              Alloca Ora\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n};\n\nexport default NuovaRegistrazionePrimaNota;\n"
        },
        {
          "name": "PrimaNota.tsx",
          "type": "file",
          "token_estimate": 2134,
          "content": "import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Eye, Edit, Trash2, AlertTriangle } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { ScritturaContabile, Conto } from '@/types';\nimport { getRegistrazioni, deleteRegistrazione } from '@/api/registrazioni';\nimport { getPianoDeiConti } from '@/api';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { toast } from \"sonner\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nconst PrimaNota: React.FC = () => {\n  const navigate = useNavigate();\n  const [registrazioni, setRegistrazioni] = useState<ScritturaContabile[]>([]);\n  const [conti, setConti] = useState<Conto[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [registrazioneDaEliminare, setRegistrazioneDaEliminare] = useState<ScritturaContabile | null>(null);\n\n  useEffect(() => {\n    const fetchAllData = async () => {\n      try {\n        const [registrazioniData, contiData] = await Promise.all([\n          getRegistrazioni(),\n          getPianoDeiConti(),\n        ]);\n        setRegistrazioni(registrazioniData);\n        setConti(contiData);\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n        toast.error(\"Errore nel caricamento dei dati.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAllData();\n  }, []);\n\n  const handleDelete = async () => {\n    if (!registrazioneDaEliminare) return;\n\n    try {\n      await deleteRegistrazione(registrazioneDaEliminare.id);\n      setRegistrazioni(prev => prev.filter(r => r.id !== registrazioneDaEliminare.id));\n      toast.success(\"Registrazione eliminata con successo.\");\n    } catch (error) {\n      toast.error(\"Errore durante l'eliminazione della registrazione.\");\n      console.error(error);\n    } finally {\n      setRegistrazioneDaEliminare(null);\n    }\n  };\n\n  const getTotaliScrittura = (scrittura: ScritturaContabile) => {\n    const totaleDare = scrittura.righe.reduce((sum, riga) => sum + riga.dare, 0);\n    const totaleAvere = scrittura.righe.reduce((sum, riga) => sum + riga.avere, 0);\n    const sbilancio = Math.abs(totaleDare - totaleAvere);\n    return { totale: totaleDare || totaleAvere, sbilancio };\n  };\n\n  const checkAllocazioneMancante = (scrittura: ScritturaContabile): boolean => {\n    return scrittura.righe.some(riga => {\n      const conto = conti.find(c => c.id === riga.contoId);\n      const richiedeAllocazione = conto && (conto.tipo === 'Costo' || conto.tipo === 'Ricavo');\n      return richiedeAllocazione && riga.allocazioni.length === 0;\n    });\n  };\n\n  if (isLoading) {\n    return <div>Caricamento...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Prima Nota</h1>\n          <p className=\"text-muted-foreground\">\n            Visualizza le registrazioni contabili e crea nuovi movimenti.\n          </p>\n        </div>\n        <Button onClick={() => navigate('/prima-nota/nuova')}>\n          <Plus className=\"mr-2 h-4 w-4\" /> Nuova Registrazione\n        </Button>\n      </div>\n      <Card>\n        <CardHeader>\n          <CardTitle>Elenco Scritture Contabili</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b\">\n                <th className=\"text-left p-2\">Data</th>\n                <th className=\"text-left p-2\">Descrizione</th>\n                <th className=\"text-right p-2\">Totale</th>\n                <th className=\"text-center p-2\">Stato</th>\n                <th className=\"text-center p-2\">Allocazione</th>\n                <th className=\"text-center p-2\">Azioni</th>\n              </tr>\n            </thead>\n            <tbody>\n              {registrazioni.map(scrittura => {\n                const { totale, sbilancio } = getTotaliScrittura(scrittura);\n                const allocazioneMancante = checkAllocazioneMancante(scrittura);\n                return (\n                  <tr key={scrittura.id} className=\"border-b\">\n                    <td className=\"p-2\">{new Date(scrittura.data).toLocaleDateString('it-IT')}</td>\n                    <td className=\"p-2\">{scrittura.descrizione}</td>\n                    <td className=\"p-2 text-right\">{totale.toFixed(2)} €</td>\n                    <td className=\"p-2 text-center\">\n                      <Badge variant={sbilancio > 0.01 ? 'destructive' : 'default'} className={sbilancio <= 0.01 ? 'bg-green-600' : ''}>\n                        {sbilancio > 0.01 ? 'Sbilanciata' : 'Quadrata'}\n                      </Badge>\n                    </td>\n                    <td className=\"p-2 text-center\">\n                      {allocazioneMancante && (\n                        <TooltipProvider>\n                          <Tooltip>\n                            <TooltipTrigger>\n                              <AlertTriangle className=\"h-5 w-5 text-amber-500 mx-auto\" />\n                            </TooltipTrigger>\n                            <TooltipContent>\n                              <p>Allocazione mancante</p>\n                            </TooltipContent>\n                          </Tooltip>\n                        </TooltipProvider>\n                      )}\n                    </td>\n                    <td className=\"p-2 text-center\">\n                      <TooltipProvider>\n                        <div className=\"flex justify-center space-x-1\">\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" onClick={() => alert(`Anteprima non implementata.`)}>\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent><p>Anteprima Scrittura</p></TooltipContent>\n                          </Tooltip>\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" onClick={() => navigate(`/prima-nota/modifica/${scrittura.id}`)}>\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent><p>Modifica Registrazione</p></TooltipContent>\n                          </Tooltip>\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" className=\"text-red-500 hover:text-red-600\" onClick={() => setRegistrazioneDaEliminare(scrittura)}>\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent><p>Elimina Registrazione</p></TooltipContent>\n                          </Tooltip>\n                        </div>\n                      </TooltipProvider>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </CardContent>\n      </Card>\n\n      <AlertDialog open={!!registrazioneDaEliminare} onOpenChange={() => setRegistrazioneDaEliminare(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Sei sicuro di voler eliminare questa registrazione?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Questa azione non può essere annullata. L'eliminazione sarà permanente.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Annulla</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-red-600 hover:bg-red-700\">\n              Elimina\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n};\n\nexport default PrimaNota;\n"
        }
      ]
    },
    {
      "name": "types",
      "type": "directory",
      "children": [
        {
          "name": "index.ts",
          "type": "file",
          "token_estimate": 1652,
          "content": "// Questo file conterrà tutte le definizioni di tipo (interfacce) per il nostro dominio di business.\n// Manterrà il nostro codice organizzato, riutilizzabile e fortemente tipizzato.\n\n/**\n * Rappresenta un Cliente.\n */\nexport interface Cliente {\n  id: string;\n  nome: string;\n  externalId?: string | null;\n}\n\n/**\n * Rappresenta un Fornitore.\n */\nexport interface Fornitore {\n  id: string;\n  nome: string;\n  externalId?: string | null;\n}\n\n/**\n * Rappresenta un centro di costo o di ricavo, una delle colonne analitiche del foglio Excel.\n * Esempio: \"personale\", \"gestione automezzi\", \"sacchi\".\n */\nexport interface VoceAnalitica {\n  id: string; // Es. '1', '2', '3' come da file Excel\n  nome: string; // Es. 'personale', 'gestione automezzi'\n  descrizione?: string;\n}\n\n/**\n * Rappresenta una voce del Piano dei Conti.\n * Esempio: \"6005000850 CARBURANTI E LUBRIFICANTI\"\n */\nexport interface Conto {\n  id: string; // Corrisponde al codice conto, es. \"6005000850\"\n  codice: string; // Duplicato dell'id per chiarezza semantica\n  nome: string; // Es. \"CARBURANTI E LUBRIFICANTI\"\n  tipo: 'Costo' | 'Ricavo' | 'Patrimoniale' | 'Fornitore' | 'Cliente'; // Ampliato per maggiore specificità\n  // Il motore del nostro automatismo: collega un conto a un centro di costo di default.\n  voceAnaliticaSuggeritaId?: string; // Es. '2' (gestione automezzi)\n  richiedeVoceAnalitica?: boolean; // True se il conto richiede una voce analitica\n  vociAnaliticheAbilitateIds?: string[]; // Lista di Voci Analitiche permesse per questo conto\n  contropartiteSuggeriteIds?: string[]; // Lista di conti suggeriti come contropartita\n}\n\n/**\n * Rappresenta una Commessa di lavoro. Contiene i dati anagrafici\n * e la struttura di budget per il confronto con il consuntivo.\n */\nexport interface BudgetVoce {\n  id: string;\n  importo: number;\n  commessaId: string;\n  voceAnaliticaId: string;\n  voceAnalitica: VoceAnalitica;\n}\n\nexport interface Commessa {\n  id: string;\n  externalId?: string | null;\n  nome: string;\n  descrizione?: string | null;\n  clienteId: string;\n  cliente?: Cliente;\n  budget?: Partial<BudgetVoce>[];\n  allocazioni?: Allocazione[];\n}\n\n/**\n * Campo dati richiesto da una causale per poter generare la scrittura.\n */\nexport interface CampoDatiPrimari {\n  id: 'totaleDocumento' | 'aliquotaIva' | 'fornitoreId' | 'clienteId' | string; // ID univoco del campo\n  label: string; // Es. \"Totale Documento\"\n  tipo: 'number' | 'select' | 'text' | 'date';\n  riferimentoConto?: 'Fornitore' | 'Cliente'; // Usato se tipo è 'select'\n}\n\n/**\n * Definisce il template per una registrazione contabile automatica.\n * È il motore degli automatismi di inserimento.\n */\nexport interface CausaleContabile {\n  id: string; // Es. 'FATT_ACQ_MERCI'\n  externalId?: string | null; // ID esterno per importazione\n  nome: string; // Nome breve, es. \"Fattura Acquisto\"\n  descrizione: string; // Es. 'Registrazione Fattura Acquisto Merce'\n  // Lista dei dati che l'utente deve inserire per usare il template\n  datiPrimari: CampoDatiPrimari[]; \n  // Il template vero e proprio per generare le righe\n  templateScrittura: VoceTemplateScrittura[];\n}\n\n/**\n * Rappresenta una riga del template di una causale contabile.\n */\nexport interface VoceTemplateScrittura {\n  sezione: 'Dare' | 'Avere';\n  // ID del conto da usare. Può essere un conto generico (es. 'IVA')\n  // o un segnaposto che verrà sostituito da un dato primario (es. fornitoreId).\n  contoId: string;\n  // Specifica come calcolare l'importo per questa riga.\n  formulaImporto: 'imponibile' | 'iva' | 'totale';\n}\n\n/**\n * Rappresenta la ripartizione di un importo su una specifica commessa e centro di costo.\n * Questa è l'informazione analitica finale.\n */\nexport interface Allocazione {\n  id: string; // UUID per la riga di allocazione\n  commessaId: string;\n  voceAnaliticaId: string;\n  importo: number; // L'importo finale calcolato\n  descrizione?: string;\n}\n\n/**\n * Rappresenta una singola riga di dettaglio all'interno di una ScritturaContabile.\n */\nexport interface RigaScrittura {\n  id: string;\n  descrizione: string;\n  dare: number;\n  avere: number;\n  contoId: string;\n  allocazioni: Allocazione[];\n}\n\n/**\n * Rappresenta una registrazione di Prima Nota completa.\n */\nexport interface ScritturaContabile {\n  id: string; // UUID per la registrazione\n  data: string; // Usiamo l'oggetto Date per maneggiarlo più facilmente, lo convertiremo in stringa solo per le API\n  causaleId: string; // ID della causale usata (obbligatorio se si usa un automatismo)\n  descrizione: string;\n  righe: RigaScrittura[];\n  datiAggiuntivi?: {\n    fornitoreId?: string | null;\n    clienteId?: string | null;\n    totaleFattura?: number | string;\n    aliquotaIva?: number;\n  };\n}\n\n// --- Tipi per la Dashboard Commesse ---\n\n/**\n * Rappresenta i dati per una singola card KPI nella dashboard.\n */\nexport interface CardKPI {\n  label: string;\n  value: string; // Valore formattato come stringa (es. \"€ 1.2M\", \"33%\")\n  delta?: string; // Variazione percentuale opzionale (es. \"+8.2%\")\n}\n\n/**\n * Rappresenta una riga nella tabella della dashboard delle commesse.\n */\nexport interface CommessaRow {\n  id: string;\n  nome: string;\n  codice: string; // Es. CDM-2024-001\n  cliente: string;\n  stato: 'In Lavorazione' | 'Aperta' | 'Chiusa' | 'Fatturata';\n  ricavi: number;\n  costi: number;\n  marginePercentuale: number; // (ricavi - costi) / ricavi\n}\n\n/**\n * L'oggetto dati principale per popolare la nuova dashboard delle commesse.\n */\nexport interface DashboardCommesseData {\n  kpi: {\n    commesseAttive: CardKPI;\n    ricaviTotali: CardKPI;\n    costiTotali: CardKPI;\n    margineLordoMedio: CardKPI;\n  };\n  commesse: CommessaRow[];\n}\n\n// --- TIPI PER LA DASHBOARD DI CONTROLLO ---\n\nexport interface CommessaDashboard {\n  id: string;\n  nome: string;\n  cliente: {\n    id: string;\n    nome: string;\n  };\n  stato: string; // Es. \"In Lavorazione\", \"Chiusa\"\n  ricavi: number;\n  costi: number;\n  margine: number; // (ricavi - costi) / ricavi\n}\n\nexport interface DashboardData {\n  commesse: CommessaDashboard[];\n  kpi: {\n    commesseAttive: number;\n    ricaviTotali: number;\n    costiTotali: number;\n    margineLordoMedio: number;\n  };\n}\n\n// --- TIPI PER LA GESTIONE DEI TEMPLATE DI IMPORTAZIONE ---\n\n/**\n * Rappresenta la definizione di un singolo campo in un file a larghezza fissa.\n */\nexport interface FieldDefinition {\n  id: string;\n  nomeCampo: string;\n  start: number;\n  length: number;\n  type: 'string' | 'number' | 'date';\n  fileIdentifier?: string | null;\n}\n\n/**\n * Rappresenta un template di importazione completo.\n */\nexport interface ImportTemplate {\n  id: string;\n  nome: string;\n  fields: FieldDefinition[];\n}\n\nexport {}; "
        }
      ]
    },
    {
      "name": "vite-env.d.ts",
      "type": "file",
      "token_estimate": 10,
      "content": "/// <reference types=\"vite/client\" />\n"
    }
  ]
}