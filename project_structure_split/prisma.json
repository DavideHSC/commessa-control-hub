{
  "name": "prisma",
  "type": "directory",
  "total_token_estimate": 12625,
  "children": [
    {
      "name": "migrations",
      "type": "directory",
      "children": [
        {
          "name": "20250619122108_init",
          "type": "directory",
          "children": [
            {
              "name": "migration.sql",
              "type": "file",
              "token_estimate": 1390,
              "content": "-- CreateEnum\nCREATE TYPE \"TipoConto\" AS ENUM ('Costo', 'Ricavo', 'Patrimoniale', 'Fornitore', 'Cliente');\n\n-- CreateEnum\nCREATE TYPE \"TipoCampo\" AS ENUM ('number', 'select', 'text', 'date');\n\n-- CreateEnum\nCREATE TYPE \"SezioneScrittura\" AS ENUM ('Dare', 'Avere');\n\n-- CreateEnum\nCREATE TYPE \"FormulaImporto\" AS ENUM ('imponibile', 'iva', 'totale');\n\n-- CreateTable\nCREATE TABLE \"VoceAnalitica\" (\n    \"id\" TEXT NOT NULL,\n    \"nome\" TEXT NOT NULL,\n    \"descrizione\" TEXT,\n\n    CONSTRAINT \"VoceAnalitica_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Conto\" (\n    \"id\" TEXT NOT NULL,\n    \"codice\" TEXT NOT NULL,\n    \"nome\" TEXT NOT NULL,\n    \"tipo\" \"TipoConto\" NOT NULL,\n    \"richiedeVoceAnalitica\" BOOLEAN NOT NULL DEFAULT false,\n    \"vociAnaliticheAbilitateIds\" TEXT[],\n    \"contropartiteSuggeriteIds\" TEXT[],\n    \"voceAnaliticaSuggeritaId\" TEXT,\n\n    CONSTRAINT \"Conto_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Commessa\" (\n    \"id\" TEXT NOT NULL,\n    \"nome\" TEXT NOT NULL,\n    \"clienteId\" TEXT,\n    \"descrizione\" TEXT,\n\n    CONSTRAINT \"Commessa_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"BudgetVoce\" (\n    \"id\" TEXT NOT NULL,\n    \"importo\" DOUBLE PRECISION NOT NULL,\n    \"commessaId\" TEXT NOT NULL,\n    \"voceAnaliticaId\" TEXT NOT NULL,\n\n    CONSTRAINT \"BudgetVoce_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"ScritturaContabile\" (\n    \"id\" TEXT NOT NULL,\n    \"data\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"causaleId\" TEXT NOT NULL,\n    \"descrizione\" TEXT NOT NULL,\n    \"datiAggiuntivi\" JSONB,\n\n    CONSTRAINT \"ScritturaContabile_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"RigaScrittura\" (\n    \"id\" TEXT NOT NULL,\n    \"descrizione\" TEXT NOT NULL,\n    \"dare\" DOUBLE PRECISION NOT NULL,\n    \"avere\" DOUBLE PRECISION NOT NULL,\n    \"contoId\" TEXT NOT NULL,\n    \"scritturaContabileId\" TEXT NOT NULL,\n\n    CONSTRAINT \"RigaScrittura_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Allocazione\" (\n    \"id\" TEXT NOT NULL,\n    \"importo\" DOUBLE PRECISION NOT NULL,\n    \"descrizione\" TEXT,\n    \"rigaScritturaId\" TEXT NOT NULL,\n    \"commessaId\" TEXT NOT NULL,\n    \"voceAnaliticaId\" TEXT NOT NULL,\n\n    CONSTRAINT \"Allocazione_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"CausaleContabile\" (\n    \"id\" TEXT NOT NULL,\n    \"nome\" TEXT NOT NULL,\n    \"descrizione\" TEXT NOT NULL,\n\n    CONSTRAINT \"CausaleContabile_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"CampoDatiPrimari\" (\n    \"id\" TEXT NOT NULL,\n    \"fieldId\" TEXT NOT NULL,\n    \"label\" TEXT NOT NULL,\n    \"tipo\" \"TipoCampo\" NOT NULL,\n    \"riferimentoConto\" \"TipoConto\",\n    \"causaleId\" TEXT NOT NULL,\n\n    CONSTRAINT \"CampoDatiPrimari_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"VoceTemplateScrittura\" (\n    \"id\" TEXT NOT NULL,\n    \"sezione\" \"SezioneScrittura\" NOT NULL,\n    \"contoId\" TEXT NOT NULL,\n    \"formulaImporto\" \"FormulaImporto\" NOT NULL,\n    \"causaleId\" TEXT NOT NULL,\n\n    CONSTRAINT \"VoceTemplateScrittura_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"VoceAnalitica_nome_key\" ON \"VoceAnalitica\"(\"nome\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Conto_codice_key\" ON \"Conto\"(\"codice\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Commessa_nome_key\" ON \"Commessa\"(\"nome\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"BudgetVoce_commessaId_voceAnaliticaId_key\" ON \"BudgetVoce\"(\"commessaId\", \"voceAnaliticaId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"CausaleContabile_nome_key\" ON \"CausaleContabile\"(\"nome\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"CampoDatiPrimari_causaleId_fieldId_key\" ON \"CampoDatiPrimari\"(\"causaleId\", \"fieldId\");\n\n-- AddForeignKey\nALTER TABLE \"Conto\" ADD CONSTRAINT \"Conto_voceAnaliticaSuggeritaId_fkey\" FOREIGN KEY (\"voceAnaliticaSuggeritaId\") REFERENCES \"VoceAnalitica\"(\"id\") ON DELETE SET NULL ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"BudgetVoce\" ADD CONSTRAINT \"BudgetVoce_commessaId_fkey\" FOREIGN KEY (\"commessaId\") REFERENCES \"Commessa\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"BudgetVoce\" ADD CONSTRAINT \"BudgetVoce_voceAnaliticaId_fkey\" FOREIGN KEY (\"voceAnaliticaId\") REFERENCES \"VoceAnalitica\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"RigaScrittura\" ADD CONSTRAINT \"RigaScrittura_contoId_fkey\" FOREIGN KEY (\"contoId\") REFERENCES \"Conto\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"RigaScrittura\" ADD CONSTRAINT \"RigaScrittura_scritturaContabileId_fkey\" FOREIGN KEY (\"scritturaContabileId\") REFERENCES \"ScritturaContabile\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Allocazione\" ADD CONSTRAINT \"Allocazione_rigaScritturaId_fkey\" FOREIGN KEY (\"rigaScritturaId\") REFERENCES \"RigaScrittura\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Allocazione\" ADD CONSTRAINT \"Allocazione_commessaId_fkey\" FOREIGN KEY (\"commessaId\") REFERENCES \"Commessa\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Allocazione\" ADD CONSTRAINT \"Allocazione_voceAnaliticaId_fkey\" FOREIGN KEY (\"voceAnaliticaId\") REFERENCES \"VoceAnalitica\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"CampoDatiPrimari\" ADD CONSTRAINT \"CampoDatiPrimari_causaleId_fkey\" FOREIGN KEY (\"causaleId\") REFERENCES \"CausaleContabile\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"VoceTemplateScrittura\" ADD CONSTRAINT \"VoceTemplateScrittura_causaleId_fkey\" FOREIGN KEY (\"causaleId\") REFERENCES \"CausaleContabile\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n"
            }
          ]
        },
        {
          "name": "20250619152117_add_clienti_fornitori_e_external_ids",
          "type": "directory",
          "children": [
            {
              "name": "migration.sql",
              "type": "file",
              "token_estimate": 797,
              "content": "/*\n  Warnings:\n\n  - A unique constraint covering the columns `[externalId]` on the table `CausaleContabile` will be added. If there are existing duplicate values, this will fail.\n  - A unique constraint covering the columns `[externalId]` on the table `Commessa` will be added. If there are existing duplicate values, this will fail.\n  - A unique constraint covering the columns `[externalId]` on the table `Conto` will be added. If there are existing duplicate values, this will fail.\n  - A unique constraint covering the columns `[externalId]` on the table `ScritturaContabile` will be added. If there are existing duplicate values, this will fail.\n  - A unique constraint covering the columns `[externalId]` on the table `VoceAnalitica` will be added. If there are existing duplicate values, this will fail.\n  - Made the column `clienteId` on table `Commessa` required. This step will fail if there are existing NULL values in that column.\n\n*/\n-- AlterTable\nALTER TABLE \"CausaleContabile\" ADD COLUMN     \"externalId\" TEXT;\n\n-- AlterTable\nALTER TABLE \"Commessa\" ADD COLUMN     \"externalId\" TEXT,\nALTER COLUMN \"clienteId\" SET NOT NULL;\n\n-- AlterTable\nALTER TABLE \"Conto\" ADD COLUMN     \"externalId\" TEXT;\n\n-- AlterTable\nALTER TABLE \"ScritturaContabile\" ADD COLUMN     \"externalId\" TEXT,\nADD COLUMN     \"fornitoreId\" TEXT;\n\n-- AlterTable\nALTER TABLE \"VoceAnalitica\" ADD COLUMN     \"externalId\" TEXT;\n\n-- CreateTable\nCREATE TABLE \"Cliente\" (\n    \"id\" TEXT NOT NULL,\n    \"externalId\" TEXT,\n    \"nome\" TEXT NOT NULL,\n    \"piva\" TEXT,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Cliente_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Fornitore\" (\n    \"id\" TEXT NOT NULL,\n    \"externalId\" TEXT,\n    \"nome\" TEXT NOT NULL,\n    \"piva\" TEXT,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Fornitore_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Cliente_externalId_key\" ON \"Cliente\"(\"externalId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Cliente_piva_key\" ON \"Cliente\"(\"piva\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Fornitore_externalId_key\" ON \"Fornitore\"(\"externalId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Fornitore_piva_key\" ON \"Fornitore\"(\"piva\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"CausaleContabile_externalId_key\" ON \"CausaleContabile\"(\"externalId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Commessa_externalId_key\" ON \"Commessa\"(\"externalId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Conto_externalId_key\" ON \"Conto\"(\"externalId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"ScritturaContabile_externalId_key\" ON \"ScritturaContabile\"(\"externalId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"VoceAnalitica_externalId_key\" ON \"VoceAnalitica\"(\"externalId\");\n\n-- AddForeignKey\nALTER TABLE \"Commessa\" ADD CONSTRAINT \"Commessa_clienteId_fkey\" FOREIGN KEY (\"clienteId\") REFERENCES \"Cliente\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"ScritturaContabile\" ADD CONSTRAINT \"ScritturaContabile_fornitoreId_fkey\" FOREIGN KEY (\"fornitoreId\") REFERENCES \"Fornitore\"(\"id\") ON DELETE SET NULL ON UPDATE CASCADE;\n"
            }
          ]
        },
        {
          "name": "20250620082838_add_import_models",
          "type": "directory",
          "children": [
            {
              "name": "migration.sql",
              "type": "file",
              "token_estimate": 386,
              "content": "-- AlterTable\nALTER TABLE \"Cliente\" ADD COLUMN     \"codiceFiscale\" TEXT;\n\n-- AlterTable\nALTER TABLE \"Fornitore\" ADD COLUMN     \"codiceFiscale\" TEXT;\n\n-- AlterTable\nALTER TABLE \"ScritturaContabile\" ADD COLUMN     \"dataDocumento\" TIMESTAMP(3),\nADD COLUMN     \"numeroDocumento\" TEXT;\n\n-- CreateTable\nCREATE TABLE \"CodiceIva\" (\n    \"id\" TEXT NOT NULL,\n    \"externalId\" TEXT,\n    \"descrizione\" TEXT NOT NULL,\n    \"aliquota\" DOUBLE PRECISION NOT NULL,\n\n    CONSTRAINT \"CodiceIva_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"CondizionePagamento\" (\n    \"id\" TEXT NOT NULL,\n    \"externalId\" TEXT,\n    \"descrizione\" TEXT NOT NULL,\n\n    CONSTRAINT \"CondizionePagamento_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"RigaIva\" (\n    \"id\" TEXT NOT NULL,\n    \"imponibile\" DOUBLE PRECISION NOT NULL,\n    \"imposta\" DOUBLE PRECISION NOT NULL,\n    \"codiceIvaId\" TEXT NOT NULL,\n    \"rigaScritturaId\" TEXT NOT NULL,\n\n    CONSTRAINT \"RigaIva_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"CodiceIva_externalId_key\" ON \"CodiceIva\"(\"externalId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"CondizionePagamento_externalId_key\" ON \"CondizionePagamento\"(\"externalId\");\n\n-- AddForeignKey\nALTER TABLE \"RigaIva\" ADD CONSTRAINT \"RigaIva_codiceIvaId_fkey\" FOREIGN KEY (\"codiceIvaId\") REFERENCES \"CodiceIva\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"RigaIva\" ADD CONSTRAINT \"RigaIva_rigaScritturaId_fkey\" FOREIGN KEY (\"rigaScritturaId\") REFERENCES \"RigaScrittura\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n"
            }
          ]
        },
        {
          "name": "20250620085533_add_dynamic_import_models",
          "type": "directory",
          "children": [
            {
              "name": "migration.sql",
              "type": "file",
              "token_estimate": 186,
              "content": "-- CreateTable\nCREATE TABLE \"ImportTemplate\" (\n    \"id\" TEXT NOT NULL,\n    \"nome\" TEXT NOT NULL,\n\n    CONSTRAINT \"ImportTemplate_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"FieldDefinition\" (\n    \"id\" TEXT NOT NULL,\n    \"nomeCampo\" TEXT NOT NULL,\n    \"start\" INTEGER NOT NULL,\n    \"length\" INTEGER NOT NULL,\n    \"type\" TEXT NOT NULL DEFAULT 'string',\n    \"templateId\" TEXT NOT NULL,\n\n    CONSTRAINT \"FieldDefinition_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"ImportTemplate_nome_key\" ON \"ImportTemplate\"(\"nome\");\n\n-- AddForeignKey\nALTER TABLE \"FieldDefinition\" ADD CONSTRAINT \"FieldDefinition_templateId_fkey\" FOREIGN KEY (\"templateId\") REFERENCES \"ImportTemplate\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n"
            }
          ]
        },
        {
          "name": "20250620100150_add_file_identifier_to_field_definition",
          "type": "directory",
          "children": [
            {
              "name": "migration.sql",
              "type": "file",
              "token_estimate": 21,
              "content": "-- AlterTable\nALTER TABLE \"FieldDefinition\" ADD COLUMN     \"fileIdentifier\" TEXT;\n"
            }
          ]
        },
        {
          "name": "20250620114544_add_modelname_to_import_template",
          "type": "directory",
          "children": [
            {
              "name": "migration.sql",
              "type": "file",
              "token_estimate": 19,
              "content": "-- AlterTable\nALTER TABLE \"ImportTemplate\" ADD COLUMN     \"modelName\" TEXT;\n"
            }
          ]
        },
        {
          "name": "20250620115346_fix_template_seeding_model",
          "type": "directory",
          "children": [
            {
              "name": "migration.sql",
              "type": "file",
              "token_estimate": 35,
              "content": "-- AlterTable\nALTER TABLE \"VoceTemplateScrittura\" ADD COLUMN     \"contoRiferimentoDatiPrimari\" TEXT,\nALTER COLUMN \"contoId\" DROP NOT NULL;\n"
            }
          ]
        },
        {
          "name": "20250620131511_make_scrittura_fields_optional",
          "type": "directory",
          "children": [
            {
              "name": "migration.sql",
              "type": "file",
              "token_estimate": 31,
              "content": "-- AlterTable\nALTER TABLE \"ScritturaContabile\" ALTER COLUMN \"data\" DROP NOT NULL,\nALTER COLUMN \"causaleId\" DROP NOT NULL;\n"
            }
          ]
        },
        {
          "name": "migration_lock.toml",
          "type": "file",
          "token_estimate": 32,
          "content": "# Please do not edit this file manually\n# It should be added in your version-control system (i.e. Git)\nprovider = \"postgresql\""
        }
      ]
    },
    {
      "name": "schema.prisma",
      "type": "file",
      "token_estimate": 1707,
      "content": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// 2. Definizioni di tipi enumerati (Enum)\n// Usati per limitare i valori possibili di un campo.\n\nenum TipoConto {\n  Costo\n  Ricavo\n  Patrimoniale\n  Fornitore\n  Cliente\n}\n\nenum TipoCampo {\n  number\n  select\n  text\n  date\n}\n\nenum SezioneScrittura {\n  Dare\n  Avere\n}\n\nenum FormulaImporto {\n  imponibile\n  iva\n  totale\n}\n\n// 3. Modelli Dati (le nostre tabelle)\n\n// --- MODELLI DI BASE ---\n\nmodel Cliente {\n  id            String     @id @default(cuid())\n  externalId    String?    @unique\n  nome          String\n  piva          String?    @unique\n  codiceFiscale String?\n  createdAt     DateTime   @default(now())\n  updatedAt     DateTime   @updatedAt\n\n  commesse      Commessa[]\n}\n\nmodel Fornitore {\n  id            String     @id @default(cuid())\n  externalId    String?    @unique\n  nome          String\n  piva          String?    @unique\n  codiceFiscale String?\n  createdAt     DateTime   @default(now())\n  updatedAt     DateTime   @updatedAt\n\n  scritture     ScritturaContabile[]\n}\n\nmodel VoceAnalitica {\n  id          String  @id\n  externalId  String? @unique\n  nome        String  @unique\n  descrizione String?\n\n  budgetItems             BudgetVoce[]\n  allocazioni             Allocazione[]\n  contiPerCuiESuggerita   Conto[]\n}\n\nmodel Conto {\n  id                         String   @id\n  externalId                 String?  @unique\n  codice                     String   @unique\n  nome                       String\n  tipo                       TipoConto\n  richiedeVoceAnalitica      Boolean  @default(false)\n  vociAnaliticheAbilitateIds String[]\n  contropartiteSuggeriteIds  String[]\n\n  voceAnaliticaSuggeritaId   String?\n  voceAnaliticaSuggerita     VoceAnalitica? @relation(fields: [voceAnaliticaSuggeritaId], references: [id])\n\n  righeScrittura             RigaScrittura[]\n}\n\nmodel Commessa {\n  id          String   @id\n  externalId  String?  @unique\n  nome        String   @unique\n  descrizione String?\n\n  clienteId   String\n  cliente     Cliente  @relation(fields: [clienteId], references: [id])\n\n  budget      BudgetVoce[]\n  allocazioni Allocazione[]\n}\n\nmodel BudgetVoce {\n  id              String        @id @default(cuid())\n  importo         Float\n\n  commessaId      String\n  commessa        Commessa      @relation(fields: [commessaId], references: [id], onDelete: Cascade)\n  voceAnaliticaId String\n  voceAnalitica   VoceAnalitica @relation(fields: [voceAnaliticaId], references: [id], onDelete: Cascade)\n\n  @@unique([commessaId, voceAnaliticaId])\n}\n\n// --- MODELLI TRANSAZIONALI (CONTABILITA') ---\n\nmodel ScritturaContabile {\n  id              String    @id @default(cuid())\n  externalId      String?   @unique\n  data            DateTime?  @default(now())\n  dataDocumento   DateTime?\n  numeroDocumento String?\n  causaleId       String?\n  descrizione     String\n  datiAggiuntivi  Json?\n\n  fornitoreId     String?\n  fornitore       Fornitore? @relation(fields: [fornitoreId], references: [id])\n\n  righe           RigaScrittura[]\n}\n\nmodel RigaScrittura {\n  id                   String        @id @default(cuid())\n  descrizione          String\n  dare                 Float\n  avere                Float\n\n  contoId              String\n  conto                Conto         @relation(fields: [contoId], references: [id])\n\n  scritturaContabileId String\n  scritturaContabile   ScritturaContabile @relation(fields: [scritturaContabileId], references: [id], onDelete: Cascade)\n\n  allocazioni          Allocazione[]\n  righeIva             RigaIva[]\n}\n\nmodel Allocazione {\n  id                String        @id @default(cuid())\n  importo           Float\n  descrizione       String?\n\n  rigaScritturaId   String\n  rigaScrittura     RigaScrittura @relation(fields: [rigaScritturaId], references: [id], onDelete: Cascade)\n\n  commessaId        String\n  commessa          Commessa      @relation(fields: [commessaId], references: [id])\n\n  voceAnaliticaId   String\n  voceAnalitica     VoceAnalitica @relation(fields: [voceAnaliticaId], references: [id])\n}\n\nmodel CodiceIva {\n  id          String    @id\n  externalId  String?   @unique\n  descrizione String\n  aliquota    Float\n  righeIva    RigaIva[]\n}\n\nmodel CondizionePagamento {\n  id          String  @id\n  externalId  String? @unique\n  descrizione String\n}\n\nmodel RigaIva {\n  id              String      @id @default(cuid())\n  imponibile      Float\n  imposta         Float\n  codiceIvaId     String\n  codiceIva       CodiceIva   @relation(fields: [codiceIvaId], references: [id])\n  rigaScritturaId String\n  rigaScrittura   RigaScrittura @relation(fields: [rigaScritturaId], references: [id], onDelete: Cascade)\n}\n\n// --- MODELLI PER LA CONFIGURAZIONE DEGLI AUTOMATISMI ---\n\nmodel CausaleContabile {\n  id                String   @id\n  externalId        String?  @unique\n  nome              String   @unique\n  descrizione       String\n\n  datiPrimari       CampoDatiPrimari[]\n  templateScrittura VoceTemplateScrittura[]\n}\n\nmodel CampoDatiPrimari {\n  id                 String     @id @default(cuid())\n  fieldId            String // es: 'totaleDocumento'\n  label              String\n  tipo               TipoCampo\n  riferimentoConto   TipoConto?\n\n  causaleId          String\n  causale            CausaleContabile @relation(fields: [causaleId], references: [id], onDelete: Cascade)\n\n  @@unique([causaleId, fieldId])\n}\n\nmodel VoceTemplateScrittura {\n  id                            String         @id @default(cuid())\n  sezione                       SezioneScrittura\n  contoId                       String?\n  contoRiferimentoDatiPrimari   String?        // Es: 'fornitoreId', 'clienteId'\n  formulaImporto                FormulaImporto\n\n  causaleId                     String\n  causale                       CausaleContabile @relation(fields: [causaleId], references: [id], onDelete: Cascade)\n}\n\n// Modelli per l'importazione dinamica\nmodel ImportTemplate {\n  id     String @id @default(cuid())\n  nome   String @unique // Es. \"causali\", \"clienti_fornitori\"\n  modelName String? // Es. \"causaleContabile\", \"cliente\". Se nullo, gestito da logica custom.\n  \n  fields FieldDefinition[]\n}\n\nmodel FieldDefinition {\n  id        String  @id @default(cuid())\n  nomeCampo String  // Es. \"externalId\", \"descrizione\"\n  start     Int\n  length    Int\n  type      String  @default(\"string\") // 'string' | 'number' | 'date'\n  \n  fileIdentifier String? // Es. \"PNTESTA.TXT\", \"PNRIGCON.TXT\"\n\n  templateId String\n  template   ImportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)\n}"
    },
    {
      "name": "seed.ts",
      "type": "file",
      "token_estimate": 4499,
      "content": "// prisma/seed.ts (versione finale e robusta)\n\nimport { PrismaClient, TipoConto, TipoCampo, SezioneScrittura, FormulaImporto } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nconst SYSTEM_CUSTOMER_ID = 'system_customer_01';\nconst SYSTEM_SUPPLIER_ID = 'system_supplier_01';\n\nasync function main() {\n  console.log('Inizio seeding...');\n\n  // 1. Pulisce i dati esistenti per evitare duplicati (ordine importante!)\n  console.log('Pulizia tabelle...');\n  await prisma.allocazione.deleteMany({});\n  await prisma.rigaScrittura.deleteMany({});\n  await prisma.scritturaContabile.deleteMany({});\n  await prisma.budgetVoce.deleteMany({});\n  await prisma.commessa.deleteMany({});\n  await prisma.voceTemplateScrittura.deleteMany({});\n  await prisma.campoDatiPrimari.deleteMany({});\n  await prisma.causaleContabile.deleteMany({});\n  await prisma.conto.deleteMany({});\n  await prisma.voceAnalitica.deleteMany({});\n  await prisma.fornitore.deleteMany({});\n  await prisma.cliente.deleteMany({});\n  await prisma.importTemplate.deleteMany({});\n  await prisma.fieldDefinition.deleteMany({});\n  await prisma.condizionePagamento.deleteMany({});\n  await prisma.codiceIva.deleteMany({});\n\n  // 1. Crea o aggiorna il cliente di sistema\n  await prisma.cliente.upsert({\n    where: { id: SYSTEM_CUSTOMER_ID },\n    update: {},\n    create: {\n      id: SYSTEM_CUSTOMER_ID,\n      externalId: 'SYS-CUST',\n      nome: 'Cliente di Sistema (per importazioni)',\n    }\n  });\n\n  await prisma.fornitore.upsert({\n    where: { id: SYSTEM_SUPPLIER_ID },\n    update: {},\n    create: {\n      id: SYSTEM_SUPPLIER_ID,\n      externalId: 'SYS-SUPP',\n      nome: 'Fornitore di Sistema (per importazioni)',\n    }\n  });\n\n  console.log('Cliente e Fornitore di sistema assicurati.');\n\n  // --- TEMPLATE DI IMPORTAZIONE ---\n  console.log('Seeding Template di Importazione...');\n  \n  await prisma.importTemplate.create({\n    data: {\n      nome: 'causali',\n      modelName: 'CausaleContabile',\n      fields: { create: [\n        { nomeCampo: 'externalId', start: 4, length: 6, type: 'string' },             // [5-10] Codice causale\n        { nomeCampo: 'nome', start: 10, length: 40, type: 'string' },                 // [11-50] Descrizione\n        { nomeCampo: 'tipoMovimento', start: 50, length: 1, type: 'string' },         // [51-51] C=Contabile, I=Contabile/Iva\n        { nomeCampo: 'tipoAggiornamento', start: 51, length: 1, type: 'string' },     // [52-52] I/P/F\n        { nomeCampo: 'dataInizio', start: 52, length: 8, type: 'date' },              // [53-60] GGMMAAAA\n        { nomeCampo: 'dataFine', start: 60, length: 8, type: 'date' },                // [61-68] GGMMAAAA\n        { nomeCampo: 'tipoRegistroIva', start: 68, length: 1, type: 'string' },       // [69-69] A/C/V\n        { nomeCampo: 'noteMovimento', start: 101, length: 60, type: 'string' }        // [102-161]\n      ] },\n    }\n  });\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'condizioni_pagamento',\n      modelName: 'CondizionePagamento',\n      fields: { create: [\n        { nomeCampo: 'externalId', start: 4, length: 8, type: 'string' },             // [5-12] Codice pagamento\n        { nomeCampo: 'descrizione', start: 12, length: 40, type: 'string' },          // [13-52] Descrizione\n        { nomeCampo: 'contoIncassoPagamento', start: 52, length: 10, type: 'string' }, // [53-62]\n        { nomeCampo: 'suddivisione', start: 64, length: 1, type: 'string' },          // [65-65] D/T\n        { nomeCampo: 'inizioScadenza', start: 65, length: 1, type: 'string' },        // [66-66] D/F/R/P/N\n        { nomeCampo: 'numeroRate', start: 66, length: 2, type: 'number' }             // [67-68]\n      ] },\n    }\n  });\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'codici_iva',\n      modelName: 'CodiceIva',\n      fields: { create: [\n        { nomeCampo: 'externalId', start: 4, length: 4, type: 'string' },             // [5-8] Codice IVA\n        { nomeCampo: 'descrizione', start: 8, length: 40, type: 'string' },           // [9-48] Descrizione\n        { nomeCampo: 'tipoCalcolo', start: 48, length: 1, type: 'string' },           // [49-49] N/O/A/I/S/T/E/V\n        { nomeCampo: 'aliquota', start: 49, length: 6, type: 'number' },              // [50-55] 999.99\n        { nomeCampo: 'indetraibilita', start: 55, length: 3, type: 'number' },        // [56-58] Percentuale\n        { nomeCampo: 'note', start: 58, length: 40, type: 'string' },                 // [59-98]\n        { nomeCampo: 'dataInizio', start: 98, length: 8, type: 'date' },              // [99-106] GGMMAAAA\n        { nomeCampo: 'dataFine', start: 106, length: 8, type: 'date' }                // [107-114] GGMMAAAA\n      ] },\n    }\n  });\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'anagrafica_clifor',\n      modelName: 'Cliente', // Gestirà entrambi tramite logica custom\n      fields: { create: [\n        { nomeCampo: 'externalId', start: 20, length: 12, type: 'string' },           // [21-32]\n        { nomeCampo: 'codiceFiscale', start: 32, length: 16, type: 'string' },        // [33-48]\n        { nomeCampo: 'tipoConto', start: 49, length: 1, type: 'string' },             // [50-50] C/F/E\n        { nomeCampo: 'piva', start: 82, length: 11, type: 'string' },                 // [83-93]\n        { nomeCampo: 'nome', start: 94, length: 60, type: 'string' },                 // [95-154]\n        { nomeCampo: 'cognome', start: 154, length: 20, type: 'string' },             // [155-174]\n        { nomeCampo: 'nomePersona', start: 174, length: 20, type: 'string' },         // [175-194]\n        { nomeCampo: 'sesso', start: 194, length: 1, type: 'string' },                // [195-195]\n        { nomeCampo: 'dataNascita', start: 195, length: 8, type: 'date' },            // [196-203] GGMMAAAA\n        { nomeCampo: 'indirizzo', start: 216, length: 30, type: 'string' }            // [217-246]\n      ] },\n    }\n  });\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'piano_dei_conti',\n      modelName: 'Conto',\n      fields: { create: [\n        { nomeCampo: 'livello', start: 4, length: 1, type: 'string' },                // [5-5] 1=Mastro, 2=Conto, 3=Sottoconto\n        { nomeCampo: 'codice', start: 5, length: 10, type: 'string' },                // [6-15] MMCCSSSSSS\n        { nomeCampo: 'nome', start: 15, length: 60, type: 'string' },                 // [16-75] Descrizione\n        { nomeCampo: 'tipo', start: 75, length: 1, type: 'string' },                  // [76-76] P/E/O/C/F\n        { nomeCampo: 'sigla', start: 76, length: 12, type: 'string' },                // [77-88]\n        { nomeCampo: 'controlloSegno', start: 88, length: 1, type: 'string' },        // [89-89] A=Avere, D=Dare\n        { nomeCampo: 'gruppo', start: 256, length: 1, type: 'string' }                // [257-257] A/C/N/P/R/V/Z\n      ] },\n    }\n  });\n\n  const scrittureContabiliFields: any = [\n    // === PNTESTA.TXT (445 bytes) ===\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'externalId', start: 20, length: 12, type: 'string' },              // [21-32]\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'causaleId', start: 39, length: 6, type: 'string' },                // [40-45]\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'dataRegistrazione', start: 85, length: 8, type: 'date' },          // [86-93] GGMMAAAA\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'clienteFornitoreCodiceFiscale', start: 99, length: 16, type: 'string' }, // [100-115]\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'dataDocumento', start: 128, length: 8, type: 'date' },             // [129-136] GGMMAAAA\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'numeroDocumento', start: 136, length: 12, type: 'string' },        // [137-148]\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'totaleDocumento', start: 172, length: 12, type: 'number' },        // [173-184]\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'noteMovimento', start: 192, length: 60, type: 'string' },          // [193-252]\n\n    // === PNRIGCON.TXT (312 bytes) ===\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'externalId', start: 3, length: 12, type: 'string' },              // [4-15]\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'progressivoRigo', start: 15, length: 3, type: 'number' },         // [16-18]\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'tipoConto', start: 18, length: 1, type: 'string' },               // [19-19] C/F/spazio\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'clienteFornitoreCodiceFiscale', start: 19, length: 16, type: 'string' }, // [20-35]\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'conto', start: 48, length: 10, type: 'string' },                  // [49-58]\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'importoDare', start: 58, length: 12, type: 'number' },            // [59-70]\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'importoAvere', start: 70, length: 12, type: 'number' },           // [71-82]\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'note', start: 82, length: 60, type: 'string' },                   // [83-142]\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'movimentiAnalitici', start: 247, length: 1, type: 'string' },     // [248-248] 0/1\n\n    // === PNRIGIVA.TXT (173 bytes) ===\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'externalId', start: 3, length: 12, type: 'string' },              // [4-15]\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'codiceIva', start: 15, length: 4, type: 'string' },               // [16-19]\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'contropartita', start: 19, length: 10, type: 'string' },          // [20-29]\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'imponibile', start: 29, length: 12, type: 'number' },             // [30-41]\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'imposta', start: 41, length: 12, type: 'number' },                // [42-53]\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'importoLordo', start: 89, length: 12, type: 'number' },           // [90-101]\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'note', start: 101, length: 60, type: 'string' },                  // [102-161]\n\n    // === MOVANAC.TXT (34 bytes) ===\n    { fileIdentifier: 'MOVANAC.TXT', nomeCampo: 'externalId', start: 3, length: 12, type: 'string' },               // [4-15]\n    { fileIdentifier: 'MOVANAC.TXT', nomeCampo: 'progressivoRigoContabile', start: 15, length: 3, type: 'number' }, // [16-18]\n    { fileIdentifier: 'MOVANAC.TXT', nomeCampo: 'centroDiCosto', start: 18, length: 4, type: 'string' },            // [19-22]\n    { fileIdentifier: 'MOVANAC.TXT', nomeCampo: 'parametro', start: 22, length: 12, type: 'number' }                // [23-34]\n  ];\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'scritture_contabili',\n      modelName: null,\n      fields: { create: scrittureContabiliFields },\n    },\n  });\n\n\n  // --- ANAGRAFICHE DI BASE ---\n  console.log('Seeding Clienti e Fornitori...');\n  const clienteDefault = await prisma.cliente.create({\n    data: { id: 'cl_rossi', nome: 'Mario Rossi SRL', piva: '01234567890', externalId: 'CLI-001' },\n  });\n\n  await prisma.fornitore.create({\n    data: { id: 'for_bianchi', nome: 'Fratelli Bianchi SPA', piva: '09876543210', externalId: 'FOR-001' },\n  });\n\n  await prisma.fornitore.create({\n    data: { id: 'for_carburanti', nome: 'Carburanti Express SRL', piva: '11223344556', externalId: 'FOR-002' },\n  });\n\n  // --- VOCI ANALITICHE ---\n  console.log('Seeding Voci Analitiche...');\n  const vociAnalitiche = [\n    { id: '1', nome: 'Ricavi Vendite', descrizione: 'Ricavi derivanti dalla vendita di prodotti/servizi' },\n    { id: '2', nome: 'Gestione Automezzi', descrizione: 'Costi per la manutenzione e gestione della flotta' },\n    { id: '3', nome: 'Gestione Attrezzature' },\n    { id: '4', nome: 'Sacchi e Bidoni' },\n    { id: '5', nome: 'Servizi Esternalizzati' },\n    { id: '6', nome: 'Pulizia Strade e Diserbo' },\n    { id: '7', nome: 'Gestione Aree Operative' },\n    { id: '8', nome: 'Amm. Automezzi' },\n    { id: '9', nome: 'Amm. Attrezzature' },\n    { id: '10', nome: 'Locazione Sedi e Aree' },\n    { id: '11', nome: 'Trasporti Esternalizzati' },\n    { id: '12', nome: 'Spese Generali e Amministrative' },\n    { id: '13', nome: 'Selezione e Trattamento Rifiuti' },\n    { id: '14', nome: 'Conferimento Organico e Sfalci' },\n    { id: '15', nome: 'Fioriture e Verde Pubblico' },\n  ];\n  for (const voce of vociAnalitiche) {\n    await prisma.voceAnalitica.upsert({ where: { id: voce.id }, update: voce, create: voce });\n  }\n\n  // --- PIANO DEI CONTI ---\n  console.log('Seeding Piano dei Conti...');\n  const pianoDeiConti = [\n    // Costi\n    { id: '60100001', codice: '60100001', nome: 'MERCE C/ACQUISTI', tipo: TipoConto.Costo, richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '12' },\n    { id: '6005000150', codice: '6005000150', nome: 'ACQUISTI MATERIALE DI CONSUMO', tipo: TipoConto.Costo, richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '12' },\n    { id: '6005000350', codice: '6005000350', nome: 'ACQUISTO FIORI E PIANTE', tipo: TipoConto.Costo, richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '15' },\n    { id: '60100002', codice: '60100002', nome: 'ACQUISTI PRESTAZIONI DI SERVIZI', tipo: TipoConto.Costo, richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '5' },\n    // Ricavi\n    { id: '5510001122', codice: '5510001122', nome: 'RICAVI DA CONVENZIONE', tipo: TipoConto.Ricavo, richiedeVoceAnalitica: false },\n    { id: '5510001121', codice: '5510001121', nome: 'RICAVI DA RACCOLTA DIFFERENZIATA', tipo: TipoConto.Ricavo, richiedeVoceAnalitica: true },\n    // Patrimoniali\n    { id: '45.01.001', codice: '45.01.001', nome: 'IVA NS/CREDITO', tipo: TipoConto.Patrimoniale, richiedeVoceAnalitica: false },\n    { id: '45.02.001', codice: '45.02.001', nome: 'IVA NS/DEBITO', tipo: TipoConto.Patrimoniale, richiedeVoceAnalitica: false },\n    { id: '10.01.001', codice: '10.01.001', nome: 'BANCA INTESA SANPAOLO', tipo: TipoConto.Patrimoniale, richiedeVoceAnalitica: false },\n  ];\n  for (const contoData of pianoDeiConti) {\n    await prisma.conto.upsert({ \n        where: { id: contoData.id }, \n        update: { ...contoData, vociAnaliticheAbilitateIds: [], contropartiteSuggeriteIds: [] }, \n        create: { ...contoData, vociAnaliticheAbilitateIds: [], contropartiteSuggeriteIds: [] } \n    });\n  }\n\n  // --- CAUSALI CONTABILI ---\n  console.log('Seeding Causali Contabili...');\n  const causaliContabili = [\n    {\n      id: 'FATT_ACQ',\n      nome: 'Fattura Acquisto',\n      descrizione: 'Registrazione fattura di acquisto',\n      datiPrimari: [ { fieldId: 'fornitoreId', label: 'Fornitore', tipo: TipoCampo.select, riferimentoConto: TipoConto.Fornitore }, { fieldId: 'totaleDocumento', label: 'Totale Fattura', tipo: TipoCampo.number } ],\n      templateScrittura: [ \n        { sezione: SezioneScrittura.Dare, contoId: '60100001', formulaImporto: FormulaImporto.imponibile }, \n        { sezione: SezioneScrittura.Dare, contoId: '45.01.001', formulaImporto: FormulaImporto.iva }, \n        { sezione: SezioneScrittura.Avere, contoId: null, contoRiferimentoDatiPrimari: 'fornitoreId', formulaImporto: FormulaImporto.totale } \n      ],\n    },\n    {\n      id: 'FATT_VEN',\n      nome: 'Fattura Vendita',\n      descrizione: 'Registrazione fattura di vendita',\n      datiPrimari: [ { fieldId: 'clienteId', label: 'Cliente', tipo: TipoCampo.select, riferimentoConto: TipoConto.Cliente }, { fieldId: 'totaleDocumento', label: 'Totale Fattura', tipo: TipoCampo.number } ],\n      templateScrittura: [ \n        { sezione: SezioneScrittura.Dare, contoId: null, contoRiferimentoDatiPrimari: 'clienteId', formulaImporto: FormulaImporto.totale }, \n        { sezione: SezioneScrittura.Avere, contoId: '45.02.001', formulaImporto: FormulaImporto.iva }, \n        { sezione: SezioneScrittura.Avere, contoId: '5510001122', formulaImporto: FormulaImporto.imponibile } \n      ],\n    },\n    { id: 'MANUALE', nome: 'Manuale', descrizione: 'Registrazione manuale' },\n  ];\n\n  for (const causale of causaliContabili) {\n    const { datiPrimari, templateScrittura, ...causaleData } = causale;\n    await prisma.causaleContabile.upsert({\n      where: { id: causaleData.id },\n      update: {\n        ...causaleData,\n        datiPrimari: datiPrimari ? { deleteMany: {}, create: datiPrimari } : undefined,\n        templateScrittura: templateScrittura ? { deleteMany: {}, create: templateScrittura } : undefined,\n      },\n      create: {\n        ...causaleData,\n        datiPrimari: datiPrimari ? { create: datiPrimari } : undefined,\n        templateScrittura: templateScrittura ? { create: templateScrittura } : undefined,\n      },\n    });\n  }\n\n  // --- COMMESSE E BUDGET ---\n  console.log('Seeding Commesse e Budget...');\n  const commesse = [\n    { id: 'SORRENTO_2025', nome: 'Comune di Sorrento (2025)', clienteId: clienteDefault.id, budget: [ { voceAnaliticaId: '1', importo: 2274867 }, { voceAnaliticaId: '2', importo: 358625 }, { voceAnaliticaId: '12', importo: 307000 }] },\n    { id: 'PIANO_SORR_2025', nome: 'Comune di Piano di Sorrento (2025)', clienteId: clienteDefault.id, budget: [ { voceAnaliticaId: '1', importo: 1000000 }, { voceAnaliticaId: '2', importo: 150000 }] },\n  ];\n\n  for (const commessa of commesse) {\n    const { budget, ...commessaData } = commessa;\n    const createdCommessa = await prisma.commessa.upsert({\n      where: { id: commessaData.id },\n      update: commessaData,\n      create: commessaData,\n    });\n    if (budget && Array.isArray(budget)) {\n      await prisma.budgetVoce.deleteMany({ where: { commessaId: createdCommessa.id }});\n      for (const voce of budget) {\n        if (voce.voceAnaliticaId && voce.importo) {\n          await prisma.budgetVoce.create({\n            data: { importo: voce.importo, commessaId: createdCommessa.id, voceAnaliticaId: voce.voceAnaliticaId },\n          });\n        }\n      }\n    }\n  }\n\n  console.log('Seeding completato.');\n}\n\nmain()\n  .catch((e) => {\n    console.error('ERRORE DURANTE IL SEEDING:', e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });"
    },
    {
      "name": "seed.ts.bak",
      "type": "file",
      "token_estimate": 3470,
      "content": "// prisma/seed.ts (versione finale e robusta)\n\nimport { PrismaClient, TipoConto, TipoCampo, SezioneScrittura, FormulaImporto } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nconst SYSTEM_CUSTOMER_ID = 'system_customer_01';\nconst SYSTEM_SUPPLIER_ID = 'system_supplier_01';\n\nasync function main() {\n  console.log('Inizio seeding...');\n\n  // 1. Pulisce i dati esistenti per evitare duplicati (ordine importante!)\n  console.log('Pulizia tabelle...');\n  await prisma.allocazione.deleteMany({});\n  await prisma.rigaScrittura.deleteMany({});\n  await prisma.scritturaContabile.deleteMany({});\n  await prisma.budgetVoce.deleteMany({});\n  await prisma.commessa.deleteMany({});\n  await prisma.voceTemplateScrittura.deleteMany({});\n  await prisma.campoDatiPrimari.deleteMany({});\n  await prisma.causaleContabile.deleteMany({});\n  await prisma.conto.deleteMany({});\n  await prisma.voceAnalitica.deleteMany({});\n  await prisma.fornitore.deleteMany({});\n  await prisma.cliente.deleteMany({});\n  await prisma.importTemplate.deleteMany({});\n  await prisma.fieldDefinition.deleteMany({});\n  await prisma.condizionePagamento.deleteMany({});\n  await prisma.codiceIva.deleteMany({});\n\n  // 1. Crea o aggiorna il cliente di sistema\n  await prisma.cliente.upsert({\n    where: { id: SYSTEM_CUSTOMER_ID },\n    update: {},\n    create: {\n      id: SYSTEM_CUSTOMER_ID,\n      externalId: 'SYS-CUST',\n      nome: 'Cliente di Sistema (per importazioni)',\n    }\n  });\n\n  await prisma.fornitore.upsert({\n    where: { id: SYSTEM_SUPPLIER_ID },\n    update: {},\n    create: {\n      id: SYSTEM_SUPPLIER_ID,\n      externalId: 'SYS-SUPP',\n      nome: 'Fornitore di Sistema (per importazioni)',\n    }\n  });\n\n  console.log('Cliente e Fornitore di sistema assicurati.');\n\n  // --- TEMPLATE DI IMPORTAZIONE ---\n  console.log('Seeding Template di Importazione...');\n  \n  await prisma.importTemplate.create({\n    data: {\n      nome: 'causali',\n      modelName: 'CausaleContabile',\n      fields: { create: [ { nomeCampo: 'id', start: 0, length: 8 }, { nomeCampo: 'externalId', start: 0, length: 8 }, { nomeCampo: 'descrizione', start: 8, length: 40 } ] },\n    }\n  });\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'condizioni_pagamento',\n      modelName: 'CondizionePagamento',\n      fields: { create: [ { nomeCampo: 'id', start: 0, length: 8 }, { nomeCampo: 'externalId', start: 0, length: 8 }, { nomeCampo: 'descrizione', start: 8, length: 40 } ] },\n    }\n  });\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'codici_iva',\n      modelName: 'CodiceIva',\n      fields: { create: [ { nomeCampo: 'id', start: 0, length: 5 }, { nomeCampo: 'externalId', start: 0, length: 5 }, { nomeCampo: 'descrizione', start: 5, length: 45 } ] },\n    }\n  });\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'clienti_fornitori',\n      modelName: 'Cliente', // Gestirà entrambi tramite logica custom\n      fields: { create: [ { nomeCampo: 'externalId', start: 11, length: 11 }, { nomeCampo: 'codiceFiscale', start: 22, length: 16 }, { nomeCampo: 'tipo', start: 38, length: 1 }, { nomeCampo: 'piva', start: 50, length: 16 }, { nomeCampo: 'nome', start: 66, length: 50 } ] },\n    }\n  });\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'anagrafica_clifor',\n      modelName: 'Cliente', // Gestirà entrambi tramite logica custom\n      fields: { create: [ \n        { nomeCampo: 'id_interno', start: 16, length: 12 }, \n        { nomeCampo: 'codice_fiscale_piva', start: 28, length: 16 }, \n        { nomeCampo: 'tipo_soggetto', start: 44, length: 1 }, \n        { nomeCampo: 'conto_contabile', start: 57, length: 10 }, \n        { nomeCampo: 'codice_esterno', start: 67, length: 12 }, \n        { nomeCampo: 'codice_numerico', start: 79, length: 12 }, \n        { nomeCampo: 'ragione_sociale', start: 91, length: 50 }, \n        { nomeCampo: 'cognome', start: 141, length: 20 }, \n        { nomeCampo: 'nome', start: 161, length: 20 }, \n        { nomeCampo: 'sesso', start: 181, length: 1 }, \n        { nomeCampo: 'data_nascita', start: 182, length: 8, type: 'date' }, \n        { nomeCampo: 'comune_nascita', start: 190, length: 4 }, \n        { nomeCampo: 'cap', start: 194, length: 8 }, \n        { nomeCampo: 'indirizzo', start: 202, length: 50 } \n      ] },\n    }\n  });\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'piano_dei_conti',\n      modelName: 'Conto',\n      fields: { create: [ \n        { nomeCampo: 'id', start: 45, length: 10 }, \n        { nomeCampo: 'nome', start: 91, length: 50 }, \n        { nomeCampo: 'tipo_soggetto', start: 44, length: 1 } // Usato per filtrare\n      ] },\n    }\n  });\n\n  const scrittureContabiliFields: any = [\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'id_registrazione', start: 20, length: 12 },\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'data_registrazione', start: 33, length: 8, type: 'date' },\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'codice_causale', start: 41, length: 6 },\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'data_documento', start: 56, length: 8, type: 'date' },\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'id_cliente_fornitore', start: 64, length: 16 },\n    { fileIdentifier: 'PNTESTA.TXT', nomeCampo: 'numero_documento', start: 96, length: 16 },\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'id_registrazione_riga', start: 0, length: 15 },\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'codice_conto', start: 32, length: 16 },\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'importo_dare', start: 48, length: 16, type: 'number' },\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'importo_avere', start: 64, length: 16, type: 'number' },\n    { fileIdentifier: 'PNRIGCON.TXT', nomeCampo: 'descrizione_riga', start: 144, length: 81 },\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'id_registrazione_riga', start: 0, length: 15 },\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'codice_iva', start: 15, length: 5 },\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'imponibile', start: 36, length: 16, type: 'number' },\n    { fileIdentifier: 'PNRIGIVA.TXT', nomeCampo: 'imposta', start: 52, length: 16, type: 'number' },\n    { fileIdentifier: 'MOVANAC.TXT', nomeCampo: 'id_registrazione_riga', start: 0, length: 15 },\n    { fileIdentifier: 'MOVANAC.TXT', nomeCampo: 'codice_commessa', start: 15, length: 12 },\n    { fileIdentifier: 'MOVANAC.TXT', nomeCampo: 'codice_voce_analitica', start: 27, length: 12 },\n    { fileIdentifier: 'MOVANAC.TXT', nomeCampo: 'importo_allocato', start: 39, length: 16, type: 'number' },\n  ];\n\n  await prisma.importTemplate.create({\n    data: {\n      nome: 'scritture_contabili',\n      modelName: null,\n      fields: { create: scrittureContabiliFields },\n    },\n  });\n\n\n  // --- ANAGRAFICHE DI BASE ---\n  console.log('Seeding Clienti e Fornitori...');\n  const clienteDefault = await prisma.cliente.create({\n    data: { id: 'cl_rossi', nome: 'Mario Rossi SRL', piva: '01234567890', externalId: 'CLI-001' },\n  });\n\n  await prisma.fornitore.create({\n    data: { id: 'for_bianchi', nome: 'Fratelli Bianchi SPA', piva: '09876543210', externalId: 'FOR-001' },\n  });\n\n  await prisma.fornitore.create({\n    data: { id: 'for_carburanti', nome: 'Carburanti Express SRL', piva: '11223344556', externalId: 'FOR-002' },\n  });\n\n  // --- VOCI ANALITICHE ---\n  console.log('Seeding Voci Analitiche...');\n  const vociAnalitiche = [\n    { id: '1', nome: 'Ricavi Vendite', descrizione: 'Ricavi derivanti dalla vendita di prodotti/servizi' },\n    { id: '2', nome: 'Gestione Automezzi', descrizione: 'Costi per la manutenzione e gestione della flotta' },\n    { id: '3', nome: 'Gestione Attrezzature' },\n    { id: '4', nome: 'Sacchi e Bidoni' },\n    { id: '5', nome: 'Servizi Esternalizzati' },\n    { id: '6', nome: 'Pulizia Strade e Diserbo' },\n    { id: '7', nome: 'Gestione Aree Operative' },\n    { id: '8', nome: 'Amm. Automezzi' },\n    { id: '9', nome: 'Amm. Attrezzature' },\n    { id: '10', nome: 'Locazione Sedi e Aree' },\n    { id: '11', nome: 'Trasporti Esternalizzati' },\n    { id: '12', nome: 'Spese Generali e Amministrative' },\n    { id: '13', nome: 'Selezione e Trattamento Rifiuti' },\n    { id: '14', nome: 'Conferimento Organico e Sfalci' },\n    { id: '15', nome: 'Fioriture e Verde Pubblico' },\n  ];\n  for (const voce of vociAnalitiche) {\n    await prisma.voceAnalitica.upsert({ where: { id: voce.id }, update: voce, create: voce });\n  }\n\n  // --- PIANO DEI CONTI ---\n  console.log('Seeding Piano dei Conti...');\n  const pianoDeiConti = [\n    // Costi\n    { id: '60100001', codice: '60100001', nome: 'MERCE C/ACQUISTI', tipo: TipoConto.Costo, richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '12' },\n    { id: '6005000150', codice: '6005000150', nome: 'ACQUISTI MATERIALE DI CONSUMO', tipo: TipoConto.Costo, richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '12' },\n    { id: '6005000350', codice: '6005000350', nome: 'ACQUISTO FIORI E PIANTE', tipo: TipoConto.Costo, richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '15' },\n    { id: '60100002', codice: '60100002', nome: 'ACQUISTI PRESTAZIONI DI SERVIZI', tipo: TipoConto.Costo, richiedeVoceAnalitica: true, voceAnaliticaSuggeritaId: '5' },\n    // Ricavi\n    { id: '5510001122', codice: '5510001122', nome: 'RICAVI DA CONVENZIONE', tipo: TipoConto.Ricavo, richiedeVoceAnalitica: false },\n    { id: '5510001121', codice: '5510001121', nome: 'RICAVI DA RACCOLTA DIFFERENZIATA', tipo: TipoConto.Ricavo, richiedeVoceAnalitica: true },\n    // Patrimoniali\n    { id: '45.01.001', codice: '45.01.001', nome: 'IVA NS/CREDITO', tipo: TipoConto.Patrimoniale, richiedeVoceAnalitica: false },\n    { id: '45.02.001', codice: '45.02.001', nome: 'IVA NS/DEBITO', tipo: TipoConto.Patrimoniale, richiedeVoceAnalitica: false },\n    { id: '10.01.001', codice: '10.01.001', nome: 'BANCA INTESA SANPAOLO', tipo: TipoConto.Patrimoniale, richiedeVoceAnalitica: false },\n  ];\n  for (const contoData of pianoDeiConti) {\n    await prisma.conto.upsert({ \n        where: { id: contoData.id }, \n        update: { ...contoData, vociAnaliticheAbilitateIds: [], contropartiteSuggeriteIds: [] }, \n        create: { ...contoData, vociAnaliticheAbilitateIds: [], contropartiteSuggeriteIds: [] } \n    });\n  }\n\n  // --- CAUSALI CONTABILI ---\n  console.log('Seeding Causali Contabili...');\n  const causaliContabili = [\n    {\n      id: 'FATT_ACQ',\n      nome: 'Fattura Acquisto',\n      descrizione: 'Registrazione fattura di acquisto',\n      datiPrimari: [ { fieldId: 'fornitoreId', label: 'Fornitore', tipo: TipoCampo.select, riferimentoConto: TipoConto.Fornitore }, { fieldId: 'totaleDocumento', label: 'Totale Fattura', tipo: TipoCampo.number } ],\n      templateScrittura: [ \n        { sezione: SezioneScrittura.Dare, contoId: '60100001', formulaImporto: FormulaImporto.imponibile }, \n        { sezione: SezioneScrittura.Dare, contoId: '45.01.001', formulaImporto: FormulaImporto.iva }, \n        { sezione: SezioneScrittura.Avere, contoRiferimentoDatiPrimari: 'fornitoreId', formulaImporto: FormulaImporto.totale } \n      ],\n    },\n    {\n      id: 'FATT_VEN',\n      nome: 'Fattura Vendita',\n      descrizione: 'Registrazione fattura di vendita',\n      datiPrimari: [ { fieldId: 'clienteId', label: 'Cliente', tipo: TipoCampo.select, riferimentoConto: TipoConto.Cliente }, { fieldId: 'totaleDocumento', label: 'Totale Fattura', tipo: TipoCampo.number } ],\n      templateScrittura: [ \n        { sezione: SezioneScrittura.Dare, contoRiferimentoDatiPrimari: 'clienteId', formulaImporto: FormulaImporto.totale }, \n        { sezione: SezioneScrittura.Avere, contoId: '45.02.001', formulaImporto: FormulaImporto.iva }, \n        { sezione: SezioneScrittura.Avere, contoId: '5510001122', formulaImporto: FormulaImporto.imponibile } \n      ],\n    },\n    { id: 'MANUALE', nome: 'Manuale', descrizione: 'Registrazione manuale' },\n  ];\n\n  for (const causale of causaliContabili) {\n    const { datiPrimari, templateScrittura, ...causaleData } = causale;\n    await prisma.causaleContabile.upsert({\n      where: { id: causaleData.id },\n      update: {\n        ...causaleData,\n        datiPrimari: datiPrimari ? { deleteMany: {}, create: datiPrimari } : undefined,\n        templateScrittura: templateScrittura ? { deleteMany: {}, create: templateScrittura } : undefined,\n      },\n      create: {\n        ...causaleData,\n        datiPrimari: datiPrimari ? { create: datiPrimari } : undefined,\n        templateScrittura: templateScrittura ? { create: templateScrittura } : undefined,\n      },\n    });\n  }\n\n  // --- COMMESSE E BUDGET ---\n  console.log('Seeding Commesse e Budget...');\n  const commesse = [\n    { id: 'SORRENTO_2025', nome: 'Comune di Sorrento (2025)', clienteId: clienteDefault.id, budget: [ { voceAnaliticaId: '1', importo: 2274867 }, { voceAnaliticaId: '2', importo: 358625 }, { voceAnaliticaId: '12', importo: 307000 }] },\n    { id: 'PIANO_SORR_2025', nome: 'Comune di Piano di Sorrento (2025)', clienteId: clienteDefault.id, budget: [ { voceAnaliticaId: '1', importo: 1000000 }, { voceAnaliticaId: '2', importo: 150000 }] },\n  ];\n\n  for (const commessa of commesse) {\n    const { budget, ...commessaData } = commessa;\n    const createdCommessa = await prisma.commessa.upsert({\n      where: { id: commessaData.id },\n      update: commessaData,\n      create: commessaData,\n    });\n    if (budget && Array.isArray(budget)) {\n      await prisma.budgetVoce.deleteMany({ where: { commessaId: createdCommessa.id }});\n      for (const voce of budget) {\n        if (voce.voceAnaliticaId && voce.importo) {\n          await prisma.budgetVoce.create({\n            data: { importo: voce.importo, commessaId: createdCommessa.id, voceAnaliticaId: voce.voceAnaliticaId },\n          });\n        }\n      }\n    }\n  }\n\n  console.log('Seeding completato.');\n}\n\nmain()\n  .catch((e) => {\n    console.error('ERRORE DURANTE IL SEEDING:', e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });"
    },
    {
      "name": "tsconfig.json",
      "type": "file",
      "token_estimate": 52,
      "content": "{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\",\n    \"module\": \"CommonJS\",\n    \"target\": \"ES2020\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"resolveJsonModule\": true\n  }\n} "
    }
  ]
}