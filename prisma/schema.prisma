generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id              String     @id @default(cuid())
  externalId      String?    @unique
  nome            String
  piva            String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  codiceFiscale   String?
  cap             String?
  codicePagamento String?
  codiceValuta    String?
  cognome         String?
  comune          String?
  comuneNascita   String?
  dataNascita     DateTime?
  indirizzo       String?
  nazione         String?
  nomeAnagrafico  String?
  provincia       String?
  sesso           String?
  telefono        String?
  tipoAnagrafica  String?
  commesse        Commessa[]
  
  // === ESTENSIONI FASE 1 - PARSER PYTHON ===
  codiceAnagrafica             String?
  tipoConto                    String?
  tipoContoDesc                String?
  tipoSoggetto                 String?
  tipoSoggettoDesc             String?
  denominazione                String?
  sessoDesc                    String?
  prefissoTelefono             String?
  codiceIso                    String?
  idFiscaleEstero              String?
  
  // Sottoconti
  sottocontoAttivo             String?
  sottocontoCliente            String?
  sottocontoFornitore          String?
  
  // Codici Pagamento Specifici
  codiceIncassoCliente         String?
  codicePagamentoFornitore     String?
  
  // Flags Calcolati
  ePersonaFisica               Boolean?
  eCliente                     Boolean?
  eFornitore                   Boolean?
  haPartitaIva                 Boolean?
}

model Fornitore {
  id                          String               @id @default(cuid())
  externalId                  String?              @unique
  nome                        String
  piva                        String?
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  codiceFiscale               String?
  aliquota                    Float?
  attivitaMensilizzazione     Int?
  cap                         String?
  codicePagamento             String?
  codiceRitenuta              String?
  codiceValuta                String?
  cognome                     String?
  comune                      String?
  comuneNascita               String?
  contributoPrevidenziale     Boolean?
  contributoPrevidenzialeL335 String?
  dataNascita                 DateTime?
  enasarco                    Boolean?
  gestione770                 Boolean?
  indirizzo                   String?
  nazione                     String?
  nomeAnagrafico              String?
  percContributoCassaPrev     Float?
  provincia                   String?
  quadro770                   String?
  sesso                       String?
  soggettoInail               Boolean?
  soggettoRitenuta            Boolean?
  telefono                    String?
  tipoAnagrafica              String?
  tipoRitenuta                String?
  scritture                   ScritturaContabile[]
  
  // === ESTENSIONI FASE 1 - PARSER PYTHON ===
  codiceAnagrafica             String?
  tipoConto                    String?
  tipoContoDesc                String?
  tipoSoggetto                 String?
  tipoSoggettoDesc             String?
  denominazione                String?
  sessoDesc                    String?
  prefissoTelefono             String?
  codiceIso                    String?
  idFiscaleEstero              String?
  
  // Sottoconti
  sottocontoAttivo             String?
  sottocontoCliente            String?
  sottocontoFornitore          String?
  
  // Codici Pagamento Specifici
  codiceIncassoCliente         String?
  codicePagamentoFornitore     String?
  
  // Flags Calcolati
  ePersonaFisica               Boolean?
  eCliente                     Boolean?
  eFornitore                   Boolean?
  haPartitaIva                 Boolean?
  
  // Per Fornitore - Descrizioni aggiuntive
  quadro770Desc               String?
  tipoRitenuraDesc             String?
  contributoPrevid335Desc      String?
}

model VoceAnalitica {
  id          String        @id
  nome        String        @unique
  descrizione String?
  externalId  String?       @unique
  allocazioni Allocazione[]
  budgetItems BudgetVoce[]
  conti       Conto[]
}

model Conto {
  id                         String          @id
  codice                     String?         @unique
  nome                       String
  tipo                       TipoConto
  richiedeVoceAnalitica      Boolean         @default(false)
  vociAnaliticheAbilitateIds String[]
  contropartiteSuggeriteIds  String[]
  externalId                 String?         @unique
  voceAnaliticaId            String?
  voceAnalitica              VoceAnalitica?  @relation(fields: [voceAnaliticaId], references: [id])
  righeScrittura             RigaScrittura[]
  
  // === ESTENSIONI FASE 1 - PARSER PYTHON ===
  // Gerarchia e Classificazione
  livello                      String?
  livelloDesc                  String?
  sigla                        String?
  gruppo                       String?
  gruppoDesc                   String?
  controlloSegno               String?
  controlloSegnoDesc           String?
  codificaFormattata           String?
  
  // Validità per Tipo Contabilità
  validoImpresaOrdinaria       Boolean?
  validoImpresaSemplificata    Boolean?
  validoProfessionistaOrdinario Boolean?
  validoProfessionistaSemplificato Boolean?
  
  // Validità per Dichiarazioni Fiscali (NUOVI DA PARSER)
  validoUnicoPf                Boolean?
  validoUnicoSp                Boolean?
  validoUnicoSc                Boolean?
  validoUnicoEnc               Boolean?

  // Identificativo software di origine (NUOVO DA PARSER)
  tabellaItalstudio            String?
  
  // Classi Fiscali
  classeIrpefIres              String?
  classeIrap                   String?
  classeProfessionista         String?
  classeIrapProfessionista     String?
  classeIva                    String?
  
  // Conti Collegati
  contoCostiRicavi             String?
  contoDareCee                 String?
  contoAvereCee                String?
  
  // Gestione Speciale
  naturaConto                  String?
  gestioneBeniAmmortizzabili   String?
  percDeduzioneManutenzione    Float?
  dettaglioClienteFornitore    String?
  
  // Descrizioni Bilancio
  descrizioneBilancioDare      String?
  descrizioneBilancioAvere     String?
  
  // Dati Extracontabili
  classeDatiExtracontabili     String?
  
  // Registri Professionisti
  colonnaRegistroCronologico   String?
  colonnaRegistroIncassiPagamenti String?
}

model Commessa {
  id          String        @id
  nome        String        @unique
  clienteId   String
  descrizione String?
  externalId  String?       @unique
  parentId    String?
  allocazioni Allocazione[]
  importAllocazioni ImportAllocazione[]
  budget      BudgetVoce[]
  cliente     Cliente       @relation(fields: [clienteId], references: [id])
  parent      Commessa?     @relation("CommessaGerarchia", fields: [parentId], references: [id])
  children    Commessa[]    @relation("CommessaGerarchia")
}

model BudgetVoce {
  id              String        @id @default(cuid())
  importo         Float
  commessaId      String
  voceAnaliticaId String
  commessa        Commessa      @relation(fields: [commessaId], references: [id], onDelete: Cascade)
  voceAnalitica   VoceAnalitica @relation(fields: [voceAnaliticaId], references: [id], onDelete: Cascade)

  @@unique([commessaId, voceAnaliticaId])
}

model ScritturaContabile {
  id              String            @id @default(cuid())
  data            DateTime?         @default(now())
  causaleId       String?
  descrizione     String
  datiAggiuntivi  Json?
  externalId      String?           @unique
  fornitoreId     String?
  dataDocumento   DateTime?
  numeroDocumento String?
  righe           RigaScrittura[]
  causale         CausaleContabile? @relation(fields: [causaleId], references: [id])
  fornitore       Fornitore?        @relation(fields: [fornitoreId], references: [id])
}

model RigaScrittura {
  id                   String             @id @default(cuid())
  descrizione          String
  dare                 Float
  avere                Float
  contoId              String
  scritturaContabileId String
  allocazioni          Allocazione[]
  righeIva             RigaIva[]
  conto                Conto              @relation(fields: [contoId], references: [id])
  scritturaContabile   ScritturaContabile @relation(fields: [scritturaContabileId], references: [id], onDelete: Cascade)
}

model Allocazione {
  id              String        @id @default(cuid())
  importo         Float
  descrizione     String?
  rigaScritturaId String
  commessaId      String
  voceAnaliticaId String
  commessa        Commessa      @relation(fields: [commessaId], references: [id])
  rigaScrittura   RigaScrittura @relation(fields: [rigaScritturaId], references: [id], onDelete: Cascade)
  voceAnalitica   VoceAnalitica @relation(fields: [voceAnaliticaId], references: [id])
}

model CodiceIva {
  id                    String    @id @default(cuid())
  externalId            String?   @unique
  descrizione           String
  aliquota              Float?
  percentuale           Float?    // Campo allineato al parser Python
  natura                String?
  codiceExport          String?
  inUso                 Boolean?
  dataAggiornamento     DateTime?
  note                  String?
  indetraibilita        Float?
  codice                String?
  tipoCalcolo           String?
  tipoCalcoloDesc       String?
  dataInizio            DateTime?
  dataFine              DateTime?
  validitaInizio        DateTime? // Campo allineato al parser Python
  validitaFine          DateTime? // Campo allineato al parser Python
  splitPayment          Boolean?
  nonImponibile         Boolean?
  imponibile            Boolean?
  esente                Boolean?
  nonImponibileConPlafond Boolean?
  inSospensione         Boolean?
  esclusoDaIva          Boolean?
  reverseCharge         Boolean?
  fuoriCampoIva         Boolean?
  
  righeIva              RigaIva[]
  
  // === ESTENSIONI FASE 1 - PARSER PYTHON ===
  // Gestione Plafond
  plafondAcquisti              String?
  plafondAcquistiDesc          String?
  monteAcquisti                Boolean?
  plafondVendite               String?
  plafondVenditeDesc           String?
  noVolumeAffariPlafond        Boolean?
  
  // Pro-rata e Compensazioni
  gestioneProRata              String?
  gestioneProRataDesc          String?
  percentualeCompensazione     Float?
  
  // Reverse Charge e Operazioni Speciali
  autofatturaReverseCharge     Boolean?
  operazioneEsenteOccasionale  Boolean?
  cesArt38QuaterStornoIva      Boolean?
  agevolazioniSubforniture     Boolean?
  
  // Territorialità
  indicatoreTerritorialeVendite     String?
  indicatoreTerritorialeVenditeDesc String?
  indicatoreTerritorialeAcquisti    String?
  indicatoreTerritorialeAcquistiDesc String?
  
  // Beni Ammortizzabili
  beniAmmortizzabili           Boolean?
  analiticoBeniAmmortizzabili  Boolean?
  
  // Comunicazioni Dati IVA
  comunicazioneDatiIvaVendite     String?
  comunicazioneDatiIvaVenditeDesc String?
  comunicazioneDatiIvaAcquisti    String?
  comunicazioneDatiIvaAcquistiDesc String?
  
  // Altri Campi Fiscali
  imponibile50Corrispettivi    Boolean?
  imposteIntrattenimenti       String?
  imposteIntrattenimentiDesc   String?
  ventilazione                 Boolean?
  aliquotaDiversa              Float?
  percDetrarreExport           Float?
  acquistiCessioni             String?
  acquistiCessioniDesc         String?
  metodoDaApplicare            String?
  metodoDaApplicareDesc        String?
  percentualeForfetaria        String?
  percentualeForfetariaDesc    String?
  quotaForfetaria              String?
  quotaForfetariaDesc          String?
  acquistiIntracomunitari      Boolean?
  cessioneProdottiEditoriali   Boolean?
  provvigioniDm34099           Boolean?
  acqOperazImponibiliOccasionali Boolean?
}

model CondizionePagamento {
  id                    String  @id
  externalId            String? @unique
  descrizione           String
  codice                String? @unique
  contoIncassoPagamento String?
  inizioScadenza        String?
  numeroRate            Int?
  suddivisione          String?
  
  // === ESTENSIONI FASE 1 - PARSER PYTHON ===
  calcolaGiorniCommerciali     Boolean?
  consideraPeriodiChiusura     Boolean?
  suddivisioneDesc             String?
  inizioScadenzaDesc           String?
}

model RigaIva {
  id              String         @id @default(cuid())
  imponibile      Float
  imposta         Float
  codiceIvaId     String
  rigaScritturaId String?
  codiceIva       CodiceIva      @relation(fields: [codiceIvaId], references: [id])
  rigaScrittura   RigaScrittura? @relation(fields: [rigaScritturaId], references: [id], onDelete: Cascade)
}

model CausaleContabile {
  id                String               @id
  codice            String?              @unique
  descrizione       String
  externalId        String?              @unique
  nome              String?
  dataFine          DateTime?
  dataInizio        DateTime?
  noteMovimento     String?
  tipoAggiornamento String?
  tipoMovimento     String?
  tipoRegistroIva   String?
  scritture         ScritturaContabile[]
  
  // === ESTENSIONI FASE 1 - PARSER PYTHON ===
  // Descrizioni Decodificate
  tipoMovimentoDesc            String?
  tipoAggiornamentoDesc        String?
  tipoRegistroIvaDesc          String?
  
  // Gestione IVA
  segnoMovimentoIva            String?
  segnoMovimentoIvaDesc        String?
  contoIva                     String?
  contoIvaVendite              String?
  
  // Autofatture
  generazioneAutofattura       Boolean?
  tipoAutofatturaGenerata      String?
  tipoAutofatturaDesc          String?
  
  // Gestione Fatture
  fatturaImporto0              Boolean?
  fatturaValutaEstera          Boolean?
  nonConsiderareLiquidazioneIva Boolean?
  fatturaEmessaRegCorrispettivi Boolean?
  
  // IVA Esigibilità
  ivaEsigibilitaDifferita      String?
  ivaEsigibilitaDifferitaDesc  String?
  
  // Gestioni Speciali
  gestionePartite              String?
  gestionePartiteDesc          String?
  gestioneIntrastat            Boolean?
  gestioneRitenuteEnasarco     String?
  gestioneRitenuteEnasarcoDesc String?
  versamentoRitenute           Boolean?
  
  // Documenti e Registrazioni
  descrizioneDocumento         String?
  identificativoEsteroClifor   Boolean?
  scritturaRettificaAssestamento Boolean?
  nonStampareRegCronologico    Boolean?
  movimentoRegIvaNonRilevante  Boolean?
  
  // Contabilità Semplificata
  tipoMovimentoSemplificata    String?
  tipoMovimentoSemplificataDesc String?
}

model CampoDatiPrimari {
  id             String                @id @default(cuid())
  tipo           TipoCampo
  descrizione    String
  nome           String                @unique
  opzioni        String[]
  voceTemplateId String
  voceTemplate   VoceTemplateScrittura @relation(fields: [voceTemplateId], references: [id])
}

model VoceTemplateScrittura {
  id             String             @id @default(cuid())
  sezione        SezioneScrittura
  formulaImporto FormulaImporto?
  descrizione    String
  templateId     String
  campi          CampoDatiPrimari[]
  template       ImportTemplate     @relation(fields: [templateId], references: [id])
}

model ImportTemplate {
  id               String                  @id @default(cuid())
  modelName        String?
  fileIdentifier   String?
  name             String?                 @unique
  fieldDefinitions FieldDefinition[]
  voci             VoceTemplateScrittura[]
}

model FieldDefinition {
  id             String         @id @default(cuid())
  start          Int
  length         Int
  end            Int
  templateId     String
  fileIdentifier String?
  fieldName      String?
  format         String?
  template       ImportTemplate @relation(fields: [templateId], references: [id])
}

model ImportLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  templateName String
  fileName     String
  status       String
  details      String?
  rowCount     Int
}

model WizardState {
  id        String   @id @default(cuid())
  userId    String   @unique
  step      String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImportScritturaTestata {
  id                             String                         @id @default(cuid())
  codiceUnivocoScaricamento      String                         @unique
  codiceCausale                 String
  descrizioneCausale            String
  dataRegistrazione             DateTime?
  tipoRegistroIva               String?
  clienteFornitoreCodiceFiscale String?
  clienteFornitoreSigla         String?
  dataDocumento                 DateTime?
  numeroDocumento               String?
  protocolloNumero              String?
  totaleDocumento               Float?
  noteMovimento                 String?
  righe                          ImportScritturaRigaContabile[]
  righeIva                       ImportScritturaRigaIva[]

  @@map("import_scritture_testate")
}

model ImportScritturaRigaContabile {
  id                             String              @id @default(cuid())
  codiceUnivocoScaricamento      String
  riga                           Int
  codiceConto                    String
  descrizioneConto               String
  importoDare                    Float?
  importoAvere                   Float?
  note                           String?
  insDatiMovimentiAnalitici      Boolean
  testata                        ImportScritturaTestata @relation(fields: [codiceUnivocoScaricamento], references: [codiceUnivocoScaricamento], onDelete: Cascade)
  allocazioni                    ImportAllocazione[]

  @@unique([codiceUnivocoScaricamento, riga])
}

model ImportAllocazione {
  id                             String                      @id @default(cuid())
  importo                        Float
  percentuale                    Float?
  suggerimentoAutomatico         Boolean                     @default(false)
  commessaId                     String
  importScritturaRigaContabileId String
  
  rigaContabile ImportScritturaRigaContabile @relation(fields: [importScritturaRigaContabileId], references: [id], onDelete: Cascade)
  commessa      Commessa                     @relation(fields: [commessaId], references: [id])

  @@map("import_allocazioni")
}

model ImportScritturaRigaIva {
  id                             String                 @id @default(cuid())
  codiceUnivocoScaricamento      String
  codiceIva                       String
  imponibile                      Float
  imposta                         Float
  codiceConto                     String?
  indetraibilita                  Float?
  riga                             Int
  testata                         ImportScritturaTestata @relation(fields: [codiceUnivocoScaricamento], references: [codiceUnivocoScaricamento], onDelete: Cascade)

  @@unique([codiceUnivocoScaricamento, riga])
}

enum TipoConto {
  Costo
  Ricavo
  Patrimoniale
  Fornitore
  Cliente
}

enum TipoCampo {
  number
  select
  text
  date
}

enum SezioneScrittura {
  Dare
  Avere
}

enum FormulaImporto {
  imponibile
  iva
  totale
}
