generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id              String     @id @default(cuid())
  externalId      String?    @unique
  nome            String
  piva            String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  codiceFiscale   String?
  cap             String?
  codicePagamento String?
  codiceValuta    String?
  cognome         String?
  comune          String?
  comuneNascita   String?
  dataNascita     DateTime?
  indirizzo       String?
  nazione         String?
  nomeAnagrafico  String?
  provincia       String?
  sesso           String?
  telefono        String?
  tipoAnagrafica  String?
  commesse        Commessa[]
}

model Fornitore {
  id                          String                   @id @default(cuid())
  externalId                  String?                  @unique
  nome                        String
  piva                        String?
  createdAt                   DateTime                 @default(now())
  updatedAt                   DateTime                 @updatedAt
  codiceFiscale               String?
  aliquota                    Float?
  attivitaMensilizzazione     Int?
  cap                         String?
  codicePagamento             String?
  codiceRitenuta              String?
  codiceValuta                String?
  cognome                     String?
  comune                      String?
  comuneNascita               String?
  contributoPrevidenziale     Boolean?
  contributoPrevidenzialeL335 String?
  dataNascita                 DateTime?
  enasarco                    Boolean?
  gestione770                 Boolean?
  indirizzo                   String?
  nazione                     String?
  nomeAnagrafico              String?
  percContributoCassaPrev     Float?
  provincia                   String?
  quadro770                   String?
  sesso                       String?
  soggettoInail               Boolean?
  soggettoRitenuta            Boolean?
  telefono                    String?
  tipoAnagrafica              String?
  tipoRitenuta                String?
  scritture                   ScritturaContabile[]
  ImportScritturaTestata      ImportScritturaTestata[]
}

model VoceAnalitica {
  id          String        @id
  nome        String        @unique
  descrizione String?
  externalId  String?       @unique
  allocazioni Allocazione[]
  budgetItems BudgetVoce[]
  conti       Conto[]
}

model Conto {
  id                         String          @id
  codice                     String?         @unique
  nome                       String
  tipo                       TipoConto
  richiedeVoceAnalitica      Boolean         @default(false)
  vociAnaliticheAbilitateIds String[]
  contropartiteSuggeriteIds  String[]
  externalId                 String?         @unique
  voceAnaliticaId            String?
  voceAnalitica              VoceAnalitica?  @relation(fields: [voceAnaliticaId], references: [id])
  righeScrittura             RigaScrittura[]
}

model Commessa {
  id                String        @id @default(cuid())
  nome              String
  clienteId         String
  cliente           Cliente       @relation(fields: [clienteId], references: [id])
  allocazioni       Allocazione[]
  budget            BudgetVoce[]
  dataCreazione     DateTime      @default(now())
  dataAggiornamento DateTime      @updatedAt
  externalId        String?       @unique
  commessaPadreId   String?
  commessaPadre     Commessa?     @relation("CommessaHierarchy", fields: [commessaPadreId], references: [id])
  sottocommesse     Commessa[]    @relation("CommessaHierarchy")
}

model BudgetVoce {
  id              String        @id @default(cuid())
  importo         Float
  commessaId      String
  voceAnaliticaId String
  commessa        Commessa      @relation(fields: [commessaId], references: [id], onDelete: Cascade)
  voceAnalitica   VoceAnalitica @relation(fields: [voceAnaliticaId], references: [id], onDelete: Cascade)

  @@unique([commessaId, voceAnaliticaId])
}

model ScritturaContabile {
  id              String            @id @default(cuid())
  data            DateTime?         @default(now())
  causaleId       String?
  descrizione     String
  datiAggiuntivi  Json?
  externalId      String?           @unique
  fornitoreId     String?
  dataDocumento   DateTime?
  numeroDocumento String?
  righe           RigaScrittura[]
  causale         CausaleContabile? @relation(fields: [causaleId], references: [id])
  fornitore       Fornitore?        @relation(fields: [fornitoreId], references: [id])
}

model RigaScrittura {
  id                   String             @id @default(cuid())
  descrizione          String
  dare                 Float
  avere                Float
  contoId              String
  scritturaContabileId String
  allocazioni          Allocazione[]
  righeIva             RigaIva[]
  conto                Conto              @relation(fields: [contoId], references: [id])
  scritturaContabile   ScritturaContabile @relation(fields: [scritturaContabileId], references: [id], onDelete: Cascade)
}

model Allocazione {
  id              String         @id @default(cuid())
  rigaScrittura   RigaScrittura  @relation(fields: [rigaScritturaId], references: [id], onDelete: Cascade)
  rigaScritturaId String
  importo         Float
  commessa        Commessa       @relation(fields: [commessaId], references: [id])
  commessaId      String
  voceAnalitica   VoceAnalitica? @relation(fields: [voceAnaliticaId], references: [id])
  voceAnaliticaId String?
}

model CodiceIva {
  id             String    @id
  externalId     String?   @unique
  descrizione    String
  aliquota       Float?
  indetraibilita Float?
  note           String?
  tipoCalcolo    String?
  dataFine       DateTime?
  dataInizio     DateTime?
  righeIva       RigaIva[]
}

model CondizionePagamento {
  id                    String  @id
  externalId            String? @unique
  descrizione           String
  codice                String? @unique
  contoIncassoPagamento String?
  inizioScadenza        String?
  numeroRate            Int?
  suddivisione          String?
}

model RigaIva {
  id              String         @id @default(cuid())
  imponibile      Float
  imposta         Float
  codiceIvaId     String
  rigaScritturaId String?
  codiceIva       CodiceIva      @relation(fields: [codiceIvaId], references: [id])
  rigaScrittura   RigaScrittura? @relation(fields: [rigaScritturaId], references: [id], onDelete: Cascade)
}

model CausaleContabile {
  id                     String                   @id
  descrizione            String
  externalId             String?                  @unique
  nome                   String?
  dataFine               DateTime?
  dataInizio             DateTime?
  noteMovimento          String?
  tipoAggiornamento      String?
  tipoMovimento          String?
  tipoRegistroIva        String?
  scritture              ScritturaContabile[]
  ImportScritturaTestata ImportScritturaTestata[]
}

model CampoDatiPrimari {
  id             String                @id @default(cuid())
  tipo           TipoCampo
  descrizione    String
  nome           String                @unique
  opzioni        String[]
  voceTemplateId String
  voceTemplate   VoceTemplateScrittura @relation(fields: [voceTemplateId], references: [id])
}

model VoceTemplateScrittura {
  id             String             @id @default(cuid())
  sezione        SezioneScrittura
  formulaImporto FormulaImporto?
  descrizione    String
  templateId     String
  campi          CampoDatiPrimari[]
  template       ImportTemplate     @relation(fields: [templateId], references: [id])
}

model ImportTemplate {
  id               String                  @id @default(cuid())
  modelName        String?
  fileIdentifier   String?
  name             String?                 @unique
  fieldDefinitions FieldDefinition[]
  voci             VoceTemplateScrittura[]
}

model FieldDefinition {
  id             String         @id @default(cuid())
  start          Int
  length         Int
  templateId     String
  fileIdentifier String
  fieldName      String
  format         String?
  template       ImportTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, fileIdentifier, fieldName], name: "template_file_field_unique")
}

model ImportLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  templateName String
  fileName     String
  status       String
  details      String?
  rowCount     Int
}

model WizardState {
  id        String   @id @default(cuid())
  step      Int
  payload   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImportScritturaTestata {
  id                        String                         @id @default(cuid())
  codiceUnivocoScaricamento String                         @unique
  codiceCausale             String?
  codiceFornitore           String?
  descrizioneCausale        String?
  dataRegistrazione         DateTime?
  dataDocumento             DateTime?
  numeroDocumento           String?
  noteMovimento             String?
  righeContabili            ImportScritturaRigaContabile[]
  righeIva                  ImportScritturaRigaIva[]
  causale                   CausaleContabile?              @relation(fields: [codiceCausale], references: [id], onUpdate: NoAction, onDelete: NoAction)
  fornitore                 Fornitore?                     @relation(fields: [codiceFornitore], references: [externalId], onUpdate: NoAction, onDelete: NoAction)

  @@map("import_scritture_testate")
}

model ImportScritturaRigaContabile {
  id                        String                  @id @default(cuid())
  codiceUnivocoScaricamento String
  riga                      Int
  codiceConto               String?
  note                      String?
  importoDare               Float?
  importoAvere              Float?
  testata                   ImportScritturaTestata? @relation(fields: [importScritturaTestataId], references: [id], onDelete: Cascade)
  importScritturaTestataId  String?
  allocazioni               ImportAllocazione[]

  @@map("import_scritture_righe_contabili")
}

model ImportAllocazione {
  id                             String                       @id @default(cuid())
  importScritturaRigaContabileId String
  commessaId                     String
  importo                        Float
  percentuale                    Float?
  suggerimentoAutomatico         Boolean                      @default(false)
  rigaContabile                  ImportScritturaRigaContabile @relation(fields: [importScritturaRigaContabileId], references: [id], onDelete: Cascade)

  @@map("import_allocazioni")
}

model ImportScritturaRigaIva {
  id                        String                 @id @default(cuid())
  codiceUnivocoScaricamento String
  riga                      Int
  codiceIva                 String
  codiceConto               String? // Contropartita IVA
  imponibile                Float
  imposta                   Float
  testata                   ImportScritturaTestata @relation(fields: [codiceUnivocoScaricamento], references: [codiceUnivocoScaricamento], onDelete: Cascade)

  @@index([codiceUnivocoScaricamento])
}

enum TipoConto {
  Costo
  Ricavo
  Patrimoniale
  Fornitore
  Cliente
}

enum TipoCampo {
  number
  select
  text
  date
}

enum SezioneScrittura {
  Dare
  Avere
}

enum FormulaImporto {
  imponibile
  iva
  totale
}
