generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StagingTestata {
  id                            String                 @id @default(cuid())
  /// Chiave primaria del movimento, usata per collegare i file (CODICE UNIVOCO DI SCARICAMENTO)
  codiceUnivocoScaricamento     String                 @unique
  /// Esercizio contabile di riferimento
  esercizio                     String
  /// Codice Fiscale dell'azienda
  codiceAzienda                 String
  /// Codice della causale contabile
  codiceCausale                 String
  /// Descrizione (facoltativa) della causale
  descrizioneCausale            String
  /// Data di registrazione (formato GGMMAAAA)
  dataRegistrazione             String?
  /// Tipo registro IVA (A=Acquisti, C=Corrispettivi, V=Vendite)
  tipoRegistroIva               String?
  /// Codice Fiscale del cliente/fornitore
  clienteFornitoreCodiceFiscale String?
  /// Sigla/Codice interno del cliente/fornitore
  clienteFornitoreSigla         String?
  /// Data del documento (formato GGMMAAAA)
  dataDocumento                 String?
  /// Numero del documento
  numeroDocumento               String?
  /// Importo totale del documento
  totaleDocumento               String?
  /// Note generali del movimento
  noteMovimento                 String?
  /// Data di registrazione sul registro IVA (formato GGMMAAAA)
  dataRegistroIva               String?
  /// Data di competenza per la liquidazione IVA (formato GGMMAAAA)
  dataCompetenzaLiquidIva       String?
  /// Data di competenza economica/contabile (formato GGMMAAAA)
  dataCompetenzaContabile       String?
  /// Data per la gestione del Plafond IVA (formato GGMMAAAA)
  dataPlafond                   String?
  /// Anno per la gestione del Pro-Rata IVA
  annoProRata                   String?
  /// Importo delle ritenute
  ritenute                      String?
  /// Esigibilità IVA (valore non presente nel tracciato originale, da investigare)
  esigibilitaIva                String?
  /// Numero di protocollo IVA
  protocolloRegistroIva         String?
  /// Flag per quadratura scheda contabile (valore non presente nel tracciato originale)
  flagQuadrSchedaContabile      String?
  /// Flag per la stampa sul registro IVA (valore non presente nel tracciato originale)
  flagStampaRegIva              String?
  /// Subcodice fiscale dell'azienda
  subcodiceAzienda              String?
  /// Codice attività contabile
  codiceAttivita                String?
  /// Codice per la numerazione del registro IVA
  codiceNumerazioneIva          String?
  /// Subcodice del cliente/fornitore
  clienteFornitoreSubcodice     String?
  /// Suffisso per il numero del documento (es. 'A', 'B')
  documentoBis                  String?
  /// Suffisso per il numero di protocollo
  protocolloBis                 String?
  /// Importo dei contributi Enasarco
  enasarco                      String?
  /// Importo totale del documento in valuta estera
  totaleInValuta                String?
  /// Codice della valuta estera (es. 'USD')
  codiceValuta                  String?
  /// Dati autofattura: Codice numerazione IVA vendite
  codiceNumerazioneIvaVendite   String?
  /// Dati autofattura: Numero protocollo
  protocolloNumeroAutofattura   String?
  /// Dati autofattura: Suffisso protocollo
  protocolloBisAutofattura      String?
  /// Data del versamento delle ritenute (formato GGMMAAAA)
  versamentoData                String?
  /// Tipo di versamento (0=F24/F23, 1=Tesoreria)
  versamentoTipo                String?
  /// Modello di versamento (0=Nessuno, 1=Banca, 2=Concessione, 3=Posta)
  versamentoModello             String?
  /// Estremi del versamento
  versamentoEstremi             String?
  /// Stato della registrazione (D=Definitiva, P=Provvisoria, V=Da verificare)
  stato                         String?
  /// Tipo gestione partite (A=Creazione, B=Ins. rata, C=Creazione+rate, D=Automatica)
  tipoGestionePartite           String?
  /// Codice pagamento per la creazione automatica delle rate
  codicePagamento               String?
  /// Dati partita: Codice attività IVA
  codiceAttivitaIvaPartita      String?
  /// Dati partita: Tipo registro IVA
  tipoRegistroIvaPartita        String?
  /// Dati partita: Codice numerazione IVA
  codiceNumerazioneIvaPartita   String?
  /// Dati partita: Codice Fiscale del cliente/fornitore
  cliForCodiceFiscalePartita     String?
  /// Dati partita: Subcodice del cliente/fornitore
  cliForSubcodicePartita        String?
  /// Dati partita: Sigla del cliente/fornitore
  cliForSiglaPartita            String?
  /// Dati partita: Data del documento (formato GGMMAAAA)
  documentoDataPartita          String?
  /// Dati partita: Numero del documento
  documentoNumeroPartita        String?
  /// Dati partita: Suffisso del numero documento
  documentoBisPartita           String?
  /// Dati Intrastat: Codice Fiscale del cliente/fornitore
  cliForIntraCodiceFiscale      String?
  /// Dati Intrastat: Subcodice del cliente/fornitore
  cliForIntraSubcodice          String?
  /// Dati Intrastat: Sigla del cliente/fornitore
  cliForIntraSigla              String?
  /// Dati Intrastat: Tipo movimento (AA=Acquisto, AZ=Rett. Acq., etc.)
  tipoMovimentoIntrastat        String?
  /// Dati Intrastat: Data dell'operazione (formato GGMMAAAA)
  documentoOperazione           String?
  createdAt                     DateTime               @default(now())
  updatedAt                     DateTime               @updatedAt
  righe                         StagingRigaContabile[]  

  @@map("staging_testate")
}

model StagingRigaContabile {
  id                            String         @id @default(cuid())
  /// Chiave esterna per collegare la riga alla sua testata
  codiceUnivocoScaricamento     String
  /// Tipo di conto (C=Cliente, F=Fornitore, vuoto=Conto generico)
  tipoConto                     String
  /// Codice Fiscale del cliente/fornitore (se tipoConto è C o F)
  clienteFornitoreCodiceFiscale String
  /// Subcodice del cliente/fornitore
  clienteFornitoreSubcodice     String
  /// Sigla del cliente/fornitore
  clienteFornitoreSigla         String
  /// Codice del conto dal Piano dei Conti
  conto                         String
  /// Importo in colonna Dare
  importoDare                   String
  /// Importo in colonna Avere
  importoAvere                  String
  /// Note descrittive della riga
  note                          String
  /// Flag (0/1) che indica la presenza di dati di competenza contabile
  insDatiCompetenzaContabile    String
  /// Usato per collegare la riga al record PNRIGCON originale (obsoleto, da valutare rimozione)
  externalId                    String
  /// Progressivo numerico della riga all'interno della registrazione
  progressivoRigo               String
  /// Data fine competenza (formato GGMMAAAA)
  dataFineCompetenza            String
  /// Data fine competenza analitica (formato GGMMAAAA)
  dataFineCompetenzaAnalit      String
  /// Data inizio competenza (formato GGMMAAAA)
  dataInizioCompetenza          String
  /// Data inizio competenza analitica (formato GGMMAAAA)
  dataInizioCompetenzaAnalit    String
  /// Data registrazione apertura (facoltativo)
  dataRegistrazioneApertura     String
  /// Note relative alla competenza contabile
  noteDiCompetenza              String?
  /// Conto facoltativo da rilevare (movimento 1)
  contoDaRilevareMovimento1     String?
  /// Conto facoltativo da rilevare (movimento 2)
  contoDaRilevareMovimento2     String?
  /// Flag (0/1) che indica la presenza di dati per movimenti analitici (collegamento a MOVANAC.TXT)
  insDatiMovimentiAnalitici     String?
  /// Flag (0/1) che indica la presenza di dati per Studi di Settore
  insDatiStudiDiSettore         String?
  /// Stato del movimento per Studi di Settore (G=Generato, M=Manuale)
  statoMovimentoStudi           String?
  /// Esercizio di rilevanza fiscale
  esercizioDiRilevanzaFiscale   String?
  /// Dettaglio cliente/fornitore: Codice Fiscale
  dettaglioCliForCodiceFiscale  String?
  /// Dettaglio cliente/fornitore: Subcodice
  dettaglioCliForSubcodice      String?
  /// Dettaglio cliente/fornitore: Sigla
  dettaglioCliForSigla          String?
  /// Sigla del conto, alternativa al campo 'conto'
  siglaConto                    String?
  createdAt                     DateTime       @default(now())  
  updatedAt                     DateTime       @updatedAt
  testata                       StagingTestata @relation(fields: [codiceUnivocoScaricamento], references: [codiceUnivocoScaricamento], onDelete: Cascade)

  @@map("staging_righe_contabili")
}

model StagingRigaIva {
  id                        String   @id @default(cuid())
  /// Chiave esterna per collegare la riga alla sua testata
  codiceUnivocoScaricamento String
  /// Identificatore univoco della riga, calcolato come {codiceUnivoco}-{progressivo}
  rigaIdentifier            String   @unique
  /// Codice IVA di riferimento
  codiceIva                 String
  /// Conto di contropartita IVA
  contropartita             String
  /// Importo imponibile
  imponibile                String
  /// Importo dell'imposta
  imposta                   String
  /// Imposta non considerata per calcoli specifici
  impostaNonConsiderata     String
  /// Totale lordo della riga IVA
  importoLordo              String
  /// Note specifiche della riga
  note                      String
  /// Sigla della contropartita, alternativa al campo 'contropartita'
  siglaContropartita        String?
  /// Progressivo numerico della riga IVA all'interno della registrazione
  riga                      String
  /// Imposta relativa a spese di intrattenimento
  impostaIntrattenimenti      String?
  /// Imponibile al 50% per corrispettivi non considerati
  imponibile50CorrNonCons     String?  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("staging_righe_iva")
}

model StagingAllocazione {
  id                        String  @id @default(cuid())
  codiceUnivocoScaricamento String?
  progressivoNumeroRigoCont String?
  allocazioneIdentifier     String? @unique
  centroDiCosto             String?
  parametro                 String?
  externalId                String?
  progressivoRigoContabile  String?

  @@map("staging_allocazioni")
}

model StagingConto {
  id                               String    @id @default(cuid())
  codice                           String?
  codiceFiscaleAzienda             String?
  descrizione                      String?
  descrizioneLocale                String?
  sigla                            String?
  livello                          String?
  tipo                             String?
  gruppo                           String?
  naturaConto                      String?
  controlloSegno                   String?
  validoImpresaOrdinaria           Boolean?
  validoImpresaSemplificata        Boolean?
  validoProfessionistaOrdinario    Boolean?
  validoProfessionistaSemplificato Boolean?
  validoUnicoPf                    Boolean?
  validoUnicoSp                    Boolean?
  validoUnicoSc                    Boolean?
  validoUnicoEnc                   Boolean?
  codiceClasseIrpefIres            String?
  codiceClasseIrap                 String?
  codiceClasseProfessionista       String?
  codiceClasseIrapProfessionista   String?
  codiceClasseIva                  String?
  codiceClasseDatiStudiSettore     String?
  contoDareCee                     String?
  contoAvereCee                    String?
  contoCostiRicaviCollegato        String?
  gestioneBeniAmmortizzabili       String?
  percDeduzioneManutenzione        Float?
  dettaglioClienteFornitore        String?
  numeroColonnaRegCronologico      Int?
  numeroColonnaRegIncassiPag       Int?
  descrizioneBilancioDare          String?
  descrizioneBilancioAvere         String?
  subcodiceAzienda                 String?
  utilizzaDescrizioneLocale        Boolean?
  consideraNelBilancioSemplificato Boolean?
  tabellaItalstudio                String?
  importedAt                       DateTime  @default(now())

  @@unique([codice, codiceFiscaleAzienda])
  @@map("staging_conti")
}

model StagingCodiceIva {
  id                             String  @id @default(cuid())
  codice                         String?
  descrizione                    String?
  aliquota                       String?
  ventilazione                   String?
  validitaInizio                 String?
  validitaFine                   String?
  indetraibilita                 String?
  note                           String?
  tipoCalcolo                    String?
  acqOperazImponibiliOccasionali String?
  acquistiCessioni               String?
  acquistiIntracomunitari        String?
  agevolazioniSubforniture       String?
  aliquotaDiversa                String?
  analiticoBeniAmmortizzabili    String?
  autofatturaReverseCharge       String?
  beniAmmortizzabili             String?
  cesArt38QuaterStornoIva        String?
  cessioneProdottiEditoriali     String?
  comunicazioneDatiIvaAcquisti   String?
  comunicazioneDatiIvaVendite    String?
  gestioneProRata                String?
  imponibile50Corrispettivi      String?
  imposteIntrattenimenti         String?
  indicatoreTerritorialeAcquisti String?
  indicatoreTerritorialeVendite  String?
  metodoDaApplicare              String?
  monteAcquisti                  String?
  noVolumeAffariPlafond          String?
  operazioneEsenteOccasionale    String?
  percDetrarreExport             String?
  percentualeCompensazione       String?
  percentualeForfetaria          String?
  plafondAcquisti                String?
  plafondVendite                 String?
  provvigioniDm34099             String?
  quotaForfetaria                String?

  @@map("staging_codici_iva")
}

model StagingCausaleContabile {
  id                             String  @id @default(cuid())
  descrizione                    String?
  codiceCausale                  String?
  contoIva                       String?
  contoIvaVendite                String?
  dataFine                       String?
  dataInizio                     String?
  descrizioneDocumento           String?
  fatturaEmessaRegCorrispettivi  String?
  fatturaImporto0                String?
  fatturaValutaEstera            String?
  generazioneAutofattura         String?
  gestioneIntrastat              String?
  gestionePartite                String?
  gestioneRitenuteEnasarco       String?
  identificativoEsteroClifor     String?
  ivaEsigibilitaDifferita        String?
  movimentoRegIvaNonRilevante    String?
  nonConsiderareLiquidazioneIva  String?
  nonStampareRegCronologico      String?
  noteMovimento                  String?
  scritturaRettificaAssestamento String?
  segnoMovimentoIva              String?
  tipoAggiornamento              String?
  tipoAutofatturaGenerata        String?
  tipoMovimento                  String?
  tipoMovimentoSemplificata      String?
  tipoRegistroIva                String?
  versamentoRitenute             String?

  @@map("staging_causali_contabili")
}

model StagingCondizionePagamento {
  id                       String  @id @default(cuid())
  descrizione              String?
  calcolaGiorniCommerciali String?
  codicePagamento          String?
  consideraPeriodiChiusura String?
  contoIncassoPagamento    String?
  inizioScadenza           String?
  numeroRate               String?
  suddivisione             String?

  @@map("staging_condizioni_pagamento")
}

model StagingAnagrafica {
  id                       String  @id @default(cuid())
  aliquota                 String?
  attivitaMensilizzazione  String?
  cap                      String?
  codiceIncassoCliente     String?
  codiceIncassoPagamento   String?
  codiceIso                String?
  codicePagamentoFornitore String?
  codiceRitenuta           String?
  codiceValuta             String?
  cognome                  String?
  comuneNascita            String?
  comuneResidenza          String?
  contributoPrevid335      String?
  contributoPrevidenziale  String?
  dataNascita              String?
  enasarco                 String?
  gestioneDati770          String?
  idFiscaleEstero          String?
  indirizzo                String?
  nome                     String?
  numeroTelefono           String?
  percContributoCassa      String?
  prefissoTelefono         String?
  quadro770                String?
  sesso                    String?
  soggettoARitenuta        String?
  soggettoInail            String?
  tipoRitenuta             String?
  codiceAnagrafica         String?
  codiceFiscaleAzienda     String?
  codiceFiscaleClifor      String?
  codiceUnivoco            String?
  denominazione            String?
  partitaIva               String?
  sottocontoCliente        String?
  sottocontoFornitore      String?
  subcodiceAzienda         String?
  subcodiceClifor          String?
  tipoConto                String?
  tipoSoggetto             String?

  @@map("staging_anagrafiche")
}

model Cliente {
  id                       String          @id @default(cuid())
  externalId               String?         @unique
  nome                     String
  piva                     String?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  codiceFiscale            String?
  cap                      String?
  codicePagamento          String?
  codiceValuta             String?
  cognome                  String?
  comune                   String?
  comuneNascita            String?
  dataNascita              DateTime?
  indirizzo                String?
  nazione                  String?
  nomeAnagrafico           String?
  provincia                String?
  sesso                    String?
  telefono                 String?
  tipoAnagrafica           String?
  codiceAnagrafica         String?
  codiceIncassoCliente     String?
  codiceIso                String?
  codicePagamentoFornitore String?
  denominazione            String?
  eCliente                 Boolean?
  eFornitore               Boolean?
  ePersonaFisica           Boolean?
  haPartitaIva             Boolean?
  idFiscaleEstero          String?
  prefissoTelefono         String?
  sessoDesc                String?
  sottocontoAttivo         String?
  sottocontoCliente        String?         @unique
  tipoConto                String?
  tipoContoDesc            String?
  tipoSoggetto             String?
  tipoSoggettoDesc         String?
  codiceDestinatario       String?
  condizionePagamentoId    String?
  sottocontoCosto          String?
  sottocontoPassivo        String?
  commesse                 Commessa[]
  righeScrittura           RigaScrittura[]
}

model Fornitore {
  id                          String               @id @default(cuid())
  externalId                  String?              @unique
  nome                        String
  piva                        String?
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  codiceFiscale               String?
  aliquota                    Float?
  attivitaMensilizzazione     Int?
  cap                         String?
  codicePagamento             String?
  codiceRitenuta              String?
  codiceValuta                String?
  cognome                     String?
  comune                      String?
  comuneNascita               String?
  contributoPrevidenziale     Boolean?
  contributoPrevidenzialeL335 String?
  dataNascita                 DateTime?
  enasarco                    Boolean?
  gestione770                 Boolean?
  indirizzo                   String?
  nazione                     String?
  nomeAnagrafico              String?
  percContributoCassaPrev     Float?
  provincia                   String?
  quadro770                   String?
  sesso                       String?
  soggettoInail               Boolean?
  soggettoRitenuta            Boolean?
  telefono                    String?
  tipoAnagrafica              String?
  tipoRitenuta                String?
  codiceAnagrafica            String?
  codiceIncassoCliente        String?
  codiceIso                   String?
  codicePagamentoFornitore    String?
  contributoPrevid335Desc     String?
  denominazione               String?
  eCliente                    Boolean?
  eFornitore                  Boolean?
  ePersonaFisica              Boolean?
  haPartitaIva                Boolean?
  idFiscaleEstero             String?
  prefissoTelefono            String?
  quadro770Desc               String?
  sessoDesc                   String?
  sottocontoAttivo            String?
  sottocontoFornitore         String?              @unique
  tipoConto                   String?
  tipoContoDesc               String?
  tipoRitenuraDesc            String?
  tipoSoggetto                String?
  tipoSoggettoDesc            String?
  codiceDestinatario          String?
  condizionePagamentoId       String?
  sottocontoCosto             String?
  sottocontoPassivo           String?
  righeScrittura              RigaScrittura[]
  scritture                   ScritturaContabile[]
}

model VoceAnalitica {
  id                 String               @id @default(cuid())
  nome               String               @unique
  descrizione        String?
  tipo               String
  isAttiva           Boolean              @default(true)
  allocazioni        Allocazione[]
  budgetItems        BudgetVoce[]
  regoleRipartizione RegolaRipartizione[]
  conti              Conto[]              @relation("ContoToVoceAnalitica")
}

model RegolaRipartizione {
  id              String        @id @default(cuid())
  descrizione     String
  commessaId      String
  percentuale     Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  contoId         String
  voceAnaliticaId String
  commessa        Commessa      @relation(fields: [commessaId], references: [id], onDelete: Cascade)
  conto           Conto         @relation(fields: [contoId], references: [id], onDelete: Cascade)
  voceAnalitica   VoceAnalitica @relation(fields: [voceAnaliticaId], references: [id], onDelete: Cascade)

  @@unique([contoId, commessaId, voceAnaliticaId])
}

model Conto {
  id                               String               @id @default(cuid())
  codice                           String?
  nome                             String
  tipo                             TipoConto
  richiedeVoceAnalitica            Boolean              @default(false)
  contropartiteSuggeriteIds        String[]
  externalId                       String?              @unique
  classeDatiExtracontabili         String?
  classeIrap                       String?
  classeIrapProfessionista         String?
  classeIrpefIres                  String?
  classeIva                        String?
  classeProfessionista             String?
  codificaFormattata               String?
  colonnaRegistroCronologico       String?
  colonnaRegistroIncassiPagamenti  String?
  contoAvereCee                    String?
  contoCostiRicavi                 String?
  contoDareCee                     String?
  controlloSegno                   String?
  controlloSegnoDesc               String?
  descrizioneBilancioAvere         String?
  descrizioneBilancioDare          String?
  dettaglioClienteFornitore        String?
  gestioneBeniAmmortizzabili       String?
  gruppo                           String?
  gruppoDesc                       String?
  livello                          String?
  livelloDesc                      String?
  naturaConto                      String?
  percDeduzioneManutenzione        Float?
  sigla                            String?
  validoImpresaOrdinaria           Boolean?
  validoImpresaSemplificata        Boolean?
  validoProfessionistaOrdinario    Boolean?
  validoProfessionistaSemplificato Boolean?
  validoUnicoEnc                   Boolean?
  validoUnicoPf                    Boolean?
  validoUnicoSc                    Boolean?
  validoUnicoSp                    Boolean?
  tabellaItalstudio                String?
  codiceFiscaleAzienda             String               @default("")
  consideraBilancioSemplificato    Boolean?
  descrizioneLocale                String?
  subcodiceAzienda                 String?
  utilizzaDescrizioneLocale        Boolean?
  isRilevantePerCommesse           Boolean              @default(false)
  regoleRipartizione               RegolaRipartizione[]
  righeScrittura                   RigaScrittura[]
  vociAnalitiche                   VoceAnalitica[]      @relation("ContoToVoceAnalitica")

  @@unique([codice, codiceFiscaleAzienda])
}

model Commessa {
  id                 String               @id @default(cuid())
  nome               String
  clienteId          String
  descrizione        String?
  externalId         String?              @unique
  dataFine           DateTime?
  dataInizio         DateTime?
  stato              String?
  priorita           String?              @default("media")
  isAttiva           Boolean              @default(true)
  parentId           String?
  allocazioni        Allocazione[]
  budget             BudgetVoce[]
  cliente            Cliente              @relation(fields: [clienteId], references: [id])
  parent             Commessa?            @relation("CommessaHierarchy", fields: [parentId], references: [id])
  children           Commessa[]           @relation("CommessaHierarchy")
  regoleRipartizione RegolaRipartizione[]
  importAllocazioni  ImportAllocazione[]
}

model BudgetVoce {
  id              String        @id @default(cuid())
  importo         Float
  commessaId      String
  voceAnaliticaId String
  commessa        Commessa      @relation(fields: [commessaId], references: [id], onDelete: Cascade)
  voceAnalitica   VoceAnalitica @relation(fields: [voceAnaliticaId], references: [id], onDelete: Cascade)

  @@unique([commessaId, voceAnaliticaId])
}

model ScritturaContabile {
  id              String            @id @default(cuid())
  data            DateTime?         @default(now())
  causaleId       String?
  descrizione     String
  datiAggiuntivi  Json?
  externalId      String?           @unique
  fornitoreId     String?
  dataDocumento   DateTime?
  numeroDocumento String?
  righe           RigaScrittura[]
  causale         CausaleContabile? @relation(fields: [causaleId], references: [id])
  fornitore       Fornitore?        @relation(fields: [fornitoreId], references: [id])
}

model RigaScrittura {
  id                   String             @id @default(cuid())
  descrizione          String
  dare                 Float?
  avere                Float?
  contoId              String?
  scritturaContabileId String
  clienteId            String?
  fornitoreId          String?
  allocazioni          Allocazione[]
  righeIva             RigaIva[]
  cliente              Cliente?           @relation(fields: [clienteId], references: [id])
  conto                Conto?             @relation(fields: [contoId], references: [id])
  fornitore            Fornitore?         @relation(fields: [fornitoreId], references: [id])
  scritturaContabile   ScritturaContabile @relation(fields: [scritturaContabileId], references: [id], onDelete: Cascade)
}

model Allocazione {
  id              String                 @id @default(cuid())
  importo         Float
  rigaScritturaId String
  commessaId      String
  voceAnaliticaId String
  createdAt       DateTime               @default(now())
  dataMovimento   DateTime
  note            String?
  updatedAt       DateTime               @updatedAt
  tipoMovimento   TipoMovimentoAnalitico
  commessa        Commessa               @relation(fields: [commessaId], references: [id], onDelete: Cascade)
  rigaScrittura   RigaScrittura          @relation(fields: [rigaScritturaId], references: [id], onDelete: Cascade)
  voceAnalitica   VoceAnalitica          @relation(fields: [voceAnaliticaId], references: [id], onDelete: Cascade)
}

model CodiceIva {
  id                                 String    @id @default(cuid())
  externalId                         String?   @unique
  descrizione                        String
  aliquota                           Float?
  indetraibilita                     Float?
  note                               String?
  tipoCalcolo                        String?
  acqOperazImponibiliOccasionali     Boolean?
  acquistiCessioni                   String?
  acquistiCessioniDesc               String?
  acquistiIntracomunitari            Boolean?
  agevolazioniSubforniture           Boolean?
  aliquotaDiversa                    Float?
  analiticoBeniAmmortizzabili        Boolean?
  autofatturaReverseCharge           Boolean?
  beniAmmortizzabili                 Boolean?
  cesArt38QuaterStornoIva            Boolean?
  cessioneProdottiEditoriali         Boolean?
  comunicazioneDatiIvaAcquisti       String?
  comunicazioneDatiIvaAcquistiDesc   String?
  comunicazioneDatiIvaVendite        String?
  comunicazioneDatiIvaVenditeDesc    String?
  gestioneProRata                    String?
  gestioneProRataDesc                String?
  imponibile50Corrispettivi          Boolean?
  imposteIntrattenimenti             String?
  imposteIntrattenimentiDesc         String?
  indicatoreTerritorialeAcquisti     String?
  indicatoreTerritorialeAcquistiDesc String?
  indicatoreTerritorialeVendite      String?
  indicatoreTerritorialeVenditeDesc  String?
  metodoDaApplicare                  String?
  metodoDaApplicareDesc              String?
  monteAcquisti                      Boolean?
  noVolumeAffariPlafond              Boolean?
  operazioneEsenteOccasionale        Boolean?
  percDetrarreExport                 Float?
  percentualeCompensazione           Float?
  percentualeForfetaria              String?
  percentualeForfetariaDesc          String?
  plafondAcquisti                    String?
  plafondAcquistiDesc                String?
  plafondVendite                     String?
  plafondVenditeDesc                 String?
  provvigioniDm34099                 Boolean?
  quotaForfetaria                    String?
  quotaForfetariaDesc                String?
  ventilazione                       Boolean?
  codice                             String?
  codiceExport                       String?
  dataAggiornamento                  DateTime?
  esclusoDaIva                       Boolean?
  esente                             Boolean?
  fuoriCampoIva                      Boolean?
  imponibile                         Boolean?
  inSospensione                      Boolean?
  inUso                              Boolean?
  natura                             String?
  nonImponibile                      Boolean?
  nonImponibileConPlafond            Boolean?
  reverseCharge                      Boolean?
  splitPayment                       Boolean?
  tipoCalcoloDesc                    String?
  dataFine                           DateTime?
  dataInizio                         DateTime?
  percentuale                        Float?
  validitaFine                       DateTime?
  validitaInizio                     DateTime?
  righeIva                           RigaIva[]
}

model CondizionePagamento {
  id                       String   @id @default(cuid())
  externalId               String?  @unique
  descrizione              String
  codice                   String   @unique
  contoIncassoPagamento    String?
  inizioScadenza           String?
  numeroRate               Int?
  suddivisione             String?
  calcolaGiorniCommerciali Boolean?
  consideraPeriodiChiusura Boolean?
  inizioScadenzaDesc       String?
  suddivisioneDesc         String?
}

model RigaIva {
  id              String         @id @default(cuid())
  imponibile      Float
  imposta         Float
  codiceIvaId     String
  rigaScritturaId String?
  codiceIva       CodiceIva      @relation(fields: [codiceIvaId], references: [id])
  rigaScrittura   RigaScrittura? @relation(fields: [rigaScritturaId], references: [id], onDelete: Cascade)
}

model CausaleContabile {
  id                             String               @id @default(cuid())
  descrizione                    String
  externalId                     String?              @unique
  nome                           String?
  dataFine                       DateTime?
  dataInizio                     DateTime?
  noteMovimento                  String?
  tipoAggiornamento              String?
  tipoMovimento                  String?
  tipoRegistroIva                String?
  contoIva                       String?
  contoIvaVendite                String?
  descrizioneDocumento           String?
  fatturaEmessaRegCorrispettivi  Boolean?
  fatturaImporto0                Boolean?
  fatturaValutaEstera            Boolean?
  generazioneAutofattura         Boolean?
  gestioneIntrastat              Boolean?
  gestionePartite                String?
  gestionePartiteDesc            String?
  gestioneRitenuteEnasarco       String?
  gestioneRitenuteEnasarcoDesc   String?
  identificativoEsteroClifor     Boolean?
  ivaEsigibilitaDifferita        String?
  ivaEsigibilitaDifferitaDesc    String?
  movimentoRegIvaNonRilevante    Boolean?
  nonConsiderareLiquidazioneIva  Boolean?
  nonStampareRegCronologico      Boolean?
  scritturaRettificaAssestamento Boolean?
  segnoMovimentoIva              String?
  segnoMovimentoIvaDesc          String?
  tipoAggiornamentoDesc          String?
  tipoAutofatturaDesc            String?
  tipoAutofatturaGenerata        String?
  tipoMovimentoDesc              String?
  tipoMovimentoSemplificata      String?
  tipoMovimentoSemplificataDesc  String?
  tipoRegistroIvaDesc            String?
  versamentoRitenute             Boolean?
  codice                         String?              @unique
  scritture                      ScritturaContabile[]
}

model CampoDatiPrimari {
  id             String                @id @default(cuid())
  tipo           TipoCampo
  descrizione    String
  nome           String                @unique
  opzioni        String[]
  voceTemplateId String
  voceTemplate   VoceTemplateScrittura @relation(fields: [voceTemplateId], references: [id])
}

model VoceTemplateScrittura {
  id             String             @id @default(cuid())
  sezione        SezioneScrittura
  formulaImporto FormulaImporto?
  descrizione    String
  templateId     String
  campi          CampoDatiPrimari[]
  template       ImportTemplate     @relation(fields: [templateId], references: [id])
}

model ImportTemplate {
  id               String                  @id @default(cuid())
  modelName        String?
  fileIdentifier   String?
  name             String?                 @unique
  fieldDefinitions FieldDefinition[]
  voci             VoceTemplateScrittura[]
}

model FieldDefinition {
  id             String         @id @default(cuid())
  start          Int
  length         Int
  templateId     String
  fileIdentifier String?
  fieldName      String?
  format         String?
  end            Int
  template       ImportTemplate @relation(fields: [templateId], references: [id])
}

model ImportLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  templateName String
  fileName     String
  status       String
  details      String?
  rowCount     Int
}

model WizardState {
  id        String   @id @default(cuid())
  step      String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
}

model ImportScritturaTestata {
  id                            String                         @id @default(cuid())
  codiceUnivocoScaricamento     String                         @unique
  codiceCausale                 String
  descrizioneCausale            String
  dataRegistrazione             DateTime?
  tipoRegistroIva               String?
  clienteFornitoreCodiceFiscale String?
  clienteFornitoreSigla         String?
  dataDocumento                 DateTime?
  numeroDocumento               String?
  protocolloNumero              String?
  totaleDocumento               Float?
  noteMovimento                 String?
  righe                         ImportScritturaRigaContabile[]
  righeIva                      ImportScritturaRigaIva[]

  @@map("import_scritture_testate")
}

model ImportScritturaRigaContabile {
  id                        String                 @id @default(cuid())
  codiceUnivocoScaricamento String
  codiceConto               String
  descrizioneConto          String
  importoDare               Float?
  importoAvere              Float?
  note                      String?
  insDatiMovimentiAnalitici Boolean
  riga                      Int
  tipoConto                 String?
  testata                   ImportScritturaTestata @relation(fields: [codiceUnivocoScaricamento], references: [codiceUnivocoScaricamento], onDelete: Cascade)
  allocazioni               ImportAllocazione[]

  @@unique([codiceUnivocoScaricamento, riga])
}

model ImportAllocazione {
  id                             String                       @id @default(cuid())
  importo                        Float
  percentuale                    Float?
  suggerimentoAutomatico         Boolean                      @default(false)
  commessaId                     String
  importScritturaRigaContabileId String
  commessa                       Commessa                     @relation(fields: [commessaId], references: [id])
  rigaContabile                  ImportScritturaRigaContabile @relation(fields: [importScritturaRigaContabileId], references: [id], onDelete: Cascade)

  @@map("import_allocazioni")
}

model ImportScritturaRigaIva {
  id                        String                 @id @default(cuid())
  codiceUnivocoScaricamento String
  codiceIva                 String
  imponibile                Float
  imposta                   Float
  codiceConto               String?
  indetraibilita            Float?
  riga                      Int
  testata                   ImportScritturaTestata @relation(fields: [codiceUnivocoScaricamento], references: [codiceUnivocoScaricamento], onDelete: Cascade)

  @@unique([codiceUnivocoScaricamento, riga])
}

enum TipoMovimentoAnalitico {
  COSTO_EFFETTIVO
  RICAVO_EFFETTIVO
  COSTO_STIMATO
  RICAVO_STIMATO
  COSTO_BUDGET
  RICAVO_BUDGET
}

enum TipoConto {
  Costo
  Ricavo
  Patrimoniale
  Fornitore
  Cliente
  Economico
  Ordine
}

enum TipoCampo {
  number
  select
  text
  date
}

enum SezioneScrittura {
  Dare
  Avere
}

enum FormulaImporto {
  imponibile
  iva
  totale
}

/// The different file types that can be imported
enum FileType {
  CSV
  XLSX
  PDF
  TXT
  JSON
  XML
}
